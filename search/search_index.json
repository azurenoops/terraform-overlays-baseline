{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure NoOps Terraform Baseline Guide","text":"<p>Azure NoOps Terraform Baseline Guide is a collection of best practices, demos, code practices and guidelines for using Azure NoOps modules and compositions for Azure. It is designed to help you create, and use Azure NoOps Terraform modules and compositions that help you to understand, maintain, and use. It is based on the Terraform Recommended Practices and is tailored for Azure.</p> <p>Before using Azure NoOps Terraform Baseline Guide, you should be familiar with the following pages from the official Terraform documentation:</p> <ul> <li>Standard Module Structure</li> <li>Version Constraints</li> <li>Publishing Modules</li> </ul>"},{"location":"demos/","title":"Demos","text":""},{"location":"faq/","title":"FAQs","text":""},{"location":"faq/#how-much-does-a-typical-deployment-cost","title":"How much does a typical deployment cost?","text":"<p>The Azure landing zones Terraform module covers many different deployment scenarios, so costs can vary dramatically depending on what options are configured.</p> <p>Some of these costs can come from resources deployed directly by the module. Other costs may be incurred when Azure Policy performs remediation of non-compliant resources within scope of the deployment.</p> <p>If you are looking to reduce costs as part of evaluating the module, we recommend assessing whether your evaluation needs to implement the following common resources which can incur the highest costs include:</p> <ul> <li>Microsoft Defender for Cloud</li> <li>Azure DDoS Network Protection</li> <li>Azure Firewall</li> <li>Azure Virtual Network Gateway (ExpressRoute/VPN)</li> </ul> <p>Although our examples try to minimize the use of these resources and to use lower cost SKUs where applicable, please take care to ensure you understand which resources are being deployed and the associated costs these will incur.</p> <p>In large environments, costs can also increase when large volumes of data are being stored in the Log Analytics workspace.</p>"},{"location":"faq/#how-does-the-shared-responsibility-model-work-in-azure-noops","title":"How does the Shared Responsibility Model work in Azure NoOps?","text":"<p>In Azure NoOps, the Shared Responsibility Model involves collaboration between development, cyber, and operations teams. Each team has specific roles but works together to ensure the success of NoOps</p>"},{"location":"faq/#what-are-the-prerequisites-for-successfully-implementing-azure-noops","title":"What are the prerequisites for successfully implementing Azure NoOps?","text":"<p>A user with a global admin role, familiarity with Git commands and tools such as actions, Azure CLI, Terraform, Git, access to GitHub Repo, and Visual Studio Code are some of the prerequisites. Additionally, having taken specific Microsoft Learn courses like the Fundamentals of Terraform and AZ-400 is beneficial.</p>"},{"location":"basics/","title":"Building Code for Deployment Lifecyle: AzureRM Provider vs Azure NoOps","text":"<p>When working with Azure, there are multiple ways to interact with the platform and provision resources. The next sections looks at approaches using the AzureRM provider and leveraging Azure NoOps.</p>"},{"location":"basics/#azurerm-provider","title":"AzureRM Provider","text":"<p>The AzureRM provider is a widely-used method for managing Azure resources using Infrastructure as Code (IaC) tools using Terraform. It allows you to define your infrastructure and resource configurations in code, providing a declarative way to provision and manage resources.</p> <p>With the AzureRM provider, you can take advantage of Terraform's rich ecosystem and extensive provider support. It offers a wide range of resources and features, allowing you to create, update, and delete Azure resources with ease.</p>"},{"location":"basics/#azure-noops","title":"Azure NoOps","text":"<p>On the other hand, Azure NoOps is a framework that provides a simplified, secure and automated approach to deploying cloud infrastructure in Azure. It offers a set of pre-defined IaC patterns and best practices, enabling you to deploy a well-architected and standardized landing zone and workloads in Azure. It automates the deployment process and incorporates built-in security controls and compliance policies, reducing the time and effort required to set up a secure and compliant cloud infrastructure.</p>"},{"location":"basics/#contrasting-approaches","title":"Contrasting Approaches","text":"<p>While both the AzureRM provider and Azure NoOps offer ways to provision resources in Azure, they have distinct differences in terms of complexity, flexibility, and management overhead.</p> <p>The AzureRM provider provides fine-grained control over your infrastructure and allows you to manage resources using Terraform's powerful features. However, it requires more upfront configuration and maintenance.</p> <p>On the other hand, Azure NoOps simplifies the provisioning process by abstracting away the infrastructure layer. It offers a more streamlined development experience, but may have limitations in terms of customization and control.</p> <p>In the following sections, we will explore code samples that demonstrate the usage of both approaches, highlighting their strengths and trade-offs.</p>"},{"location":"basics/noops/","title":"Get started","text":"<p>The goal of this section is to get you up and running with Azure NoOps in X time.</p> <p>Although in the previous section we've covered the basics of Terraform, this section will focus on the specifics of using Azure NoOps. One of the key differences is that Azure NoOps is a collection of modules and compositions that are designed to work together to create an complete infrastructure.</p> <p>This section will cover everything between installing the required tools, and managing the full lifecycle of Azure NoOps modules and compositions in Azure.</p>"},{"location":"basics/noops/create-resources/","title":"Create resources","text":"<p>Let's create an Azure Storage account using Terraform:</p> <ol> <li> <p>Open Visual Studio Code.</p> </li> <li> <p>Create a file <code>versions.tf</code>.</p> </li> <li> <p>Configure the Azure provider:</p> <pre><code>terraform {\n  required_version = \"&gt;= 1.3\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.36\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> </ol> Show `versions.tf` contents <pre><code>terraform {\n  required_version = \"&gt;= 1.3\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.36\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.global.tf</code>.</p> </li> <li> <p>Define the global variables:</p> <pre><code>variable \"deploy_environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"dev\"\n}\n\nvariable \"org_name\" {\n  description = \"The name of the organization.\"\n  default = \"anoa\"\n}\n\nvariable \"environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"public\"\n}\n\nvariable \"workload_name\" {\n  description = \"The name of the workload.\"\n  default = \"storage\"\n}\n\nvariable \"location\" {\n  description = \"The location/region where the resources will be created.\"\n  default     = \"northeurope\"\n}\n</code></pre> </li> </ol> Show `variables.global.tf` contents <pre><code>variable \"deploy_environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"dev\"\n}\n\nvariable \"org_name\" {\n  description = \"The name of the organization.\"\n  default = \"anoa\"\n}\n\nvariable \"environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"public\"\n}\n\nvariable \"workload_name\" {\n  description = \"The name of the workload.\"\n  default = \"storage\"\n}\n\nvariable \"location\" {\n  description = \"The location/region where the resources will be created.\"\n  default     = \"northeurope\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.storage.account.tf</code>.</p> </li> <li> <p>Define the variables for the storage account:</p> <pre><code>variable \"storage_account_name\" {\n  description = \"The name of the storage account.\"\n  default     = \"examplest\"\n}\n\nvariable \"storage_account_tier\" {\n  description = \"The storage account tier.\"\n  default     = \"Standard\"\n}\n\nvariable \"storage_account_replication_type\" {\n  description = \"The storage account replication type.\"\n  default     = \"LRS\"\n}\n\nvariable \"storage_account_location\" {\n  description = \"The location of the storage account.\"\n  default     = \"northeurope\"\n}\n\nvariable \"storage_account_container_name\" {\n  description = \"The name of the storage account container.\"\n  default     = \"example-container\"\n}\n</code></pre> </li> </ol> Show `variables.storage.account.tf` contents <pre><code>variable \"storage_account_name\" {\n  description = \"The name of the storage account.\"\n  default     = \"examplest\"\n}\n\nvariable \"storage_account_tier\" {\n  description = \"The storage account tier.\"\n  default     = \"Standard\"\n}\n\nvariable \"storage_account_replication_type\" {\n  description = \"The storage account replication type.\"\n  default     = \"LRS\"\n}\n\nvariable \"storage_account_location\" {\n  description = \"The location of the storage account.\"\n  default     = \"northeurope\"\n}\n\nvariable \"storage_account_container_name\" {\n  description = \"The name of the storage account container.\"\n  default     = \"example-container\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.spoke.tf</code>.</p> </li> <li> <p>Define the variables for the virtual network:</p> <pre><code>variable \"vnet_name\" {\n  description = \"The name of the virtual network.\"\n  default     = \"example-network\"\n}\n\nvariable \"vnet_address_space\" {\n  description = \"The address space of the virtual network.\"\n  default     = \"\"\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  default     = \"internal\"\n}\n\nvariable \"subnet_address_prefix\" {\n  description = \"The address prefix of the subnet.\"\n  default     = \"\"\n}\n</code></pre> </li> </ol> Show `variables.spoke.tf` contents <pre><code>variable \"vnet_name\" {\n  description = \"The name of the virtual network.\"\n  default     = \"example-network\"\n}\n\nvariable \"vnet_address_space\" {\n  description = \"The address space of the virtual network.\"\n  default     = \"\"\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  default     = \"internal\"\n}\n\nvariable \"subnet_address_prefix\" {\n  description = \"The address prefix of the subnet.\"\n  default     = \"\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>data.tf</code>.</p> </li> <li> <p>Define the variables for the virtual network:</p> <pre><code>data \"azurerm_virtual_network\" \"hub-vnet\" {\n  name                = \"anoa-eus-hub-core-dev-vnet\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_storage_account\" \"hub-st\" {\n  name                = \"anoaeus8173b4d424devst\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_firewall\" \"hub-fw\" {\n  name                = \"anoa-eus-hub-core-dev-fw\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_log_analytics_workspace\" \"hub-logws\" {\n  name                = \"anoa-eus-ops-mgt-logging-dev-log\"\n  resource_group_name = \"anoa-eus-ops-mgt-logging-dev-rg\"\n}\n</code></pre> </li> </ol> Show `data.tf` contents <pre><code>data \"azurerm_virtual_network\" \"hub-vnet\" {\n  name                = \"anoa-eus-hub-core-dev-vnet\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_storage_account\" \"hub-st\" {\n  name                = \"anoaeus8173b4d424devst\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_firewall\" \"hub-fw\" {\n  name                = \"anoa-eus-hub-core-dev-fw\"\n  resource_group_name = \"anoa-eus-hub-core-dev-rg\"\n}\n\ndata \"azurerm_log_analytics_workspace\" \"hub-logws\" {\n  name                = \"anoa-eus-ops-mgt-logging-dev-log\"\n  resource_group_name = \"anoa-eus-ops-mgt-logging-dev-rg\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>modules.spoke.tf</code>.</p> </li> <li> <p>Create a vnet and subnet in the resource group:</p> <pre><code>module \"mod_vnet_spoke\" {\n  source  = \"azurenoops/overlays-workload-spoke/azurerm\"\n  version = \"~&gt; 1.0.0\"\n\n  # By default, this module will create a resource group, provide the name here\n  # To use an existing resource group, specify the existing resource group name, \n  # and set the argument to `create_resource_group = false`. Location will be same as existing RG.\n  create_spoke_resource_group = true\n  location                    = var.default_location\n  deploy_environment          = var.deploy_environment\n  org_name                    = var.org_name\n  environment                 = var.environment\n  workload_name               = var.id_name\n\n  # Collect Hub Virtual Network Parameters\n  # Hub network details to create peering and other setup\n  hub_virtual_network_name        = data.azurerm_virtual_network.hub-vnet.name\n  hub_firewall_private_ip_address = data.azurerm_firewall.hub-fw.ip_configuration[0].private_ip_address\n  hub_resource_group_name         = data.azurerm_virtual_network.hub-vnet.resource_group_name\n\n  # To enable traffic analytics, set `enable_traffic_analytics = true` in the module.\n  enable_traffic_analytics = var.enable_traffic_analytics\n\n  # (Required) To enable Azure Monitoring and flow logs\n  # pick the values for log analytics workspace which created by Spoke module\n  # Possible values range between 30 and 730\n  log_analytics_workspace_id           = data.azurerm_log_analytics_workspace.hub-logws.id\n  log_analytics_customer_id            = data.azurerm_log_analytics_workspace.hub-logws.workspace_id\n  log_analytics_logs_retention_in_days = 30\n\n  # Provide valid VNet Address space for spoke virtual network.    \n  virtual_network_address_space = var.id_vnet_address_space # (Required)  Spoke Virtual Network Parameters\n\n  # (Required) Multiple Subnets, Service delegation, Service Endpoints, Network security groups\n  # These are default subnets with required configuration, check README.md for more details\n  # Route_table and NSG association to be added automatically for all subnets listed here.\n  # subnet name will be set as per Azure naming convention by default. expected value here is: &lt;App or project name&gt;\n  spoke_subnets = var.id_subnets\n\n  # By default, forced tunneling is enabled for the spoke.\n  # If you do not want to enable forced tunneling on the spoke route table, \n  # set `enable_forced_tunneling = false`.\n  enable_forced_tunneling_on_route_table = var.enable_forced_tunneling_on_id_route_table\n\n  # Private DNS Zone Settings\n  # If you do want to create additional Private DNS Zones, \n  # add in the list of private_dns_zones to be created.\n  # else, remove the private_dns_zones argument.\n  private_dns_zones = var.id_private_dns_zones\n\n  # By default, this will apply resource locks to all resources created by this module.\n  # To disable resource locks, set the argument to `enable_resource_locks = false`.\n  enable_resource_locks = var.enable_resource_locks\n\n  # Tags\n  add_tags = local.tags # Tags to be applied to all resources to all resources\n}\n</code></pre> </li> </ol> Show `modules.spoke.tf` contents <pre><code>module \"mod_vnet_spoke\" {\n  source  = \"azurenoops/overlays-workload-spoke/azurerm\"\n  version = \"~&gt; 1.0.0\"\n\n  # By default, this module will create a resource group, provide the name here\n  # To use an existing resource group, specify the existing resource group name, \n  # and set the argument to `create_resource_group = false`. Location will be same as existing RG.\n  create_spoke_resource_group = true\n  location                    = var.default_location\n  deploy_environment          = var.deploy_environment\n  org_name                    = var.org_name\n  environment                 = var.environment\n  workload_name               = var.id_name\n\n  # Collect Hub Virtual Network Parameters\n  # Hub network details to create peering and other setup\n  hub_virtual_network_name        = data.azurerm_virtual_network.hub-vnet.name\n  hub_firewall_private_ip_address = data.azurerm_firewall.hub-fw.ip_configuration[0].private_ip_address\n  hub_resource_group_name         = data.azurerm_virtual_network.hub-vnet.resource_group_name\n\n  # To enable traffic analytics, set `enable_traffic_analytics = true` in the module.\n  enable_traffic_analytics = var.enable_traffic_analytics\n\n  # (Required) To enable Azure Monitoring and flow logs\n  # pick the values for log analytics workspace which created by Spoke module\n  # Possible values range between 30 and 730\n  log_analytics_workspace_id           = data.azurerm_log_analytics_workspace.hub-logws.id\n  log_analytics_customer_id            = data.azurerm_log_analytics_workspace.hub-logws.workspace_id\n  log_analytics_logs_retention_in_days = 30\n\n  # Provide valid VNet Address space for spoke virtual network.    \n  virtual_network_address_space = var.id_vnet_address_space # (Required)  Spoke Virtual Network Parameters\n\n  # (Required) Multiple Subnets, Service delegation, Service Endpoints, Network security groups\n  # These are default subnets with required configuration, check README.md for more details\n  # Route_table and NSG association to be added automatically for all subnets listed here.\n  # subnet name will be set as per Azure naming convention by default. expected value here is: &lt;App or project name&gt;\n  spoke_subnets = var.id_subnets\n\n  # By default, forced tunneling is enabled for the spoke.\n  # If you do not want to enable forced tunneling on the spoke route table, \n  # set `enable_forced_tunneling = false`.\n  enable_forced_tunneling_on_route_table = var.enable_forced_tunneling_on_id_route_table\n\n  # Private DNS Zone Settings\n  # If you do want to create additional Private DNS Zones, \n  # add in the list of private_dns_zones to be created.\n  # else, remove the private_dns_zones argument.\n  private_dns_zones = var.id_private_dns_zones\n\n  # By default, this will apply resource locks to all resources created by this module.\n  # To disable resource locks, set the argument to `enable_resource_locks = false`.\n  enable_resource_locks = var.enable_resource_locks\n\n  # Tags\n  add_tags = local.tags # Tags to be applied to all resources to all resources\n}\n</code></pre> <ol> <li> <p>Create a file <code>modules.storage.account.tf</code>.</p> </li> <li> <p>Create an Azure Storage account with a container and network rules in Azure NoOps:</p> <pre><code>module \"mod_storage_account\" \"example\" {\n  source=\"azurenoops/terraform-azurerm-overlays-storage-account/azurerm\"\n  version=\"0.1.0\"\n\n  # Resource Group, location, VNet and Subnet details\n  create_storage_resource_group = true\n  location                      = var.location\n  deploy_environment            = var.deploy_environment\n  org_name                      = var.org_name\n  environment                   = var.environment\n  workload_name                 = var.workload_name\n\n  # Storage Account details\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n\n  # Storage Container details\n  containers = [ \n    {\n      name = \"container1\"\n      public_access = \"private\"\n    },\n    {\n      name = \"container2\"\n      public_access = \"private\"\n    }\n  ]\n\n  # Network rules \n  network_rules = {\n    default_firewall_action = \"Deny\"\n    bypass = \"AzureServices\"\n    subnet_ids = [azurerm_subnet.example.id]\n  }\n\n  # To enable advanced threat protection set argument to `true`\n  enable_advanced_threat_protection = true\n\n  # Enable private endpoint for storage account (Optional)\n  enable_blob_private_endpoint  = true\n  virtual_network_name         = azurerm_virtual_network.example.name\n  existing_private_subnet_name = azurerm_subnet.example.name\n\n  # Locks\n  enable_resource_locks = false      \n}\n</code></pre> </li> </ol> Show `modules.storage.account.tf` contents <pre><code>module \"mod_storage_account\" \"example\" {\n  source=\"azurenoops/terraform-azurerm-overlays-storage-account/azurerm\"\n  version=\"0.1.0\"\n\n  # Resource Group, location, VNet and Subnet details\n  create_storage_resource_group = true\n  location                      = var.location\n  deploy_environment            = var.deploy_environment\n  org_name                      = var.org_name\n  environment                   = var.environment\n  workload_name                 = var.workload_name\n\n  # Storage Account details\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n\n  # Storage Container details\n  containers = [ \n    {\n      name = \"container1\"\n      public_access = \"private\"\n    },\n    {\n      name = \"container2\"\n      public_access = \"private\"\n    }\n  ]\n\n  # Network rules \n  network_rules = {\n    default_firewall_action = \"Deny\"\n    bypass = \"AzureServices\"\n    subnet_ids = [azurerm_subnet.example.id]\n  }\n\n  # To enable advanced threat protection set argument to `true`\n  enable_advanced_threat_protection = true\n\n  # Enable private endpoint for storage account (Optional)\n  enable_blob_private_endpoint  = true\n  virtual_network_name         = azurerm_virtual_network.example.name\n  existing_private_subnet_name = azurerm_subnet.example.name\n\n  # Locks\n  enable_resource_locks = false\n}\n</code></pre> <ol> <li> <p>Create a file <code>resources.storage.account.cmk.tf</code>.</p> </li> <li> <p>Create a customer managed key for the storage account:</p> <pre><code>resource \"azurerm_storage_account_customer_managed_key\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id\n  key_vault_key_id   = azurerm_key_vault_key.example.id\n}\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                = \"example-kv\"\n  resource_group_name = data.azurerm_resource_group.example.name\n  location            = data.azurerm_resource_group.example.location\n  sku_name            = \"standard\"\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n}\n\nresource \"azurerm_key_vault_key\" \"example\" {\n  name         = \"example-key\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n}\n\nresource \"azurerm_key_vault_access_policy\" \"example\" {\n  key_vault_id = azurerm_key_vault.example.id\n  tenant_id    = data.azurerm_client_config.current.tenant_id\n\n  certificate_permissions = [\"get\", \"list\"]\n  key_permissions         = [\"get\", \"list\"]\n  secret_permissions      = [\"get\", \"list\"]\n  storage_permissions     = [\"get\", \"list\"]\n}\n</code></pre> <p>Show <code>resources.storage.account.cmk.tf</code> contents <pre><code>resource \"azurerm_storage_account_customer_managed_key\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id\n  key_vault_key_id   = azurerm_key_vault_key.example.id\n}\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                = \"example-kv\"\n  resource_group_name = data.azurerm_resource_group.example.name\n  location            = data.azurerm_resource_group.example.location\n  sku_name            = \"standard\"\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n}\n\nresource \"azurerm_key_vault_key\" \"example\" {\n  name         = \"example-key\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n}\n\nresource \"azurerm_key_vault_access_policy\" \"example\" {\n  key_vault_id = azurerm_key_vault.example.id\n  tenant_id    = data.azurerm_client_config.current.tenant_id\n\n  certificate_permissions = [\"get\", \"list\"]\n  key_permissions         = [\"get\", \"list\"]\n  secret_permissions      = [\"get\", \"list\"]\n  storage_permissions     = [\"get\", \"list\"]\n}\n</code></pre> <li> <p>Initialize your Terraform configuration to install all required provider plugins:</p> <pre><code>terraform init\n</code></pre> <p>Two files will be automatically created:</p> Name Description <code>.terraform</code> A directory containing installed provider plugins <code>.terraform.lock.hcl</code> A file containing a record of installed provider plugins </li> <li> <p>Validate your Terraform configuration to check for errors such as non-existent references:</p> <pre><code>terraform validate\n</code></pre> </li> <li> <p>Generate an execution plan and store it in a file <code>tfplan</code>:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>A single file will be automatically created:</p> Name Description <code>tfplan</code> A file containing the generated execution plan <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be created\n  + resource \"azurerm_storage_account\" \"example\" {\n      + access_tier                       = (known after apply)\n      + account_kind                      = \"StorageV2\"\n      + account_replication_type          = \"LRS\"\n      + account_tier                      = \"Standard\"\n      + allow_nested_items_to_be_public   = true\n      + cross_tenant_replication_enabled  = true\n      + default_to_oauth_authentication   = false\n      + enable_https_traffic_only         = true\n      + id                                = (known after apply)\n      + infrastructure_encryption_enabled = false\n      + is_hns_enabled                    = false\n      + large_file_share_enabled          = (known after apply)\n      + location                          = \"northeurope\"\n      + min_tls_version                   = \"TLS1_2\"\n      + name                              = (known after apply)\n      + nfsv3_enabled                     = false\n      + primary_access_key                = (sensitive value)\n      + primary_blob_connection_string    = (sensitive value)\n      + primary_blob_endpoint             = (known after apply)\n      + primary_blob_host                 = (known after apply)\n      + primary_connection_string         = (sensitive value)\n      + primary_dfs_endpoint              = (known after apply)\n      + primary_dfs_host                  = (known after apply)\n      + primary_file_endpoint             = (known after apply)\n      + primary_file_host                 = (known after apply)\n      + primary_location                  = (known after apply)\n      + primary_queue_endpoint            = (known after apply)\n      + primary_queue_host                = (known after apply)\n      + primary_table_endpoint            = (known after apply)\n      + primary_table_host                = (known after apply)\n      + primary_web_endpoint              = (known after apply)\n      + primary_web_host                  = (known after apply)\n      + public_network_access_enabled     = true\n      + queue_encryption_key_type         = \"Service\"\n      + resource_group_name               = \"example-rg\"\n      + secondary_access_key              = (sensitive value)\n      + secondary_blob_connection_string  = (sensitive value)\n      + secondary_blob_endpoint           = (known after apply)\n      + secondary_blob_host               = (known after apply)\n      + secondary_connection_string       = (sensitive value)\n      + secondary_dfs_endpoint            = (known after apply)\n      + secondary_dfs_host                = (known after apply)\n      + secondary_file_endpoint           = (known after apply)\n      + secondary_file_host               = (known after apply)\n      + secondary_location                = (known after apply)\n      + secondary_queue_endpoint          = (known after apply)\n      + secondary_queue_host              = (known after apply)\n      + secondary_table_endpoint          = (known after apply)\n      + secondary_table_host              = (known after apply)\n      + secondary_web_endpoint            = (known after apply)\n      + secondary_web_host                = (known after apply)\n      + sftp_enabled                      = false\n      + shared_access_key_enabled         = true\n      + table_encryption_key_type         = \"Service\"\n    }\n\n  # random_id.suffix will be created\n  + resource \"random_id\" \"suffix\" {\n      + b64_std     = (known after apply)\n      + b64_url     = (known after apply)\n      + byte_length = 8\n      + dec         = (known after apply)\n      + hex         = (known after apply)\n      + id          = (known after apply)\n    }\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> <p>This will create the resources shown in the execution plan.</p> <p>A single file will be automatically created:</p> Name Description <code>terraform.tfstate</code> A file containing the last known configuration (state) of your infrastructure <p>Feel free to have a quick look at the state file. Notice how the state file keeps track of the configuration of all read data sources and created resources. You must never modify the state file manually; all changes should go through Terraform.</p> </li> <li> <p>Verify that the Storage account has been created in the resource group:</p> <pre><code>$ az resource list -g example-rg -o table\nName               ResourceGroup    Location     Type                               Status\n-----------------  ---------------  -----------  ---------------------------------  --------\nexamplestd64f295a  example-rg       northeurope  Microsoft.Storage/storageAccounts\n</code></pre> <p>It might take a few minutes before the Storage account appears in the output.</p> </li> <p>Congrats, you've created your first resource using Terraform!</p> <p>As mentioned earlier, Terraform not only allows you to create new resources, but to effectively manage its entire lifecycle.</p> <p>Next, we'll make an update to the Storage account configuration, before we tear it all down again!</p>"},{"location":"basics/noops/destroy-resources/","title":"Destroy resources","text":"<ol> <li> <p>Remove all data sources and resources from your code, so that only the provider configuration remains:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be destroyed\n  # (because azurerm_storage_account.example is not in configuration)\n  - resource \"azurerm_storage_account\" \"example\" {\n      - access_tier                       = \"Hot\" -&gt; null\n      - account_kind                      = \"StorageV2\" -&gt; null\n      - account_replication_type          = \"GRS\" -&gt; null\n      - account_tier                      = \"Standard\" -&gt; null\n      - allow_nested_items_to_be_public   = true -&gt; null\n      - cross_tenant_replication_enabled  = true -&gt; null\n      - default_to_oauth_authentication   = false -&gt; null\n      - enable_https_traffic_only         = true -&gt; null\n      - id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\" -&gt; null\n      - infrastructure_encryption_enabled = false -&gt; null\n      - is_hns_enabled                    = false -&gt; null\n      - location                          = \"northeurope\" -&gt; null\n      - min_tls_version                   = \"TLS1_2\" -&gt; null\n      - name                              = \"examplestd64f295a\" -&gt; null\n      - nfsv3_enabled                     = false -&gt; null\n      - primary_access_key                = (sensitive value) -&gt; null\n      - primary_blob_connection_string    = (sensitive value) -&gt; null\n      - primary_blob_endpoint             = \"https://examplestd64f295a.blob.core.windows.net/\" -&gt; null\n      - primary_blob_host                 = \"examplestd64f295a.blob.core.windows.net\" -&gt; null\n      - primary_connection_string         = (sensitive value) -&gt; null\n      - primary_dfs_endpoint              = \"https://examplestd64f295a.dfs.core.windows.net/\" -&gt; null\n      - primary_dfs_host                  = \"examplestd64f295a.dfs.core.windows.net\" -&gt; null\n      - primary_file_endpoint             = \"https://examplestd64f295a.file.core.windows.net/\" -&gt; null\n      - primary_file_host                 = \"examplestd64f295a.file.core.windows.net\" -&gt; null\n      - primary_location                  = \"northeurope\" -&gt; null\n      - primary_queue_endpoint            = \"https://examplestd64f295a.queue.core.windows.net/\" -&gt; null\n      - primary_queue_host                = \"examplestd64f295a.queue.core.windows.net\" -&gt; null\n      - primary_table_endpoint            = \"https://examplestd64f295a.table.core.windows.net/\" -&gt; null\n      - primary_table_host                = \"examplestd64f295a.table.core.windows.net\" -&gt; null\n      - primary_web_endpoint              = \"https://examplestd64f295a.z16.web.core.windows.net/\" -&gt; null\n      - primary_web_host                  = \"examplestd64f295a.z16.web.core.windows.net\" -&gt; null\n      - public_network_access_enabled     = true -&gt; null\n      - queue_encryption_key_type         = \"Service\" -&gt; null\n      - resource_group_name               = \"example-rg\" -&gt; null\n      - secondary_access_key              = (sensitive value) -&gt; null\n      - secondary_connection_string       = (sensitive value) -&gt; null\n      - sftp_enabled                      = false -&gt; null\n      - shared_access_key_enabled         = true -&gt; null\n      - table_encryption_key_type         = \"Service\" -&gt; null\n      - tags                              = {} -&gt; null\n\n      - blob_properties {\n          - change_feed_enabled           = false -&gt; null\n          - change_feed_retention_in_days = 0 -&gt; null\n          - last_access_time_enabled      = false -&gt; null\n          - versioning_enabled            = false -&gt; null\n        }\n\n      - network_rules {\n          - bypass                     = [\n              - \"AzureServices\",\n            ] -&gt; null\n          - default_action             = \"Allow\" -&gt; null\n          - ip_rules                   = [] -&gt; null\n          - virtual_network_subnet_ids = [] -&gt; null\n        }\n\n      - queue_properties {\n          - hour_metrics {\n              - enabled               = true -&gt; null\n              - include_apis          = true -&gt; null\n              - retention_policy_days = 7 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n          - logging {\n              - delete                = false -&gt; null\n              - read                  = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n              - write                 = false -&gt; null\n            }\n          - minute_metrics {\n              - enabled               = false -&gt; null\n              - include_apis          = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n        }\n\n      - share_properties {\n          - retention_policy {\n              - days = 7 -&gt; null\n            }\n        }\n    }\n\n  # random_id.suffix will be destroyed\n  # (because random_id.suffix is not in configuration)\n  - resource \"random_id\" \"suffix\" {\n      - b64_std     = \"1k8pWg==\" -&gt; null\n      - b64_url     = \"1k8pWg\" -&gt; null\n      - byte_length = 4 -&gt; null\n      - dec         = \"3595512154\" -&gt; null\n      - hex         = \"d64f295a\" -&gt; null\n      - id          = \"1k8pWg\" -&gt; null\n    }\n\nPlan: 0 to add, 0 to change, 2 to destroy.\n</code></pre> <p>Note how the plan wants to destroy the previously created resources. This is because those resources no longer exist in your code. If resources have been removed from your code, they should also be removed from Azure.</p> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the resource group is empty again:</p> <pre><code>az resource list -g example-rg -o table\n</code></pre> <p>If nothing is returned, then the resource group is empty, meaning that the Storage account has been destroyed.</p> </li> <p>Congrats, you've managed the full lifecycle of an Azure Storage account using Terraform!</p>"},{"location":"basics/noops/prerequisites/","title":"Prerequisites","text":""},{"location":"basics/noops/prerequisites/#install-tools","title":"Install tools","text":"<ul> <li>Install Terraform</li> <li>Install Azure CLI</li> <li>If you're using VS Code, install the Terraform Extension for VS Code</li> </ul>"},{"location":"basics/noops/prerequisites/#create-resource-group-in-azure","title":"Create resource group in Azure","text":"<p>Using the Azure CLI, create a resource group in Azure to contain the resources created during this tutorial:</p> <ol> <li> <p>Login to Azure:</p> <pre><code>az login\n</code></pre> </li> <li> <p>Set active subscription:</p> <pre><code>az account set -s &lt;SUBSCRIPTION_NAME_OR_ID&gt;\n</code></pre> </li> </ol> <p>Now we're ready to start learning about AZure NoOps, starting with the basic syntax.</p>"},{"location":"basics/noops/summary/","title":"Summary","text":"<p>You should now be familiar with:</p> <ul> <li>Basic Terraform syntax.</li> <li>Writing a simple Terraform configuration.</li> <li>Installing required provider plugins using the <code>terraform init</code> command.</li> <li>Validating your Terraform configuration using the <code>terraform validate</code> command.</li> <li>Generating an execution plan using the <code>terraform plan</code> command.</li> <li>Running the execution plan using the <code>terraform apply</code> command.</li> </ul>"},{"location":"basics/noops/syntax/","title":"Syntax","text":"<p>A Terraform configuration consists of one or more <code>.tf</code> files, which are built around blocks, labels and arguments:</p> <pre><code>&lt;block&gt; \"&lt;label&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>In this tutorial, you'll get familiar with the three most common block types in Terraform:</p> <ol> <li>Provider blocks</li> <li>Resource blocks</li> <li>Data blocks</li> </ol>"},{"location":"basics/noops/syntax/#blocks","title":"Blocks","text":""},{"location":"basics/noops/syntax/#provider-blocks","title":"Provider blocks","text":"<p>Terraform is a cloud agnostic infrastructure as code tool, which means that it can be used across various different cloud providers (AWS, GCP and Azure among others).</p> <p>To work with a given cloud provider, Terraform needs to install a plugin for that provider. Plugins are available in the Terraform Registry.</p> <p>Use provider blocks to configure provider plugins:</p> <pre><code>provider \"&lt;provider&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example, to configure the Azure provider plugin:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre>"},{"location":"basics/noops/syntax/#module-blocks","title":"Module blocks","text":"<p>Use module blocks to create new Azure NoOps resources:</p> <pre><code>module \"mod_&lt;module&gt;\" \"&lt;name&gt;\" {\n  source=\"&lt;module&gt;\"\n  version=\"&lt;version&gt;\"\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>module \"mod_storage_account\" \"example\" {\n  source=\"azurenoops/terraform-azurerm-overlays-storage-account/azurerm\"\n  version=\"0.1.0\"\n  name                     = \"examplest\"  \n  location                 = \"northeurope\"\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre>"},{"location":"basics/noops/syntax/#data-blocks","title":"Data blocks","text":"<p>Use data blocks to read an existing resource:</p> <pre><code>data \"&lt;provider&gt;_&lt;resource&gt;\" \"&lt;name&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre>"},{"location":"basics/noops/syntax/#references","title":"References","text":"<p>Blocks can reference arguments and attributes from other blocks.</p> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n\nmodule \"mod_storage_account\" \"example\" {\n  source=\"azurenoops/terraform-azurerm-overlays-storage-account/azurerm\"\n  version=\"0.1.0\"\n\n  existing_resource_group_name   = data.azurerm_resource_group.example.name\n  location                       = data.azurerm_resource_group.example.location\n  account_tier                   = \"Standard\"\n  account_replication_type       = \"LRS\"\n}\n</code></pre> <p>Now that we're familiar with the Terraform block types and references, let's start creating some resources!</p>"},{"location":"basics/noops/update-resources/","title":"Update resources","text":"<p>Next, we'll update the replication type of the Storage account:</p> <ol> <li> <p>Check Storage account SKU name:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_LRS\n</code></pre> </li> <li> <p>In your Terraform configuration, change the replication type of the Storage account from <code>LRS</code> to <code>GRS</code>:</p> <pre><code>resource \"azurerm_storage_account\" \"example\" {\n  # omitted\n  account_replication_type = \"GRS\" # LRS =&gt; GRS\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be updated in-place\n  ~ resource \"azurerm_storage_account\" \"example\" {\n      ~ account_replication_type          = \"LRS\" -&gt; \"GRS\"\n        id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\"\n        name                              = \"examplestd64f295a\"\n        tags                              = {}\n        # (36 unchanged attributes hidden)\n\n        # (4 unchanged blocks hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan to apply the changes:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the Storage account SKU name has been changed from <code>Standard_LRS</code> to <code>Standard_GRS</code>:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_GRS\n</code></pre> </li> <p>You've just made an update to the Storage account through Terraform!</p> <p>Since we're nearing the end of this tutorial, it's time to tear down the Storage account that we've created.</p>"},{"location":"basics/noops/use-case/","title":"Use Case","text":"<p>This is a use case for creating an Azure Storage Account using Azure NoOps. Each solution is meant to show the differences between building in Terraform using AzureRM modules and using Azure NoOps composite modules.</p>"},{"location":"basics/noops/use-case/#problem","title":"Problem","text":"<p>In our project, we are using Terraform to provision and manage our infrastructure in Azure. As part of this process, we need a reliable and scalable storage solution to store the documents. We need a solution that can handle large amounts of data and provide high availability and redundancy. We also need a solution that is secure and durable, and can be easily integrated with our existing infrastructure in Azure. We need a solution that can be easily managed and maintained, and that can grow with our needs over time.</p>"},{"location":"basics/noops/use-case/#solution","title":"Solution","text":"<p>To address this need, we have decided to use an Azure Storage Account. Azure Storage provides a secure and durable storage solution that can handle large amounts of data. With Azure Storage Account, we can store our documents in a highly available and redundant manner.</p>"},{"location":"basics/noops/use-case/#implementation","title":"Implementation","text":"<p>We will use the <code>azurerm_storage_account</code> module to create an Azure Storage Account. This module will allow us to define the configuration of the storage account, including the name, location, and redundancy options. We will also use the <code>azurerm_storage_container</code> module to create a storage container within the storage account. This module will allow us to define the configuration of the storage container, including the name and access control options. Since this is going to be put into a SCCA/Zero Trust environment, we will also use the <code>azurerm_storage_account_network_rules</code> module to define the network rules for the storage account. This module will allow us to define the configuration of the network rules, including the IP addresses and virtual network rules that are allowed to access the storage account. Since this will be in a GovCloud environment, we will also use the <code>azurerm_storage_account_customer_managed_key</code> module to define the customer managed key for the storage account. This module will allow us to define the configuration of the customer managed key, including the key vault and key name.</p> <p>Lastly, we will add a private endpoint to the storage account to ensure that the storage account is only accessible from within the virtual network.</p>"},{"location":"basics/terraform/","title":"Get started","text":"<p>The goal of this section is to get you up and running with Terraform in 60 minutes.</p> <p>It'll cover the basics for everything between installing the required tools, and managing the full lifecycle of a resource in Azure.</p>"},{"location":"basics/terraform/create-resources/","title":"Create resources","text":"<p>Let's create an Azure Storage account using Terraform:</p> <ol> <li> <p>Open Visual Studio Code.</p> </li> <li> <p>Create a file <code>versions.tf</code>.</p> </li> <li> <p>Configure the Azure provider:</p> <pre><code>terraform {\n  required_version = \"&gt;= 1.3\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.36\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> </ol> Show `versions.tf` contents <pre><code>terraform {\n  required_version = \"&gt;= 1.3\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.36\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n</code></pre> <ol> <li> <p>Create a file <code>data.tf</code>.</p> </li> <li> <p>Read the Azure resource group you created into Terraform by using a data source:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre> </li> </ol> Show `data.tf` contents <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.global.tf</code>.</p> </li> <li> <p>Define the global variables:</p> <pre><code>variable \"deploy_environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"dev\"\n}\n\nvariable \"org_name\" {\n  description = \"The name of the organization.\"\n  default = \"anoa\"\n}\n\nvariable \"environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"public\"\n}\n\nvariable \"workload_name\" {\n  description = \"The name of the workload.\"\n  default = \"storage\"\n}\n\nvariable \"location\" {\n  description = \"The location/region where the resources will be created.\"\n  default     = \"northeurope\"\n}\n</code></pre> </li> </ol> Show `variables.global.tf` contents <pre><code>variable \"deploy_environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"dev\"\n}\n\nvariable \"org_name\" {\n  description = \"The name of the organization.\"\n  default = \"anoa\"\n}\n\nvariable \"environment\" {\n  description = \"The environment in which the resources will be created.\"\n  default = \"public\"\n}\n\nvariable \"workload_name\" {\n  description = \"The name of the workload.\"\n  default = \"storage\"\n}\n\nvariable \"location\" {\n  description = \"The location/region where the resources will be created.\"\n  default     = \"northeurope\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.storage.account.tf</code>.</p> </li> <li> <p>Define the variables for the storage account:</p> <pre><code>variable \"storage_account_name\" {\n  description = \"The name of the storage account.\"\n  default     = \"examplest\"\n}\n\nvariable \"storage_account_tier\" {\n  description = \"The storage account tier.\"\n  default     = \"Standard\"\n}\n\nvariable \"storage_account_replication_type\" {\n  description = \"The storage account replication type.\"\n  default     = \"LRS\"\n}\n\nvariable \"storage_account_location\" {\n  description = \"The location of the storage account.\"\n  default     = \"northeurope\"\n}\n\nvariable \"storage_account_container_name\" {\n  description = \"The name of the storage account container.\"\n  default     = \"example-container\"\n}\n</code></pre> </li> </ol> Show `variables.storage.account.tf` contents <pre><code>variable \"storage_account_name\" {\n  description = \"The name of the storage account.\"\n  default     = \"examplest\"\n}\n\nvariable \"storage_account_tier\" {\n  description = \"The storage account tier.\"\n  default     = \"Standard\"\n}\n\nvariable \"storage_account_replication_type\" {\n  description = \"The storage account replication type.\"\n  default     = \"LRS\"\n}\n\nvariable \"storage_account_location\" {\n  description = \"The location of the storage account.\"\n  default     = \"northeurope\"\n}\n\nvariable \"storage_account_container_name\" {\n  description = \"The name of the storage account container.\"\n  default     = \"example-container\"\n}\n</code></pre> <ol> <li> <p>Create a file <code>variables.virtual.network.tf</code>.</p> </li> <li> <p>Define the variables for the virtual network:</p> <pre><code>variable \"vnet_name\" {\n  description = \"The name of the virtual network.\"\n  default     = \"example-network\"\n}\n\nvariable \"vnet_address_space\" {\n  description = \"The address space of the virtual network.\"\n  default     = [\"10.0.0.1/16\"]\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  default     = \"internal\"\n}\n\nvariable \"subnet_address_prefix\" {\n  description = \"The address prefix of the subnet.\"\n  default     = [\"10.0.1.1/26\"]\n}\n</code></pre> </li> </ol> Show `variables.virtual.network.tf` contents <pre><code>variable \"vnet_name\" {\n  description = \"The name of the virtual network.\"\n  default     = \"example-network\"\n}\n\nvariable \"vnet_address_space\" {\n  description = \"The address space of the virtual network.\"\n  default     = [\"10.0.0.1/16\"]\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  default     = \"internal\"\n}\n\nvariable \"subnet_address_prefix\" {\n  description = \"The address prefix of the subnet.\"\n  default     = [\"10.0.1.1/26\"]\n}\n</code></pre> <ol> <li> <p>Create a file <code>resources.virtual.network.tf</code>.</p> </li> <li> <p>Create a vnet and subnet in the resource group:</p> <pre><code>resource \"azurerm_virtual_network\" \"example\" {\n  name                = var.vnet_name\n  location            = data.azurerm_resource_group.example.location\n  resource_group_name = data.azurerm_resource_group.example.name\n  address_space       = var.vnet_address_space # Replace with your address space\n}\n\nresource \"azurerm_subnet\" \"example\" {\n  name                 = var.subnet_name\n  resource_group_name  = data.azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = var.subnet_address_prefix # Replace with your address prefix\n}\n</code></pre> </li> </ol> Show `resources.virtual.network.tf` contents <pre><code>resource \"azurerm_virtual_network\" \"example\" {\n  name                = var.vnet_name\n  location            = data.azurerm_resource_group.example.location\n  resource_group_name = data.azurerm_resource_group.example.name\n  address_space       = var.vnet_address_space # Replace with your address space\n}\n\nresource \"azurerm_subnet\" \"example\" {\n  name                 = var.subnet_name\n  resource_group_name  = data.azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = var.subnet_address_prefix # Replace with your address prefix\n}\n</code></pre> <ol> <li> <p>Create a file <code>resources.storage.account.tf</code>.</p> </li> <li> <p>Create a random suffix for resource names using the built-in random provider, and an Azure Storage account in the resource group:</p> <pre><code>resource \"random_id\" \"suffix\" {\n  byte_length = 4\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"${var.org_name}-${var.location}-${var.deploy_environment}-${random_id.suffix.hex}-st\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = var.storage_account_tier\n  account_replication_type = var.storage_account_replication_type\n}\n</code></pre> </li> <li> <p>Create a storage container in the storage account:</p> <pre><code>resource \"azurerm_storage_container\" \"example\" {\n  name                  = var.storage_account_container_name\n  storage_account_name  = azurerm_storage_account.example.name\n  container_access_type = \"private\"\n}\n</code></pre> </li> <li> <p>Create network rules for the storage account:</p> <pre><code>resource \"azurerm_storage_account_network_rules\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id\n\n  default_action             = \"Deny\"\n  bypass                     = [\"AzureServices\"]\n  virtual_network_subnet_ids = [azurerm_subnet.example.id]\n}\n</code></pre> </li> </ol> Show `resources.storage.account.tf` contents <pre><code>resource \"random_id\" \"suffix\" {\n  byte_length = 4\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"${var.org_name}-${var.location}-${var.deploy_environment}-${random_id.suffix.hex}-st\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = var.storage_account_tier\n  account_replication_type = var.storage_account_replication_type\n}\n\nresource \"azurerm_storage_container\" \"example\" {\n  name                  = var.storage_account_container_name\n  storage_account_name  = azurerm_storage_account.example.name\n  container_access_type = \"private\"\n}\n\nresource \"azurerm_storage_account_network_rules\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id\n\n  default_action             = \"Deny\"\n  bypass                     = [\"AzureServices\"]\n  virtual_network_subnet_ids = [azurerm_subnet.example.id]\n}\n</code></pre> <ol> <li> <p>Create a file <code>resources.storage.account.pe.tf</code>.</p> </li> <li> <p>Create a private endpoint for the storage account:</p> <pre><code>resource \"azurerm_private_endpoint\" \"example\" {\n  name                = \"example-endpoint\"\n  location            = data.azurerm_resource_group.example.location\n  resource_group_name = data.azurerm_resource_group.example.name\n\n  subnet_id = azurerm_subnet.example.id\n\n  private_service_connection {\n    name                           = \"example-connection\"\n    private_connection_resource_id = azurerm_storage_account.example.id\n    is_manual_connection           = false\n  }\n}\n\nresource \"azurerm_private_dns_zone\" \"example\" {\n  name                = \"privatelink.blob.core.windows.net\"\n  resource_group_name = data.azurerm_resource_group.example.name\n}\n\nresource \"azurerm_private_dns_a_record\" \"example\" {\n  name                = \"example-a-record\"\n  zone_name           = azurerm_private_dns_zone.example.name\n  resource_group_name = data.azurerm_resource_group.example.name\n  ttl                 = 300\n  records             = [azurerm_private_endpoint.example.private_ip_address]\n}\n</code></pre> </li> </ol> Show `resources.storage.account.pe.tf` contents <pre><code>resource \"azurerm_private_endpoint\" \"example\" {\n  name                = \"example-endpoint\"\n  location            = data.azurerm_resource_group.example.location\n  resource_group_name = data.azurerm_resource_group.example.name\n\n  subnet_id = azurerm_subnet.example.id\n\n  private_service_connection {\n    name                           = \"example-connection\"\n    private_connection_resource_id = azurerm_storage_account.example.id\n    is_manual_connection           = false\n  }\n}\n\nresource \"azurerm_private_dns_zone\" \"example\" {\n  name                = \"privatelink.blob.core.windows.net\"\n  resource_group_name = data.azurerm_resource_group.example.name\n}\n\nresource \"azurerm_private_dns_a_record\" \"example\" {\n  name                = \"example-a-record\"\n  zone_name           = azurerm_private_dns_zone.example.name\n  resource_group_name = data.azurerm_resource_group.example.name\n  ttl                 = 300\n  records             = [azurerm_private_endpoint.example.private_ip_address]\n}\n</code></pre> <ol> <li> <p>Create a file <code>resources.storage.account.cmk.tf</code>.</p> </li> <li> <p>Create a customer managed key for the storage account:</p> <pre><code>resource \"azurerm_storage_account_customer_managed_key\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id  \n  key_vault_id       = azurerm_key_vault.example.id\n  key_name           = azurerm_key_vault_key.example.name\n}\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                = \"example-kv\"\n  resource_group_name = data.azurerm_resource_group.example.name\n  location            = data.azurerm_resource_group.example.location\n  sku_name            = \"standard\"\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n}\n\nresource \"azurerm_key_vault_key\" \"example\" {\n  name         = \"example-key\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_opts     = [\"decrypt\", \"encrypt\", \"sign\", \"unwrapKey\", \"verify\", \"wrapKey\"]\n  key_type     = \"RSA\"\n  key_size     = 2048\n}\n\nresource \"azurerm_key_vault_access_policy\" \"example\" {\n  key_vault_id = azurerm_key_vault.example.id\n  tenant_id    = data.azurerm_client_config.current.tenant_id\n  object_id    = data.azurerm_client_config.current.object_id\n\n  certificate_permissions = [\"get\", \"list\"]\n  key_permissions         = [\"get\", \"list\"]\n  secret_permissions      = [\"get\", \"list\"]\n  storage_permissions     = [\"get\", \"list\"]\n}\n</code></pre> <p>Show <code>resources.storage.account.cmk.tf</code> contents <pre><code>resource \"azurerm_storage_account_customer_managed_key\" \"example\" {\n  storage_account_id = azurerm_storage_account.example.id  \n  key_vault_id       = azurerm_key_vault.example.id\n  key_name           = azurerm_key_vault_key.example.name\n}\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                = \"example-kv\"\n  resource_group_name = data.azurerm_resource_group.example.name\n  location            = data.azurerm_resource_group.example.location\n  sku_name            = \"standard\"\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n}\n\nresource \"azurerm_key_vault_key\" \"example\" {\n  name         = \"example-key\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_opts     = [\"decrypt\", \"encrypt\", \"sign\", \"unwrapKey\", \"verify\", \"wrapKey\"]\n  key_type     = \"RSA\"\n  key_size     = 2048\n}\n\nresource \"azurerm_key_vault_access_policy\" \"example\" {\n  key_vault_id = azurerm_key_vault.example.id\n  tenant_id    = data.azurerm_client_config.current.tenant_id\n  object_id    = data.azurerm_client_config.current.object_id\n\n  certificate_permissions = [\"get\", \"list\"]\n  key_permissions         = [\"get\", \"list\"]\n  secret_permissions      = [\"get\", \"list\"]\n  storage_permissions     = [\"get\", \"list\"]\n}\n</code></pre> <li> <p>Initialize your Terraform configuration to install all required provider plugins:</p> <pre><code>terraform init\n</code></pre> <p>Two files will be automatically created:</p> Name Description <code>.terraform</code> A directory containing installed provider plugins <code>.terraform.lock.hcl</code> A file containing a record of installed provider plugins </li> <li> <p>Validate your Terraform configuration to check for errors such as non-existent references:</p> <pre><code>terraform validate\n</code></pre> </li> <li> <p>Generate an execution plan and store it in a file <code>tfplan</code>:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>A single file will be automatically created:</p> Name Description <code>tfplan</code> A file containing the generated execution plan <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # azurerm_key_vault.example will be created\n  + resource \"azurerm_key_vault\" \"example\" {\n      + access_policy                 = (known after apply)\n      + id                            = (known after apply)\n      + location                      = \"eastus\"\n      + name                          = \"example-kv\"\n      + public_network_access_enabled = true\n      + resource_group_name           = \"example-rg\"\n      + sku_name                      = \"premium\"\n      + soft_delete_retention_days    = 90\n      + tenant_id                     = \"ecc11461-8e07-4a0d-a244-3e7db5ccc4d6\"\n      + vault_uri                     = (known after apply)\n    }\n\n  # azurerm_key_vault_access_policy.example will be created\n  + resource \"azurerm_key_vault_access_policy\" \"example\" {\n      + id                 = (known after apply)\n      + key_permissions    = [\n          + \"Create\",\n          + \"Delete\",\n          + \"Get\",\n          + \"Purge\",\n          + \"Recover\",\n          + \"Update\",\n          + \"GetRotationPolicy\",\n          + \"SetRotationPolicy\",\n        ]\n      + key_vault_id       = (known after apply)\n      + object_id          = \"6a60538e-0c82-4ed2-8aa0-1f158323cd87\"\n      + secret_permissions = [\n          + \"Set\",\n        ]\n      + tenant_id          = \"ecc11461-8e07-4a0d-a244-3e7db5ccc4d6\"\n    }\n\n  # azurerm_key_vault_key.example will be created\n  + resource \"azurerm_key_vault_key\" \"example\" {\n      + curve                   = (known after apply)\n      + e                       = (known after apply)\n      + id                      = (known after apply)\n      + key_opts                = [\n          + \"decrypt\",\n          + \"encrypt\",\n          + \"sign\",\n          + \"unwrapKey\",\n          + \"verify\",\n          + \"wrapKey\",\n        ]\n      + key_size                = 2048\n      + key_type                = \"RSA\"\n      + key_vault_id            = (known after apply)\n      + n                       = (known after apply)\n      + name                    = \"example-key\"\n      + public_key_openssh      = (known after apply)\n      + public_key_pem          = (known after apply)\n      + resource_id             = (known after apply)\n      + resource_versionless_id = (known after apply)\n      + version                 = (known after apply)\n      + versionless_id          = (known after apply)\n      + x                       = (known after apply)\n      + y                       = (known after apply)\n\n      + rotation_policy {\n          + expire_after         = \"P90D\"\n          + notify_before_expiry = \"P29D\"\n\n          + automatic {\n              + time_before_expiry = \"P30D\"\n            }\n        }\n    }\n\n  # azurerm_private_dns_a_record.example will be created\n  + resource \"azurerm_private_dns_a_record\" \"example\" {\n      + fqdn                = (known after apply)\n      + id                  = (known after apply)\n      + name                = \"example-a-record\"\n      + records             = (known after apply)\n      + resource_group_name = \"example-rg\"\n      + ttl                 = 300\n      + zone_name           = \"privatelink.blob.core.windows.net\"\n    }\n\n  # azurerm_private_dns_zone.example will be created\n  + resource \"azurerm_private_dns_zone\" \"example\" {\n      + id                                                    = (known after apply)\n      + max_number_of_record_sets                             = (known after apply)\n      + max_number_of_virtual_network_links                   = (known after apply)\n      + max_number_of_virtual_network_links_with_registration = (known after apply)\n      + name                                                  = \"privatelink.blob.core.windows.net\"\n      + number_of_record_sets                                 = (known after apply)\n      + resource_group_name                                   = \"example-rg\"\n    }\n\n  # azurerm_private_endpoint.example will be created\n  + resource \"azurerm_private_endpoint\" \"example\" {\n      + custom_dns_configs       = (known after apply)\n      + id                       = (known after apply)\n      + location                 = \"eastus\"\n      + name                     = \"example-endpoint\"\n      + network_interface        = (known after apply)\n      + private_dns_zone_configs = (known after apply)\n      + resource_group_name      = \"example-rg\"\n      + subnet_id                = (known after apply)\n\n      + private_service_connection {\n          + is_manual_connection           = false\n          + name                           = \"example-connection\"\n          + private_connection_resource_id = (known after apply)\n          + private_ip_address             = (known after apply)\n        }\n    }\n\n  # azurerm_storage_account.example will be created\n  + resource \"azurerm_storage_account\" \"example\" {\n      + access_tier                        = (known after apply)\n      + account_kind                       = \"StorageV2\"\n      + account_replication_type           = \"LRS\"\n      + account_tier                       = \"Standard\"\n      + allow_nested_items_to_be_public    = true\n      + cross_tenant_replication_enabled   = true\n      + default_to_oauth_authentication    = false\n      + enable_https_traffic_only          = true\n      + id                                 = (known after apply)\n      + infrastructure_encryption_enabled  = false\n      + is_hns_enabled                     = false\n      + large_file_share_enabled           = (known after apply)\n      + local_user_enabled                 = true\n      + location                           = \"eastus\"\n      + min_tls_version                    = \"TLS1_2\"\n      + name                               = (known after apply)\n      + nfsv3_enabled                      = false\n      + primary_access_key                 = (sensitive value)\n      + primary_blob_connection_string     = (sensitive value)\n      + primary_blob_endpoint              = (known after apply)\n      + primary_blob_host                  = (known after apply)\n      + primary_blob_internet_endpoint     = (known after apply)\n      + primary_blob_internet_host         = (known after apply)\n      + primary_blob_microsoft_endpoint    = (known after apply)\n      + primary_blob_microsoft_host        = (known after apply)\n      + primary_connection_string          = (sensitive value)\n      + primary_dfs_endpoint               = (known after apply)\n      + primary_dfs_host                   = (known after apply)\n      + primary_dfs_internet_endpoint      = (known after apply)\n      + primary_dfs_internet_host          = (known after apply)\n      + primary_dfs_microsoft_endpoint     = (known after apply)\n      + primary_dfs_microsoft_host         = (known after apply)\n      + primary_file_endpoint              = (known after apply)\n      + primary_file_host                  = (known after apply)\n      + primary_file_internet_endpoint     = (known after apply)\n      + primary_file_internet_host         = (known after apply)\n      + primary_file_microsoft_endpoint    = (known after apply)\n      + primary_file_microsoft_host        = (known after apply)\n      + primary_location                   = (known after apply)\n      + primary_queue_endpoint             = (known after apply)\n      + primary_queue_host                 = (known after apply)\n      + primary_queue_microsoft_endpoint   = (known after apply)\n      + primary_queue_microsoft_host       = (known after apply)\n      + primary_table_endpoint             = (known after apply)\n      + primary_table_host                 = (known after apply)\n      + primary_table_microsoft_endpoint   = (known after apply)\n      + primary_table_microsoft_host       = (known after apply)\n      + primary_web_endpoint               = (known after apply)\n      + primary_web_host                   = (known after apply)\n      + primary_web_internet_endpoint      = (known after apply)\n      + primary_web_internet_host          = (known after apply)\n      + primary_web_microsoft_endpoint     = (known after apply)\n      + primary_web_microsoft_host         = (known after apply)\n      + public_network_access_enabled      = true\n      + queue_encryption_key_type          = \"Service\"\n      + resource_group_name                = \"example-rg\"\n      + secondary_access_key               = (sensitive value)\n      + secondary_blob_connection_string   = (sensitive value)\n      + secondary_blob_endpoint            = (known after apply)\n      + secondary_blob_host                = (known after apply)\n      + secondary_blob_internet_endpoint   = (known after apply)\n      + secondary_blob_internet_host       = (known after apply)\n      + secondary_blob_microsoft_endpoint  = (known after apply)\n      + secondary_blob_microsoft_host      = (known after apply)\n      + secondary_connection_string        = (sensitive value)\n      + secondary_dfs_endpoint             = (known after apply)\n      + secondary_dfs_host                 = (known after apply)\n      + secondary_dfs_internet_endpoint    = (known after apply)\n      + secondary_dfs_internet_host        = (known after apply)\n      + secondary_dfs_microsoft_endpoint   = (known after apply)\n      + secondary_dfs_microsoft_host       = (known after apply)\n      + secondary_file_endpoint            = (known after apply)\n      + secondary_file_host                = (known after apply)\n      + secondary_file_internet_endpoint   = (known after apply)\n      + secondary_file_internet_host       = (known after apply)\n      + secondary_file_microsoft_endpoint  = (known after apply)\n      + secondary_file_microsoft_host      = (known after apply)\n      + secondary_location                 = (known after apply)\n      + secondary_queue_endpoint           = (known after apply)\n      + secondary_queue_host               = (known after apply)\n      + secondary_queue_microsoft_endpoint = (known after apply)\n      + secondary_queue_microsoft_host     = (known after apply)\n      + secondary_table_endpoint           = (known after apply)\n      + secondary_table_host               = (known after apply)\n      + secondary_table_microsoft_endpoint = (known after apply)\n      + secondary_table_microsoft_host     = (known after apply)\n      + secondary_web_endpoint             = (known after apply)\n      + secondary_web_host                 = (known after apply)\n      + secondary_web_internet_endpoint    = (known after apply)\n      + secondary_web_internet_host        = (known after apply)\n      + secondary_web_microsoft_endpoint   = (known after apply)\n      + secondary_web_microsoft_host       = (known after apply)\n      + sftp_enabled                       = false\n      + shared_access_key_enabled          = true\n      + table_encryption_key_type          = \"Service\"\n    }\n\n  # azurerm_storage_account_customer_managed_key.example will be created\n  + resource \"azurerm_storage_account_customer_managed_key\" \"example\" {\n      + id                 = (known after apply)\n      + key_name           = \"example-key\"\n      + key_vault_id       = (known after apply)\n      + key_vault_uri      = (known after apply)\n      + storage_account_id = (known after apply)\n    }\n\n  # azurerm_storage_account_network_rules.example will be created\n  + resource \"azurerm_storage_account_network_rules\" \"example\" {\n      + bypass                     = [\n          + \"AzureServices\",\n        ]\n      + default_action             = \"Deny\"\n      + id                         = (known after apply)\n      + ip_rules                   = (known after apply)\n      + storage_account_id         = (known after apply)\n      + virtual_network_subnet_ids = (known after apply)\n    }\n\n  # azurerm_storage_container.example will be created\n  + resource \"azurerm_storage_container\" \"example\" {\n      + container_access_type   = \"private\"\n      + has_immutability_policy = (known after apply)\n      + has_legal_hold          = (known after apply)\n      + id                      = (known after apply)\n      + metadata                = (known after apply)\n      + name                    = \"example-container\"\n      + resource_manager_id     = (known after apply)\n      + storage_account_name    = (known after apply)\n    }\n\n  # azurerm_subnet.example will be created\n  + resource \"azurerm_subnet\" \"example\" {\n      + address_prefixes                               = [\n          + \"10.0.1.1/26\",\n        ]\n      + enforce_private_link_endpoint_network_policies = (known after apply)\n      + enforce_private_link_service_network_policies  = (known after apply)\n      + id                                             = (known after apply)\n      + name                                           = \"internal\"\n      + private_endpoint_network_policies_enabled      = (known after apply)\n      + private_link_service_network_policies_enabled  = (known after apply)\n      + resource_group_name                            = \"example-rg\"\n      + virtual_network_name                           = \"example-network\"\n    }\n\n  # azurerm_virtual_network.example will be created\n  + resource \"azurerm_virtual_network\" \"example\" {\n      + address_space       = [\n          + \"10.0.0.1/16\",\n        ]\n      + dns_servers         = (known after apply)\n      + guid                = (known after apply)\n      + id                  = (known after apply)\n      + location            = \"eastus\"\n      + name                = \"example-network\"\n      + resource_group_name = \"example-rg\"\n      + subnet              = (known after apply)\n    }\n\n  # random_id.suffix will be created\n  + resource \"random_id\" \"suffix\" {\n      + b64_std     = (known after apply)\n      + b64_url     = (known after apply)\n      + byte_length = 4\n      + dec         = (known after apply)\n      + hex         = (known after apply)\n      + id          = (known after apply)\n    }\n\nPlan: 13 to add, 0 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> <p>This will create the resources shown in the execution plan.</p> <p>A single file will be automatically created:</p> Name Description <code>terraform.tfstate</code> A file containing the last known configuration (state) of your infrastructure <p>Feel free to have a quick look at the state file. Notice how the state file keeps track of the configuration of all read data sources and created resources. You must never modify the state file manually; all changes should go through Terraform.</p> </li> <li> <p>Verify that the Storage account has been created in the resource group:</p> <pre><code>$ az resource list -g example-rg -o table\nName               ResourceGroup    Location     Type                               Status\n-----------------  ---------------  -----------  ---------------------------------  --------\nexamplestd64f295a  example-rg       northeurope  Microsoft.Storage/storageAccounts\n</code></pre> <p>It might take a few minutes before the Storage account appears in the output.</p> </li> <p>Congrats, you've created your first resource using Terraform!</p> <p>As mentioned earlier, Terraform not only allows you to create new resources, but to effectively manage its entire lifecycle.</p> <p>Next, we'll make an update to the Storage account configuration, before we tear it all down again!</p>"},{"location":"basics/terraform/destroy-resources/","title":"Destroy resources","text":"<ol> <li> <p>Remove all data sources and resources from your code, so that only the provider configuration remains:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be destroyed\n  # (because azurerm_storage_account.example is not in configuration)\n  - resource \"azurerm_storage_account\" \"example\" {\n      - access_tier                       = \"Hot\" -&gt; null\n      - account_kind                      = \"StorageV2\" -&gt; null\n      - account_replication_type          = \"GRS\" -&gt; null\n      - account_tier                      = \"Standard\" -&gt; null\n      - allow_nested_items_to_be_public   = true -&gt; null\n      - cross_tenant_replication_enabled  = true -&gt; null\n      - default_to_oauth_authentication   = false -&gt; null\n      - enable_https_traffic_only         = true -&gt; null\n      - id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\" -&gt; null\n      - infrastructure_encryption_enabled = false -&gt; null\n      - is_hns_enabled                    = false -&gt; null\n      - location                          = \"northeurope\" -&gt; null\n      - min_tls_version                   = \"TLS1_2\" -&gt; null\n      - name                              = \"examplestd64f295a\" -&gt; null\n      - nfsv3_enabled                     = false -&gt; null\n      - primary_access_key                = (sensitive value) -&gt; null\n      - primary_blob_connection_string    = (sensitive value) -&gt; null\n      - primary_blob_endpoint             = \"https://examplestd64f295a.blob.core.windows.net/\" -&gt; null\n      - primary_blob_host                 = \"examplestd64f295a.blob.core.windows.net\" -&gt; null\n      - primary_connection_string         = (sensitive value) -&gt; null\n      - primary_dfs_endpoint              = \"https://examplestd64f295a.dfs.core.windows.net/\" -&gt; null\n      - primary_dfs_host                  = \"examplestd64f295a.dfs.core.windows.net\" -&gt; null\n      - primary_file_endpoint             = \"https://examplestd64f295a.file.core.windows.net/\" -&gt; null\n      - primary_file_host                 = \"examplestd64f295a.file.core.windows.net\" -&gt; null\n      - primary_location                  = \"northeurope\" -&gt; null\n      - primary_queue_endpoint            = \"https://examplestd64f295a.queue.core.windows.net/\" -&gt; null\n      - primary_queue_host                = \"examplestd64f295a.queue.core.windows.net\" -&gt; null\n      - primary_table_endpoint            = \"https://examplestd64f295a.table.core.windows.net/\" -&gt; null\n      - primary_table_host                = \"examplestd64f295a.table.core.windows.net\" -&gt; null\n      - primary_web_endpoint              = \"https://examplestd64f295a.z16.web.core.windows.net/\" -&gt; null\n      - primary_web_host                  = \"examplestd64f295a.z16.web.core.windows.net\" -&gt; null\n      - public_network_access_enabled     = true -&gt; null\n      - queue_encryption_key_type         = \"Service\" -&gt; null\n      - resource_group_name               = \"example-rg\" -&gt; null\n      - secondary_access_key              = (sensitive value) -&gt; null\n      - secondary_connection_string       = (sensitive value) -&gt; null\n      - sftp_enabled                      = false -&gt; null\n      - shared_access_key_enabled         = true -&gt; null\n      - table_encryption_key_type         = \"Service\" -&gt; null\n      - tags                              = {} -&gt; null\n\n      - blob_properties {\n          - change_feed_enabled           = false -&gt; null\n          - change_feed_retention_in_days = 0 -&gt; null\n          - last_access_time_enabled      = false -&gt; null\n          - versioning_enabled            = false -&gt; null\n        }\n\n      - network_rules {\n          - bypass                     = [\n              - \"AzureServices\",\n            ] -&gt; null\n          - default_action             = \"Allow\" -&gt; null\n          - ip_rules                   = [] -&gt; null\n          - virtual_network_subnet_ids = [] -&gt; null\n        }\n\n      - queue_properties {\n          - hour_metrics {\n              - enabled               = true -&gt; null\n              - include_apis          = true -&gt; null\n              - retention_policy_days = 7 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n          - logging {\n              - delete                = false -&gt; null\n              - read                  = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n              - write                 = false -&gt; null\n            }\n          - minute_metrics {\n              - enabled               = false -&gt; null\n              - include_apis          = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n        }\n\n      - share_properties {\n          - retention_policy {\n              - days = 7 -&gt; null\n            }\n        }\n    }\n\n  # random_id.suffix will be destroyed\n  # (because random_id.suffix is not in configuration)\n  - resource \"random_id\" \"suffix\" {\n      - b64_std     = \"1k8pWg==\" -&gt; null\n      - b64_url     = \"1k8pWg\" -&gt; null\n      - byte_length = 4 -&gt; null\n      - dec         = \"3595512154\" -&gt; null\n      - hex         = \"d64f295a\" -&gt; null\n      - id          = \"1k8pWg\" -&gt; null\n    }\n\nPlan: 0 to add, 0 to change, 2 to destroy.\n</code></pre> <p>Note how the plan wants to destroy the previously created resources. This is because those resources no longer exist in your code. If resources have been removed from your code, they should also be removed from Azure.</p> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the resource group is empty again:</p> <pre><code>az resource list -g example-rg -o table\n</code></pre> <p>If nothing is returned, then the resource group is empty, meaning that the Storage account has been destroyed.</p> </li> <p>Congrats, you've managed the full lifecycle of an Azure Storage account using Terraform!</p>"},{"location":"basics/terraform/prerequisites/","title":"Prerequisites","text":""},{"location":"basics/terraform/prerequisites/#install-tools","title":"Install tools","text":"<ul> <li>Install Terraform</li> <li>Install Azure CLI</li> <li>If you're using VS Code, install the Terraform Extension for VS Code</li> </ul>"},{"location":"basics/terraform/prerequisites/#create-resource-group-in-azure","title":"Create resource group in Azure","text":"<p>Using the Azure CLI, create a resource group in Azure to contain the resources created during this tutorial:</p> <ol> <li> <p>Login to Azure:</p> <pre><code>az login\n</code></pre> </li> <li> <p>Set active subscription:</p> <pre><code>az account set -s &lt;SUBSCRIPTION_NAME_OR_ID&gt;\n</code></pre> </li> <li> <p>Create a resource group:</p> <pre><code>$ az group create -n example-rg -l eastus -o table\nLocation     Name\n-----------  ----------\neastus       example-rg\n</code></pre> </li> <li> <p>Clone the repository:</p> <pre><code>$ git clone \n</code></pre> </li> </ol> <p>Now we're ready to start learning about Terraform, starting with the basic syntax.</p>"},{"location":"basics/terraform/summary/","title":"Summary","text":"<p>You should now be familiar with:</p> <ul> <li>Basic Terraform syntax.</li> <li>Writing a simple Terraform configuration.</li> <li>Installing required provider plugins using the <code>terraform init</code> command.</li> <li>Validating your Terraform configuration using the <code>terraform validate</code> command.</li> <li>Generating an execution plan using the <code>terraform plan</code> command.</li> <li>Running the execution plan using the <code>terraform apply</code> command.</li> </ul>"},{"location":"basics/terraform/syntax/","title":"Syntax","text":"<p>A Terraform configuration consists of one or more <code>.tf</code> files, which are built around blocks, labels and arguments:</p> <pre><code>&lt;block&gt; \"&lt;label&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>In this tutorial, you'll get familiar with the three most common block types in Terraform:</p> <ol> <li>Provider blocks</li> <li>Resource blocks</li> <li>Data blocks</li> </ol>"},{"location":"basics/terraform/syntax/#blocks","title":"Blocks","text":""},{"location":"basics/terraform/syntax/#provider-blocks","title":"Provider blocks","text":"<p>Terraform is a cloud agnostic infrastructure as code tool, which means that it can be used across various different cloud providers (AWS, GCP and Azure among others).</p> <p>To work with a given cloud provider, Terraform needs to install a plugin for that provider. Plugins are available in the Terraform Registry.</p> <p>Use provider blocks to configure provider plugins:</p> <pre><code>provider \"&lt;provider&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example, to configure the Azure provider plugin:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre>"},{"location":"basics/terraform/syntax/#resource-blocks","title":"Resource blocks","text":"<p>Use resource blocks to create new resources:</p> <pre><code>resource \"&lt;provider&gt;_&lt;resource&gt;\" \"&lt;name&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest\"\n  resource_group_name      = \"example-rg\"\n  location                 = \"northeurope\"\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre>"},{"location":"basics/terraform/syntax/#data-blocks","title":"Data blocks","text":"<p>Use data blocks to read an existing resource:</p> <pre><code>data \"&lt;provider&gt;_&lt;resource&gt;\" \"&lt;name&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre>"},{"location":"basics/terraform/syntax/#references","title":"References","text":"<p>Blocks can reference arguments and attributes from other blocks.</p> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre> <p>Now that we're familiar with the Terraform block types and references, let's start creating some resources!</p>"},{"location":"basics/terraform/update-resources/","title":"Update resources","text":"<p>Next, we'll update the replication type of the Storage account:</p> <ol> <li> <p>Check Storage account SKU name:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_LRS\n</code></pre> </li> <li> <p>In your Terraform configuration, change the replication type of the Storage account from <code>LRS</code> to <code>GRS</code>:</p> <pre><code>resource \"azurerm_storage_account\" \"example\" {\n  # omitted\n  account_replication_type = \"GRS\" # LRS =&gt; GRS\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be updated in-place\n  ~ resource \"azurerm_storage_account\" \"example\" {\n      ~ account_replication_type          = \"LRS\" -&gt; \"GRS\"\n        id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\"\n        name                              = \"examplestd64f295a\"\n        tags                              = {}\n        # (36 unchanged attributes hidden)\n\n        # (4 unchanged blocks hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan to apply the changes:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the Storage account SKU name has been changed from <code>Standard_LRS</code> to <code>Standard_GRS</code>:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_GRS\n</code></pre> </li> <p>You've just made an update to the Storage account through Terraform!</p> <p>Since we're nearing the end of this tutorial, it's time to tear down the Storage account that we've created.</p>"},{"location":"basics/terraform/use-case/","title":"Use Case","text":"<p>This is a use case for creating an Azure Storage Account using Terraform. Each solution is meant to show the differences between building in Terraform using AzureRM modules and using Azure NoOps composite modules.</p>"},{"location":"basics/terraform/use-case/#problem","title":"Problem","text":"<p>In our project, we are using Terraform to provision and manage our infrastructure in Azure. As part of this process, we need a reliable and scalable storage solution to store the documents. We need a solution that can handle large amounts of data and provide high availability and redundancy. We also need a solution that is secure and durable, and can be easily integrated with our existing infrastructure in Azure. We need a solution that can be easily managed and maintained, and that can grow with our needs over time.</p>"},{"location":"basics/terraform/use-case/#solution","title":"Solution","text":"<p>To address this need, we have decided to use an Azure Storage Account. Azure Storage provides a secure and durable storage solution that can handle large amounts of data. With Azure Storage Account, we can store our documents in a highly available and redundant manner.</p>"},{"location":"basics/terraform/use-case/#implementation","title":"Implementation","text":"<p>We will use the <code>azurerm_storage_account</code> module to create an Azure Storage Account. This module will allow us to define the configuration of the storage account, including the name, location, and redundancy options. We will also use the <code>azurerm_storage_container</code> module to create a storage container within the storage account. This module will allow us to define the configuration of the storage container, including the name and access control options. Since this is going to be put into a SCCA/Zero Trust environment, we will also use the <code>azurerm_storage_account_network_rules</code> module to define the network rules for the storage account. This module will allow us to define the configuration of the network rules, including the IP addresses and virtual network rules that are allowed to access the storage account. Since this will be in a GovCloud environment, we will also use the <code>azurerm_storage_account_customer_managed_key</code> module to define the customer managed key for the storage account. This module will allow us to define the configuration of the customer managed key, including the key vault and key name.</p> <p>Lastly, we will add a private endpoint to the storage account to ensure that the storage account is only accessible from within the virtual network.</p>"},{"location":"best-practices/code-structure/","title":"Code Structure","text":"<p>Getting started with the structuring of Terraform configurations can be a bit daunting. This guide will help you understand the basic concepts and best practices for structuring your Terraform configurations used with Azure NoOps.</p>"},{"location":"best-practices/code-structure/#terraform-configurations","title":"Terraform configurations","text":"<p>In Azure NoOps overlay modules, the Terraform configurations are structured in the following way:</p> <p>resources.<code>azure_resource</code>.tf - contains the resources that are created in the module and the configuration of those resources. Example: resources.key.vault.tf</p> <p>modules.<code>azure_resource</code>.tf - contains the NoOps modules that are used in the module. Example: modules.key.vault.tf which is the Key Vault module.</p> <p>variables.<code>azure_resource</code>.tf - contains declarations of variables used in resources.tf</p> <p>outputs.tf - contains outputs from the resources created in resources.tf</p> <p>versions.tf - contains version requirements for Terraform and providers</p> <p>parameters.tfvars should not be used anywhere except composition.</p>"},{"location":"best-practices/code-structure/#common-recommendations-for-structuring-code","title":"Common recommendations for structuring code","text":"<p>The following are some common recommendations for structuring your Terraform configurations:</p> <ul> <li> <p>Use a consistent directory structure</p> </li> <li> <p>Use a consistent naming convention</p> </li> <li> <p>Use a consistent file naming convention</p> </li> <li> <p>Use a consistent code style</p> </li> <li> <p>Use a consistent way of defining variables, outputs, and locals</p> </li> <li> <p>Use a consistent way of defining resources</p> </li> <li> <p>Use a consistent way of defining data sources</p> </li> </ul>"},{"location":"best-practices/code-structure/#code-examples-of-directory-structure","title":"Code examples of directory structure","text":""},{"location":"best-practices/code-structure/#directory-structure","title":"Directory structure","text":"<p>The directory structure of a Terraform configuration should be consistent across all configurations. This makes it easier to understand and navigate the configuration.</p> <pre><code>.\n\u251c\u2500\u2500 modules.storage.account.tf\n\u251c\u2500\u2500 outputs.tf\n\u251c\u2500\u2500 versions.tf\n\u251c\u2500\u2500 parameters.tfvars\n\u251c\u2500\u2500 resources.key.vault.tf\n\u251c\u2500\u2500 variables.key.vault.tf\n</code></pre>"},{"location":"best-practices/key-concepts/","title":"Azure NoOps Terraform Key concepts","text":"<p>The official Terraform documentation describes all aspects of terraform configuration in details. Read it carefully to understand the rest of this section.</p>"},{"location":"best-practices/key-concepts/#resource","title":"Resource","text":"<p>A Resource is an instantiation of an Azure resource such as a azurerm_storage_account, azurerm_virtual_machine, etc. A resource belongs to a provider such as AzureRM, accepts arguments, outputs attributes, and has a lifecycle. A resource can be created, retrieved, updated, and deleted.</p>"},{"location":"best-practices/key-concepts/#resource-module-aka-overlay-module","title":"Resource module (aka Overlay Module)","text":"<p>A Resource Module which is commonly called an <code>Overlay</code> in the Azure NoOps ecosystem is a collection of connected resources which together perform a common action (For example, Azure NoOps Storage Account Terraform Overlays Module creates Storage Account, blobs, tables, etc). It depends on provider configuration, which can be defined in it, or in higher-level structures (e.g. in infrastructure module).</p>"},{"location":"best-practices/key-concepts/#infrastructure-module","title":"Infrastructure module","text":"<p>An Infrastructure Module is a collection of resources and/or resource modules, which can be logically connected. It defines the configuration for providers, which is passed to the downstream resource modules and to resources. It is normally limited to work in one entity per logical separator (e.g., Azure Region, Key Vault).</p> <p>Infrastructure module can include multiple Overlay Modules, provider resources, and data sources. While an \"<code>Overlay</code>\" is not necessarily an \"Infrastructure module\", an infrastructure module can include multiple Overlay Modules, which in turn can be called an <code>Overlay</code>. Basically anything that can be used to create a resource or a resource module can be included in an <code>Overlay</code>.</p> <p>For example, terraform-azurerm-overlays-management-hub overlay module includes provider resources like azurerm_virtual_network, azurerm_subnet, and includes resource modules(<code>Overlay</code> modules)terraform-azurerm-overlays-storage-account,terraform-azurerm-overlays-management-logging to manage the infrastructure required for running Landing Zone Management Hub on Azure NoOps Mission Enclave.</p>"},{"location":"best-practices/key-concepts/#composition","title":"Composition","text":"<p>A Composition is a collection of infrastructure modules(<code>Overlays</code>), which can span across several logically separated areas (e.g. Azure Regions, several Azure accounts). A Composition is used to describe the complete infrastructure required for the whole organization or project.</p> <p>A Composition consists of infrastructure modules, which consist of resources modules, which implement individual resources. For example, the Mission Enclave Landing Zone Starter is a composition that consists of the Landing Zone Management Hub and Landing Zone Management Spoke infrastructure modules.</p>"},{"location":"best-practices/key-concepts/#data-source","title":"Data Source","text":"<p>A Data Source performs a read-only operation and is dependant on provider configuration. It is used in a Resource Module and an Infrastructure Module.</p> <p>A Data Source terraform_remote_state acts as a glue for higher-level modules and compositions.</p> <p>The external data source allows an external program to act as a data source, exposing arbitrary data for use elsewhere in the Terraform configuration. Here is an example from the Azure NoOps Virtual Machine Overlay Module module where the virtual machine is built by calling an bash script.</p> <p>The http data source makes an HTTP GET request to the given URL and exports information about the response which is often useful to get information from endpoints where a native Terraform provider does not exist.</p>"},{"location":"best-practices/key-concepts/#remote-state","title":"Remote State","text":"<p>Infrastructure Modules and Compositions should persist their Terraform State in a remote location where it can be retrieved by others in a controllable way (e.g. specify ACL, versioning, logging).</p>"},{"location":"best-practices/key-concepts/#provider-provisioner-etc","title":"Provider, provisioner, etc","text":"<p>Providers, provisioners, and a few other terms are described very well in the official documentation. Azure NoOPs uses the AzureRM.</p>"},{"location":"best-practices/key-concepts/#putting-it-all-together","title":"Putting it all together","text":"<p>Think of individual resources like atoms in the infrastructure, Resource Modules are molecules (consisting of atoms). A Module is the smallest versioned and shareable unit. It has an exact list of arguments, implements basic logic for such a unit to do the required function. e.g. terraform-azurerm-overlays-key-vault module creates azurerm_keyvault and azurerm_keyvault_access_policy resources based on input. This resource module by itself can be used together with other modules to create the infrastructure module.</p> <p>Access to data across molecules (Resource Modules and Infrastructure Modules) is performed using the modules' outputs and data sources.</p> <p>Access between compositions is often performed using remote state data sources. There are multiple ways to share data between configurations.</p> <p>The following diagram shows how the different concepts are connected:</p> <pre><code>composition-1 (Mission Enclave Landing Zone Starter) {\n  infrastructure-module-1 (Landing Zone Management Hub) {\n    data-source-1 (Lookup for Resource Group) =&gt; d1\n\n    resource-module-1 (terraform-azurerm-overlays-storage-account) (Storage Account, blobs, tables, etc) {\n      data-source-2 =&gt; d2\n      resource-1 (azurerm_storage_account, d2)\n      resource-2 (azurerm_storage_container, d2)\n    }\n\n    resource-module-2 (terraform-azurerm-overlays-logging) (Log Analytics, Storage Account, etc) {\n      data-source-3 =&gt; d3\n      resource-3 (azurerm_log_analytics_workspace, d3)\n      resource-module-4 (terraform-azurerm-overlays-storage-account)\n    }\n\n    resource-module-3 (terraform-azurerm-overlays-key-vault) (Key Vault, access policy, etc) {\n      data-source-4 =&gt; d34\n      resource-5 (azurerm_key_vault, d4)\n      resource-6 (azurerm_key_vault_access_policy, d4)\n    }\n  }\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/","title":"Naming conventions","text":""},{"location":"best-practices/naming-conventions/#general-conventions","title":"General conventions","text":"<p>Hint: There should be no reason to not follow at least these conventions. They are simple and make the code more readable and maintainable.</p> <p>Hint: Beware that actual cloud resources often have restrictions in allowed names. Some resources, for example, can't contain dashes, some must be camel-cased. Always check the documentation for the resource you are working with.</p> <ol> <li>Use <code>_</code> (underscore) instead of <code>-</code> (dash) everywhere (in resource names, data source names, variable names, outputs, etc).</li> <li>Prefer to use lowercase letters and numbers (even though UTF-8 is supported).</li> </ol>"},{"location":"best-practices/naming-conventions/#resource-and-data-source-arguments","title":"Resource and data source arguments","text":"<ol> <li> <p>Do not repeat resource type in resource name (not partially, nor completely):</p> <p>Good</p> <pre><code>`resource \"azurerm_route_table\" \"public\" {}`\n</code></pre> <p>Bad</p> <pre><code>`resource \"azurerm_route_table\" \"public_route_table\" {}`\n</code></pre> <p>Bad</p> <pre><code>`resource \"azurerm_route_table\" \"public_azurerm_route_table\" {}`\n</code></pre> </li> <li> <p>Resource name should be named <code>this</code> if there is no more descriptive and general name available, or if the resource module creates a single resource of this type (eg, in azurerm virtual machine module there is a single resource of type <code>azurerm_virtual_machine</code> and multiple resources of type<code>azurerm_network_interface</code>, so <code>azurerm_virtual_machine</code> should be named <code>this</code> and <code>azurerm_network_interface</code> should have more descriptive names - like <code>private</code>, <code>public</code>, <code>database</code>).</p> </li> <li> <p>Always use singular nouns for names.</p> </li> <li> <p>Use <code>-</code> inside arguments values and in places where value will be exposed to a human (eg, inside DNS name of RDS instance).</p> </li> <li> <p>Use <code>${}</code> for interpolation, even if it is not necessary. It makes the code more readable and maintainable.</p> </li> <li> <p>Include argument <code>count</code> / <code>for_each</code> inside resource or data source block as the first argument at the top and separate by newline after it.</p> </li> <li> <p>Include argument <code>tags,</code> if supported by resource, as the last real argument, following by <code>depends_on</code> and <code>lifecycle</code>, if necessary. All of these should be separated by a single empty line.</p> </li> <li> <p>When using conditions in an argument<code>count</code> / <code>for_each</code> prefer boolean values instead of using <code>length</code> or other expressions.</p> </li> </ol>"},{"location":"best-practices/naming-conventions/#code-examples-of-resource","title":"Code examples of <code>resource</code>","text":""},{"location":"best-practices/naming-conventions/#usage-of-for_each-with-map","title":"Usage of <code>for_each</code> with <code>map</code>","text":"<p>Good</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  for_each = var.create_vm ? {\n    a = \"a\",\n    b = \"b\",\n    c = \"c\"\n  } : {}\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}-${each.key}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre> <p>Bad</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}-${each.key}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  for_each = var.create_vm ? {\n    a = \"a\",\n    b = \"b\",\n    c = \"c\"\n  } : {}\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#usage-of-for_each-with-list","title":"Usage of <code>for_each</code> with <code>list</code>","text":"<p>Good</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  for_each = var.create_vm ? [\"a\", \"b\", \"c\"] : []\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}-${each.value}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#usage-of-for_each-with-set","title":"Usage of <code>for_each</code> with <code>set</code>","text":"<p>Good</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  for_each = var.create_vm ? toset([\"a\", \"b\", \"c\"]) : toset([])\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}-${each.value}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#usage-of-for_each-with-a-module","title":"Usage of <code>for_each</code> with a <code>module</code>","text":"<p>Good</p> <pre><code>module \"example\" {\n  for_each = var.create_storage_account ? {\n    a = \"a\",\n    b = \"b\",\n    c = \"c\"\n  } : {}\n  source = \"azurenoops/ovarlays-storage-account/azurerm\"\n  version = \"~&gt; 3.0.0\"\n  name                  = \"${var.create_storage_account ? \"example\" : \"none\"}-${each.key}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#usage-of-for_each-with-a-module-and-count","title":"Usage of <code>for_each</code> with a <code>module</code> and <code>count</code>","text":"<p>Good</p> <pre><code>module \"example\" {\n  count = var.create_vm ? 3 : 0\n  for_each = var.create_vm ? {\n    a = \"a\",\n    b = \"b\",\n    c = \"c\"\n  } : {}\n  source = \"./modules/vm\"\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}-${each.key}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#conditions-in-count","title":"Conditions in <code>count</code>","text":"<p>Count should be used to create multiple instances of the same resource. It should not be used to create different resources based on a condition. Use for_each for that.</p> <p>Best</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  count = var.create_vm ? 1 : 0\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre> <p>Good but not Best</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  count = length(var.virtual_machines) &gt; 0 ? 1 : 0\n  name                  = \"${var.create_vm ? \"example\" : \"none\"}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#placement-of-tags","title":"Placement of <code>tags</code>","text":"<p>Tags should be placed in the resource module, not in the infrastructure module. This is because tags are specific to the resource and not to the infrastructure. The infrastructure module should not have any tags.</p>"},{"location":"best-practices/naming-conventions/#code-examples-of-tags","title":"Code examples of <code>tags</code>","text":"<p>Good</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  name                  = \"example\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n  tags = {\n    environment = \"staging\"\n  }\n}\n</code></pre> <p>Bad</p> <pre><code>resource \"azurerm_virtual_machine\" \"example\" {\n  name                  = \"example\"\n  tags                  = \"${var.tags}\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  .\n  .\n  .\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#usage-of-locals","title":"Usage of <code>locals</code>","text":"<p>Locals are used to define values that are used in multiple places in the configuration. They are used to avoid repeating the same value in multiple places. They are also used to define complex values that are used in multiple places in the configuration.</p>"},{"location":"best-practices/naming-conventions/#code-examples-of-locals","title":"Code examples of <code>locals</code>","text":"<pre><code>locals {\n  vm_name = \"example\"\n  vm_location = azurerm_resource_group.example.location\n  vm_resource_group_name = azurerm_resource_group.example.name\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#variables","title":"Variables","text":"<ul> <li> <p>Don't reinvent the wheel in resource modules: use name, description, and default value for variables as defined in the \"Argument Reference\" section for the resource you are working with.</p> </li> <li> <p>Support for validation in variables is rather limited (e.g. can't access other variables or do lookups). Plan accordingly because in many cases this feature is useless.</p> </li> <li> <p>Use the plural form in a variable name when type is list(...) or map(...).</p> </li> <li> <p>Order keys in a variable block like this: description , type, default, validation.</p> </li> <li> <p>Always include description on all variables even if you think it is obvious (you will need it in the future).</p> </li> <li> <p>Prefer using simple types (number, string, list(...), map(...), any) over specific type like object() unless you need to have strict constraints on each key.</p> </li> <li> <p>Use specific types like map(map(string)) if all elements of the map have the same type (e.g. string) or can be converted to it (e.g. number type can be converted to string).</p> </li> <li> <p>Use type any to disable type validation starting from a certain depth or when multiple types should be supported.</p> </li> <li> <p>Value {} is sometimes a map but sometimes an object. Use tomap(...) to make a map because there is no way to make an object.</p> </li> </ul>"},{"location":"best-practices/naming-conventions/#code-examples-of-variables","title":"Code examples of <code>variables</code>","text":"<pre><code>variable \"storage_account_name\" {\n  description = \"The name of the Storage Account.\"\n  type        = string\n  default     = \"example\"\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#outputs","title":"Outputs","text":"<p>Make outputs consistent and understandable outside of its scope (when a user is using a module it should be obvious what type and attribute of the value it returns).</p> <ul> <li> <p>The name of output should describe the property it contains and be less free-form than you would normally want.</p> </li> <li> <p>Good structure for the name of output looks like {name}{type} , where:</p> </li> <li> <p>{name} is the name of the resource or module</p> </li> <li>{type} is the type of the resource or module</li> <li> <p>{attribute} is the attribute of the resource or module</p> </li> <li> <p>Always include description on all outputs even if you think it is obvious (you will need it in the future).</p> </li> <li> <p>Order keys in an output block like this: description , value.</p> </li> <li> <p>Use the plural form in an output name when type is list(...) or map(...).</p> </li> <li> <p>Use specific types like map(map(string)) if all elements of the map have the same type (e.g. string) or can be converted to it (e.g. number type can be converted to string).</p> </li> <li> <p>Use type any to disable type validation starting from a certain depth or when multiple types should be supported.</p> </li> <li> <p>Value {} is sometimes a map but sometimes an object. Use tomap(...) to make a map because there is no way to make an object.</p> </li> </ul>"},{"location":"best-practices/naming-conventions/#code-examples-of-outputs","title":"Code examples of <code>outputs</code>","text":"<pre><code>output \"storage_account_id\" {\n  description = \"The ID of the Storage Account.\"\n  value       = azurerm_storage_account.example.id\n}\n</code></pre>"},{"location":"best-practices/naming-conventions/#use-plural-name-if-the-returning-value-is-a-list","title":"Use plural name if the returning value is a <code>list</code>","text":"<pre><code>output \"storage_account_ids\" {\n  description = \"The IDs of the Storage Accounts.\"\n  value       = azurerm_storage_account.example.*.id\n}\n</code></pre>"},{"location":"best-practices/overview/","title":"Azure NoOps Best Practices","text":"<p>How to Achieve Collaboration and Automation across Development, Operations, and Cyber Teams</p>"},{"location":"best-practices/overview/#what-is-azure-noops","title":"What is Azure NoOps?","text":"<p>NoOps is a term that describes the goal of eliminating the need for manual operations tasks by automating the entire software development and deployment lifecycle. NoOps aims to achieve faster, more reliable, and more secure software delivery by leveraging cloud-native technologies, such as infrastructure as code (IaC), policy as code (PaC), and continuous integration and delivery (CI/CD).</p>"},{"location":"best-practices/overview/#why-azure-noops","title":"Why Azure NoOps?","text":"<p>NoOps can bring many benefits to organizations that adopt it, such as:</p> <ul> <li>Reducing the friction and silos between development, operations, and cyber teams.</li> <li>Increasing the speed and frequency of software releases and updates.</li> <li>Improving the quality and performance of software products and services.</li> <li>Enhancing the security and compliance of software environments and processes.</li> <li>Lowering the costs and risks of software development and operations.</li> </ul>"},{"location":"best-practices/overview/#how-to-achieve-azure-noops","title":"How to Achieve Azure NoOps?","text":"<p>NoOps is not a one-size-fits-all solution, but rather a mindset and a culture that requires collaboration and automation across the entire software lifecycle. To achieve NoOps, organizations need to adopt the following best practices:</p>"},{"location":"best-practices/overview/#shared-responsibility","title":"Shared Responsibility","text":"<p>NoOps requires a shift from the traditional model of separate and distinct roles and responsibilities for development, operations, and cyber teams, to a model of shared ownership and accountability for the software environment and processes. This means that:</p> <ul> <li>Development: Owns Infrastructure as Code while working with Operations on the Azure Environment architecture.</li> <li>Operations: Learns and deploys IaC while working with Cyber on securing the environment.</li> <li>Cyber: Writes and deploys Policy as Code while working with Dev and Ops on securing the environment.</li> </ul>"},{"location":"best-practices/overview/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Infrastructure as Code (IaC) is the practice of defining and managing the software infrastructure and configuration using code and automation tools, rather than manual processes and scripts. IaC enables developers and operations teams to provision, update, and scale the software environment in a consistent, repeatable, and reliable manner. IaC also facilitates the integration of security and compliance policies into the software infrastructure, ensuring that the environment is always aligned with the best practices and standards.</p>"},{"location":"best-practices/overview/#policy-as-code","title":"Policy as Code","text":"<p>Policy as Code (PaC) is the practice of defining and enforcing the security and compliance rules and requirements for the software environment and processes using code and automation tools, rather than manual audits and reviews. PaC enables cyber teams to write and deploy policies as code that can be applied to the software infrastructure, configuration, and deployment, ensuring that the environment and processes are always compliant with the regulations and standards. PaC also facilitates the collaboration and communication between cyber and other teams, as the policies are transparent, verifiable, and actionable.</p>"},{"location":"best-practices/overview/#sentinel-as-code","title":"Sentinel as Code","text":"<p>Sentinel as Code is the use of IaC with Terraform to define the desired state of your Azure Sentinel environment. This includes defining the workspace, data connectors, analytics rules, and other configurations. Once the code is written, you can use automation tools to deploy and manage your Sentinel environment, ensuring that it is always in the desired state.</p>"},{"location":"best-practices/overview/#continuous-integration-and-delivery","title":"Continuous Integration and Delivery","text":"<p>Continuous Integration and Delivery (CI/CD) is the practice of automating the software development and deployment pipeline, enabling the teams to integrate, test, and deliver the software code and artifacts in a continuous and seamless manner. CI/CD enables the teams to accelerate the software delivery cycle, improve the software quality and performance, and reduce the software errors and defects. CI/CD also facilitates the integration of security and compliance checks and controls into the software pipeline, ensuring that the software code and artifacts are always secure and compliant.</p>"},{"location":"best-practices/security/","title":"Security","text":"<p>Security in Terraform is a broad topic, and this guide is intended to provide a high-level overview of the security features available in Terraform and best practices for using them.</p>"},{"location":"best-practices/security/#security-features","title":"Security Features","text":"<p>Terraform provides several security features to help you secure your infrastructure and resources. Some of the key security features include:</p> <ul> <li> <p>State Management: Terraform uses a state file to store the state of your infrastructure. The state file contains sensitive information, such as resource IDs and secrets, so it's important to secure it. Terraform provides several options for state management, including remote state storage and state locking, to help you secure your state file.</p> </li> <li> <p>Providers: Terraform providers are responsible for managing resources in a specific cloud or on-premises environment. Providers are responsible for authenticating to the cloud or environment and managing resources. Terraform provides several security features for providers, including authentication methods, access control, and encryption.</p> </li> <li> <p>Variables: Terraform allows you to define variables to parameterize your configurations. Variables can be used to store sensitive information, such as passwords and API keys. Terraform provides several options for securing variables, including sensitive variables and encrypted variables.</p> </li> <li> <p>Modules: Terraform modules allow you to encapsulate infrastructure configurations into reusable components. Modules can be used to define security best practices and enforce security policies. Terraform provides several options for securing modules, including versioning, access control, and encryption.</p> </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/create-lz/","title":"Streamline Your Cloud Deployment with Azure NoOps Landing Zone Starter","text":"<p>In today's fast-paced digital landscape, organizations are increasingly turning to the cloud to meet their ever-evolving business needs. Azure, Microsoft's cloud computing platform, provides a robust and scalable infrastructure for hosting applications, storing data, and running various workloads. However, deploying and managing resources in Azure can sometimes be a complex and time-consuming process. This is where Azure NoOps Landing Zone Starter comes into play, offering an automated and efficient solution for deploying your cloud infrastructure.</p> <p>What is Azure NoOps Landing Zone Starter? Azure NoOps Landing Zone Starter is a framework that enables organizations to deploy a well-architected and standardized landing zone in Azure, while following best practices and security guidelines. It eliminates the need for manual intervention and reduces the time and effort required to set up a secure and compliant cloud infrastructure.</p>"},{"location":"blog/posts/create-lz/#key-features-and-benefits","title":"Key Features and Benefits:","text":"<ul> <li> <p>Automated Deployment: The NoOps Landing Zone Starter uses Infrastructure as Code (IaC) principles to automate the deployment of Azure resources. This eliminates the manual effort of provisioning and configuring resources, reducing the risk of human error and ensuring consistency across deployments.</p> </li> <li> <p>Standardized Architecture: The framework provides a set of pre-defined landing zone patterns, which can be customized to fit your specific requirements. These patterns follow best practices recommended by Microsoft, ensuring a well-architected and robust foundation for your applications and workloads.</p> </li> <li> <p>Security and Compliance: The NoOps Landing Zone Starter incorporates built-in security controls and compliance policies, enabling organizations to meet their regulatory requirements. It includes features like Azure Policy, Azure Firewall, and Azure Security Center, which help to secure your resources and protect against potential threats.</p> </li> <li> <p>Scalability and Resilience: Azure NoOps Landing Zone Starter is designed to support scalable and resilient architectures. It leverages features like Azure Virtual Networks, Availability Sets, and Load Balancers to ensure high availability and fault tolerance for your applications.</p> </li> <li> <p>Operational Efficiency: By automating the deployment process and following best practices, the NoOps Landing Zone Starter reduces operational overhead and streamlines ongoing management. It enables organizations to focus on delivering value-added services rather than spending time on infrastructure provisioning and maintenance.</p> </li> </ul>"},{"location":"blog/posts/create-lz/#getting-started","title":"Getting Started","text":"<p>To deploy an Azure NoOps Landing Zone Starter, you can leverage the Azure Portal, Azure CLI, or Azure PowerShell. The framework provides a set of templates and scripts that can be easily customized to meet your specific requirements. Additionally, Microsoft offers detailed documentation and step-by-step guides to help you get started with the deployment process.</p>"},{"location":"blog/posts/create-lz/#conclusion","title":"Conclusion","text":"<p>Azure NoOps Landing Zone Starter is an invaluable tool for organizations looking to streamline their cloud deployment process. By automating infrastructure provisioning, following best practices, and incorporating security and compliance controls, this framework allows businesses to focus on innovation and value creation. With Azure NoOps Landing Zone Starter, you can build a scalable, resilient, and secure cloud infrastructure in a fraction of the time, enabling you to accelerate your digital transformation journey.</p>"},{"location":"deployment/add-ons/","title":"Azure NoOps Reference Starters &amp; Add-Ons","text":"<p>This repository contains a collection of reference starters &amp; add-ons for Azure NoOps. These starters and add-ons are designed to help you get started with Azure NoOps and provide a starting point for your own projects.</p>"},{"location":"deployment/add-ons/#reference-starters-contents","title":"Reference Starters Contents","text":"Name Description Status Mission Enclave Landing Zone Starter Mission Enclave Landing Zone Starter for Azure NoOps Published Mission Enclave Policy Starter Mission Enclave Policy Starter for Azure NoOps Published Mission Enclave Sentinel Starter Mission Enclave Sentinel Starter for Azure NoOps Published Mission Enclave Landing Zone Starter with Bicep Mission Enclave Landing Zone with Bicep for Azure NoOps Coming Soon Mission Enclave AKS Starter Azure Kubernetes Service Starter for Azure NoOps Coming Soon Mission Enclave App Service Starter Azure App Service Starter for Azure NoOps Coming Soon"},{"location":"deployment/add-ons/#add-on-contents","title":"Add On Contents","text":"<p>These add-ons are designed to be used with the Azure NoOps starter projects.</p> Name Description Status AVD Add-on Azure Virtual Desktop Add-on for Azure NoOps Coming Soon TAK Server Add-on TAK Server Add-on for Azure NoOps Coming Soon"},{"location":"deployment/github-actions/","title":"Azure NoOps GitHub Actions","text":""},{"location":"deployment/github-actions/#overview","title":"Overview","text":"<p>This document provides guidance on how to use GitHub Actions to automate the deployment of Azure NoOps resources.</p>"},{"location":"deployment/github-actions/#whats-cicd","title":"What's CI/CD?","text":"<p>CI/CD stands for Continuous Integration and Continuous Delivery.</p> <p>Continuous Integration is a software development practice that requires developers to integrate code into a shared repository several times a day. Each integration can then be verified by an automated build and automated tests. By doing so, you can detect errors quickly, and locate them more easily.</p> <p>Continuous Delivery pushes this practice further, by preparing for a release to production after each successful build. By doing so, you can get working software into the hands of users faster.</p>"},{"location":"deployment/github-actions/#whats-github-actions","title":"What's GitHub Actions?","text":"<p>GitHub Actions is a service that lets you automate your software development workflows. It allows you to run workflows that can be triggered by any event on the GitHub platform, such as opening a pull request or pushing a commit to a repository.</p> <p>It's a great way to automate your CI/CD pipelines, and it's free for public repositories.</p>"},{"location":"deployment/github-actions/#workflows","title":"Workflows","text":"<p>All the GitHub Actions for Azure NoOps are stored in the <code>.github/workflows</code> directory of the certain starters and add-on projects. These are the automated workflows we use for ensuring a quality working product. We use GitHub Actions to automate the process of building, testing, and deploying the infrastructure.</p> <p>These are the automated workflows we use for ensuring a quality working product. All workflows are part of a suite of terraform related actions - find them at https://github.com/azurenoops/terraform-github-actions</p> <p>For more on GitHub Actions: https://docs.github.com/en/actions/</p> <p>For more on workflows: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions/</p>"},{"location":"deployment/github-actions/#contents","title":"Contents","text":"<ul> <li> <p>create_plan.yml (<code>This actions generates a terraform plan. If the triggering event relates to a PR it will add a comment on the PR containing the generated plan.</code>)</p> <p>This workflow assumes some pre-requisites have been set-up. See: Configuration Prerequisites</p> <ol> <li>Authenticates against a pre-configured storage account that contains<ul> <li>values for authenticating against a storage account</li> <li>values for deploying terraform</li> </ul> </li> </ol> </li> <li> <p>apply_plan.yml (<code>This action applies a terraform plan. The default behaviour is to apply the plan that has been added to a PR using the terraform-plan action.If the plan is not found or has changed, then the apply action will fail. This is to ensure that the action only applies changes that have been reviewed by a human.</code>)</p> <p>This workflow assumes some pre-requisites have been set-up. See: Configuration Prerequisites</p> <ol> <li> <p>Authenticates against a pre-configured storage account that contains</p> <ul> <li>values for authenticating against a storage account</li> <li>values for deploying terraform</li> </ul> </li> <li> <p>Pulls known good MELZ and Terraform configuration variables from that storage account</p> </li> <li> <p>Applies terraform anew from that configuration.</p> </li> </ol> </li> <li> <p>check_for_drift.yml (<code>Check for drift in terraform managed resources. This action runs the terraform plan command, and fails the build if any changes are required. This is intended to run on a schedule to notify if manual changes to your infrastructure have been made.</code>)</p> <ol> <li>Checks for drift in the infrastructure/terraform directory</li> </ol> </li> <li> <p>destroy_plan.yml (<code>This action uses the terraform destroy command to immediately destroy all resources in a terraform workspace.</code>)</p> <ol> <li>Destroys the terraform configuration</li> </ol> </li> <li> <p>validate_plan.yml (<code>This action uses the terraform validate command to check that a terraform configuration is valid. This can be used to check that a configuration is valid before creating a plan.</code>)</p> <ol> <li>Recursively validates and lints all the terraform referenced at infrastructure/terraform</li> </ol> </li> </ul>"},{"location":"deployment/github-actions/#configuration-prerequisites","title":"Configuration Prerequisites","text":"<ol> <li> <p>Configuration store</p> <p>When applying terraform locally or from this automation, an MELZ Configuration file (commonly melz.config) and Terraform-specific variables files (commonly *.tfvars) are required.</p> </li> <li> <p>deploy_dependencies.yml</p> <ol> <li>Builds and deploys the dependencies for the terraform configuration</li> </ol> </li> </ol>"},{"location":"deployment/prerequisites/","title":"Prerequisites","text":"<p>Mission Enclave Starters can bootstrap an entire Azure tenant without any infrastructure dependencies, and the user must first have Owner permission on the tenant root before deploying.</p> <p>Before you begin, ensure you have met the following requirements:</p> <ul> <li> <p>Azure Subscription: You need an Azure subscription to create resources in Azure. If you don't have one, you can create a free account.</p> </li> <li> <p>Azure CLI or Azure PowerShell: You need either Azure CLI or Azure PowerShell installed and configured to interact with your Azure account. You can download them from here and here respectively.</p> </li> <li> <p>Terraform: You will need Terraform installed to deploy the infrastructure. You can download Terraform from here.</p> </li> <li> <p>Knowledge of Azure Landing Zones: This project involves deploying and managing Azure Landing Zones resources. Familiarity with Azure Landing Zones and its concepts is recommended.</p> </li> <li> <p>Knowledge of Azure Policy: This project involves deploying and managing Azure Policy resources. Familiarity with Azure Policy and its concepts is recommended.</p> </li> <li> <p>Knowledge of Azure Sentinel: This project involves deploying and managing Azure Sentinel resources. Familiarity with Azure Sentinel and its concepts is recommended.</p> </li> <li> <p>GitHub Actions: You need to have a GitHub account and a repository to deploy the Mission Enclave Landing Zone.</p> </li> </ul> <p>Mission Enclave Starters requires the following:</p> <ul> <li> <p>A user that is Global Admin in the Microsoft Entra ID</p> </li> <li> <p>Elevation of privileges of this user which grants him/her the \u201cUser Access Administrator\u201d permission at the tenant root scope</p> </li> <li> <p>An explicit roleAssignment (RBAC) made at the tenant root scope via CLI or PowerShell (Note: There\u2019s no portal UX to make this roleAssignment)</p> </li> </ul> <p>Note: Once you have completed the deployment, you can remove the Owner permission from the tenant root, as it will no longer be needed for any subsequent operations.</p>"},{"location":"deployment/prerequisites/#elevate-access-to-manage-azure-resources-in-the-directory","title":"Elevate Access to manage Azure resources in the directory","text":"<p>1.1  Sign into the Azure portal as a user being Global Administrator</p> <p>1.2  Open Microsoft Entra ID</p> <p>1.3  Under Manage, select *Properties</p> <p></p> <p>1.4  Under Access management for Azure resources, set the toggle to *Yes</p> <p></p>"},{"location":"deployment/prerequisites/#grant-access-to-the-user-at-tenant-root-scope-to-deploy-mission-enclave-landing-zone-starter","title":"Grant Access to the User at tenant root scope \u201c/\u201d to deploy Mission Enclave Landing Zone Starter","text":"<p>You can use either Bash (CLI) or PowerShell to create the roleAssignment for the current user \u2013 or a dedicated user \u2013 that will do the deployment.</p> <p>Bash:</p> <pre><code>#sign  into AZ CLI, this will redirect you to a web browser for authentication, if required\naz login\n\n#assign Owner role to Tenant root scope  (\"/\") as a Owner (gets object Id of the current user (az login))\naz role assignment create --scope '/'  --role 'Owner' --assignee-object-id $(az ad signed-in-user show --query id --output tsv)\n</code></pre> <p>Powershell:</p> <pre><code>#sign in to Azure  from Powershell, this will redirect you to a web browser for authentication, if required\nConnect-AzAccount\n\n#get object Id of  the current user (that is used above)\n$user = Get-AzAduser -SignedIn\n\n#assign Owner  role to Tenant root scope (\"/\") as a User Access Administrator\nNew-AzRoleAssignment -Scope '/' -RoleDefinitionName 'Owner' -ObjectId $user.Id\n</code></pre> <p>Please note: sometimes it can take up to 15 minutes for permission to propagate at tenant root scope. It is highly recommended that you log out and log back in to refresh the token before you proceed with the deployment.*</p>"},{"location":"deployment/prerequisites/#azure-monitor-baseline-alerts-prerequisites","title":"Azure Monitor Baseline Alerts prerequisites","text":"<p>The Azure Monitor Baseline Alerts are deployed as part of the Mission Enclave Landing Zone Starter deployment, and they require the following:</p> <ol> <li>For the policies to work, the following Azure resource providers, normally registered by default, must be registered on all subscriptions in scope:</li> <li>Microsoft.AlertsManagement</li> <li>Microsoft.Insights Please see here for details on how to register a resource provider should you need to do so.</li> </ol>"},{"location":"deployment/remote-state-storage/","title":"Setting up Terraform State Storage Account in Azure","text":"<p>This guide will walk you through the process of setting up a storage account in Azure to be used as a backend for Terraform state storage.</p> <p>Note: This guide assumes you have an Azure subscription and the Azure CLI installed.</p> <p>Important: While you can use this guide to set up a storage account for Terraform state storage, all Mission Enclave Starters have a dependency workflow that sets up the storage account for you. This guide is intended for those who want to set up the storage account manually or for those who want to understand the process.</p>"},{"location":"deployment/remote-state-storage/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure subscription</li> <li>Azure CLI installed</li> </ul>"},{"location":"deployment/remote-state-storage/#steps","title":"Steps","text":"<ol> <li> <p>Login to Azure CLI by running the following command:     <pre><code>az login\n</code></pre></p> </li> <li> <p>Create a resource group for the state storage account:     <pre><code>az group create --name &lt;resource-group-name&gt; --location &lt;location&gt;\n</code></pre></p> </li> <li> <p>Create a storage account:     <pre><code>az storage account create --name &lt;storage-account-name&gt; --resource-group &lt;resource-group-name&gt; --location &lt;location&gt; --sku Standard_LRS\n</code></pre></p> </li> <li> <p>Retrieve the storage account key:     <pre><code>az storage account keys list --account-name &lt;storage-account-name&gt; --resource-group &lt;resource-group-name&gt; --query \"[0].value\" --output tsv\n</code></pre></p> </li> <li> <p>Create a container within the storage account:     <pre><code>az storage container create --name &lt;container-name&gt; --account-name &lt;storage-account-name&gt; --account-key &lt;storage-account-key&gt;\n</code></pre></p> </li> <li> <p>Configure Terraform to use the Azure backend:     <pre><code>terraform {\n  backend \"azurerm\" {\n     storage_account_name = \"&lt;storage-account-name&gt;\"\n     container_name       = \"&lt;container-name&gt;\"\n     key                  = \"terraform.tfstate\"\n     access_key           = \"&lt;storage-account-key&gt;\"\n  }\n}\n</code></pre></p> </li> <li> <p>Initialize Terraform:     <pre><code>terraform init\n</code></pre></p> </li> <li> <p>Run Terraform commands as usual:     <pre><code>terraform plan\nterraform apply\n</code></pre></p> </li> </ol>"},{"location":"deployment/encrypted-transport/encrypted-transport-faq/","title":"FAQ","text":""},{"location":"deployment/encrypted-transport/encrypted-transport-planning/","title":"Planning","text":""},{"location":"deployment/encrypted-transport/encrypted-transport-planning/#initial-considerations","title":"Initial considerations","text":"<p>The Encrypted Transport for SCCA-Compliant Enclave Reference Add-on Starter Terraform module is designed to be used as a starting point for deploying VPN services to an existing SCCA-compliant enclave. This starter is not intended to be used as a standalone VPN solution as it requires an SCCA-compliant Hub (VNet, Firewall, &amp; Log Analytics Workspace) to be deployed first so that it can peer to the Hub virtual network and push logs to the Log Analytics Workspace.</p> <p>Before getting started with this module, please take note of the following considerations:</p> <ol> <li> <p>This module requires a minimum <code>azurerm</code> provider version of <code>&gt; 3.36.0</code>.</p> </li> <li> <p>This module requires a minimum Terraform version <code>1.3.1</code>.</p> <p>NOTE: New releases of the module may contain features which require the minimum supported versions to be increased, but changes will be clearly documented in the release notes, user guide, and readme.</p> </li> </ol>"},{"location":"deployment/encrypted-transport/encrypted-transport-planning/#mission-enclave-landing-zone-remote-state-storage-account","title":"Mission Enclave Landing Zone Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/encrypted-transport/encrypted-transport-planning/#deployment-planning","title":"Deployment Planning","text":""},{"location":"deployment/encrypted-transport/encrypted-transport/","title":"Encrypted Transport for SCCA-Compliant Enclave Reference Add-on Starter","text":"<p>The Encrypted Transport for SCCA-Compliant Enclave Reference Add-on Starter Terraform module provides an opinionated approach for deploying and managing the core platform capabilities of encrypted transport (Obfuscation) for SCCA-compliant enclaves using Terraform, with a focus on the central resource hierarchy.</p>"},{"location":"deployment/encrypted-transport/encrypted-transport/#architecture","title":"Architecture","text":"<p>The following diagram shows the overall solution architecture for the Encrypted Transport Add-on. The main components are the DMZ Spoke and one or more Redirectors. The DMZ Spoke is deployed into the same region as the Hub and the Redirectors are deployed into an Azure Commercial region that is geographically close to the end users / VPN users. This placement ensures that the user's traffic is routed over Azure-owned fiber back to the Hub region, which reduces overall latency. The Redirectors are deployed into a separate resource group and virtual network to ensure that the traffic is isolated from other resources in the region. The Redirectors are also deployed into a separate subnet to ensure that the traffic is isolated from other resources in the virtual network.</p> <p></p>"},{"location":"deployment/encrypted-transport/encrypted-transport/#design-areas","title":"Design areas","text":"<p>The Encrypted Transport for SCCA-Compliant Enclave Reference Add-on Starter Terraform module is designed to address the following areas:</p> <p>Resource organization</p> <ul> <li>Create a management group hierarchy for the encrypted transport platform</li> </ul> <p>Identity and access management</p> <ul> <li>Azure Active Directory tenant for the encrypted transport platform</li> </ul>"},{"location":"deployment/landing-zone/landing-zone-cleanup/","title":"Cleanup","text":"<p>Remember to destroy resources that are not in use. If you want to delete an Mission Enclave Landing Zone Starter deployment you can use <code>terraform destroy</code>. If you have deployed more than one Terraform template, e.g., if you have deployed <code>landing zone</code> and then <code>addon-workload</code>, run the <code>terraform destroy</code> commands in the reverse order that you applied them.</p> <p>Delete in the specified bash below.</p> <p>Ensure the following state management environment variables have been defined:</p> <ul> <li>STORAGEACCOUNTNAME = 'xxxxx'</li> <li>CONTAINERNAME      = 'xxxxx'</li> <li>TFSTATE_RG         = 'xxxxx'</li> </ul> <pre><code># Deploy core MELZS resources\n$STORAGEACCOUNTNAME='xxxxx'\n$CONTAINERNAME='xxxxx'\n$TFSTATE_RG='xxxxx'\n\nterraform init --backend-config=\"resource_group_name=$TFSTATE_RG\" --backend-config=\"storage_account_name=$STORAGEACCOUNTNAME\" --backend-config=\"container_name=$CONTAINERNAME\"\n\ncd infrastructure/terraform\nterraform apply --out anoa.dev.plan --var-file ../tfvars/parameters.tfvars --var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;password&gt;&gt;\"\n\n# Destroy core MELZS resources\ncd infrastructure/terraform\nterraform plan --destroy -out anoa.dev.plan --var-file ../tfvars/parameters.tfvars -var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;password&gt;&gt;\"\nterraform apply anoa.dev.plan\n</code></pre> <p>This command will attempt to remove all the resources that were created by <code>terraform apply</code> and could take up to 45 minutes.</p>"},{"location":"deployment/landing-zone/landing-zone-cleanup/#misc-tasks","title":"Misc Tasks","text":"<p>The Mission Enclave Landing Zone Starter when destroyed may leave behind some resources that need to be manually deleted. Please check the following resources and delete them if they are not needed.</p>"},{"location":"deployment/landing-zone/landing-zone-cleanup/#diagnostic-settings","title":"Diagnostic Settings","text":"<ul> <li>Delete the diagnostic settings deployed at the subscription level.</li> </ul> <p>WARNING If you deploy and delete Mission Enclave Landing Zone Starter in the same subscription multiple times without deleting the subscription-level diagnostic settings, the sixth deployment will fail. Azure has a limit of five diagnostic settings per subscription. The error will be similar to this: <code>\"The limit of 5 diagnostic settings was reached.\"</code></p> <p>To delete the diagnotic settings in script, use the AZ CLI or PowerShell. An AZ CLI example is below:</p> <pre><code># View diagnostic settings in the current subscription\naz monitor diagnostic-settings subscription list --query value[] --output table\n\n# Delete a diagnostic setting\naz monitor diagnostic-settings subscription delete --name &lt;diagnostic setting name&gt;\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-cleanup/#using-the-portal","title":"Using the Portal","text":"<p>Alternatively, you can delete the diagnostic settings from the Azure Portal. Choose the subscription blade, then Activity log in the left panel. At the top of the Activity log screen click the Diagnostics settings button. From there you can click the Edit setting link and delete the diagnostic setting.</p> <p></p>"},{"location":"deployment/landing-zone/landing-zone-cleanup/#defender-for-cloud","title":"Defender for Cloud","text":"<ul> <li>Delete the Defender for Cloud workspace deployed at the subscription level.</li> </ul> <p>To downgrade the Microsoft Defender for Cloud pricing level in the Azure portal:</p> <ol> <li>Navigate to the Microsoft Defender for Cloud page, then click the \"Environment settings\" tab in the left navigation panel.</li> <li>In the tree/grid select the subscription you want to manage.</li> <li>Click the large box near the top of the page that says \"Enhanced security off\".</li> <li>Click the save button.</li> </ol> <p>To downgrade the Microsoft Defender for Cloud pricing level using the AZ CLI:</p> <pre><code># List the pricing tiers\naz security pricing list -o table --query \"value[].{Name:name, Tier:pricingTier}\"\n\n# Change a pricing tier to the default free tier\naz security pricing create --name \"&lt;name of tier&gt;\" --tier Free\n</code></pre> <p>NOTE The Azure portal allows changing all pricing tiers with a single setting, but the AZ CLI requires each setting to be managed individually.</p>"},{"location":"deployment/landing-zone/landing-zone-faq/","title":"FAQs","text":""},{"location":"deployment/landing-zone/landing-zone-faq/#how-long-does-landing-zone-take-to-deploy","title":"How long does landing zone take to deploy?","text":"<p>Deployment time depends on the options you select in your configuration. It varies from around five minutes to 40 minutes, depending on the configuration selected.</p>"},{"location":"deployment/landing-zone/landing-zone-faq/#why-does-the-mission-enclave-landing-zone-starter-implementation-require-permission-at-tenant-root-scope","title":"Why does the Mission Enclave Landing Zone starter implementation require permission at tenant root '/' scope?","text":"<p>Management group creation, subscription creation, and placing subscriptions into management groups are APIs that operate at the tenant root \"<code>/</code>\" scope.</p> <p>To establish the management group hierarchy and create subscriptions and place them into the defined management groups, the initial deployment must be invoked at the tenant root \"<code>/</code>\" scope. Once you deploy enterprise-scale architecture, you can remove the owner permission from the tenant root \"<code>/</code>\" scope. The user deploying the enterprise-scale reference implementation is made an owner at the intermediate root management group (for example \"Contoso\").</p> <p>For more information about tenant-level deployments in Azure, see Deploy resources to tenant.</p>"},{"location":"deployment/landing-zone/landing-zone-faq/#how-much-does-a-typical-deployment-cost","title":"How much does a typical deployment cost?","text":"<p>The Mission Enclave Landing Zone starter Terraform module covers many different deployment scenarios, so costs can vary dramatically depending on what options are configured.</p> <p>Some of these costs can come from resources deployed directly by the module. Other costs may be incurred when Azure Policy performs remediation of non-compliant resources within scope of the deployment.</p> <p>If you are looking to reduce costs as part of evaluating the module, we recommend assessing whether your evaluation needs to implement the following common resources which can incur the highest costs include:</p> <ul> <li>Microsoft Defender for Cloud</li> <li>Azure DDoS Network Protection</li> <li>Azure Firewall</li> </ul> <p>Although our starters try to minimize the use of these resources and to use lower cost SKUs where applicable, please take care to ensure you understand which resources are being deployed and the associated costs these will incur.</p> <p>In large environments, costs can also increase when large volumes of data are being stored in the Log Analytics workspace.</p>"},{"location":"deployment/landing-zone/landing-zone-github/","title":"Deploy a Mission Enclave Landing Zone using GitHub Actions","text":"<p>This document provides guidance on how to deploy a Mission Enclave Landing Zone starterusing GitHub Actions.</p> <p>Learn more about Azure NoOps GitHub Actions here.</p>"},{"location":"deployment/landing-zone/landing-zone-github/#github-deployment","title":"GitHub Deployment","text":"<p>To deploy the Mission Enclave Landing Zone, we'll setup a GitHub Actions CI/CD workflow that will build and deploy our application whenever we push new commits to the main branch of our repository.</p>"},{"location":"deployment/landing-zone/landing-zone-github/#configure-remote-state-storage-account","title":"Configure remote state storage account","text":"<p>Before you use Azure Storage as a backend for the state file, you must create a storage account.</p> <p>Reference the Remote State Storage directory for the Terraform configuration to create the storage account and container.</p>"},{"location":"deployment/landing-zone/landing-zone-github/#using-github-dependencies-action","title":"Using GitHub Dependencies Action","text":"<p>Run the following action deploy_dependencies.yml to create the storage account and container.</p>"},{"location":"deployment/landing-zone/landing-zone-github/#setting-up-github-actions-for-deployment","title":"Setting Up GitHub Actions for deployment","text":"<p>To set up GitHub Actions for deployment, we'll need to use the new workflow file in our repository. This file will contain the instructions for our CI/CD pipeline.</p>"},{"location":"deployment/landing-zone/landing-zone-github/#creating-an-azure-service-principal","title":"Creating an Azure Service Principal","text":"<p>In order to deploy our Mission Enclave Landing Zone, we'll need to create an Azure Service Principal. This is an identity that can be used to authenticate to Azure, and that can be granted access to specific resources.</p> <p>To create a new Service Principal, run the following commands:</p> <pre><code>    SUBSCRIPTION_ID=$(\n      az account show \\\n        --query id \\\n        --output tsv \\\n        --only-show-errors\n    )\n\n    AZURE_CREDENTIALS=$(\n      MSYS_NO_PATHCONV=1 az ad sp create-for-rbac \\\n        --name=\"sp-${PROJECT}-${UNIQUE_IDENTIFIER}\" \\\n        --role=\"owner\" \\\n        --scopes=\"/subscriptions/$SUBSCRIPTION_ID\" \\\n        --sdk-auth \\\n        --only-show-errors\n    )\n\n    echo $AZURE_CREDENTIALS\n    echo $SUBSCRIPTION_ID     \n</code></pre> <p>Use this service principal to set up the following secrets in your GitHub repository:</p> <ul> <li><code>AZURE_CREDENTIALS</code>: The JSON output of the <code>az ad sp create-for-rbac</code> command.</li> <li><code>AZURE_SUBSCRIPTION_ID</code>: The subscription ID of your Azure subscription.</li> </ul>"},{"location":"deployment/landing-zone/landing-zone-github/#setup-secrets","title":"Setup secrets","text":"<p>We are using different secrets in our workflow: Secrets in GitHub are encrypted and allow you to store sensitive information such as passwords or API keys, and use them in your workflows using the ${{ secrets.MY_SECRET }} syntax.</p> <p>In GitHub, secrets can be defined at three different levels:</p> <ul> <li> <p>Repository level: secrets defined at the repository level are available in all workflows of the repository.</p> </li> <li> <p>Organization level: secrets defined at the organization level are available in all workflows of the GitHub organization.</p> </li> <li> <p>Environment level: secrets defined at the environment level are available only in workflows referencing the specified environment.</p> </li> </ul> <p>For this refernence implementation, we\u2019ll define our secrets at the repository level. To do so, go to the Settings tab of your repository, and select Secrets then Actions under it, in the left menu.</p> <p>Note   The GitHub Actions pipelines are currently configured to deploy the Terraform <code>Mission Enclave Landing Zone</code> deployments located in the infrastructure/terraform.</p> <p>GitHub Actions pipelines are located in the <code>.github/workflows</code> directory of the repository.</p> <ol> <li> <p>Configure your GitHub Actions Secrets</p> <ul> <li>In your forked repository, navigate to <code>Settings &gt; Secrets and variables &gt; Actions</code>.</li> <li>Create the following secrets:</li> </ul> Secret Name Description Example Value <code>AZURE_AD_CLIENT_ID</code> GUID value for the Client ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_hub</code> [Required] GUID value for the Hub Subscription ID to deploy resources to <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_identity</code> [Optional] GUID value for the Identity Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_operations</code> [Optional] GUID value for the Operations Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_devsecops</code> [Optional] GUID value for the DevSecOps Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_TENANT_ID</code> [Optional] GUID value for the Tenant ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_CLIENT_SECRET</code> Secret value for the Service Principal to authenticate with <code>asdf1234567</code> <code>AZURE_TF_STATE_RESOURCE_GROUP_NAME</code> [Optional] For Terraform only: override value to configure the remote state resource group name <code>rg-terraform-state</code> <code>AZURE_TF_STATE_STORAGE_ACCOUNT_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage account name <code>tfstate</code> <code>AZURE_TF_STATE_STORAGE_CONTAINER_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage container name <code>tfstate</code> <code>VM_PASSWORD</code> Password for the VM <code>P@ssw0rd!</code> <code>ARM_ENVIRONMENT</code> The Azure environment to deploy to <code>public</code> or <code>usgovernment</code> </li> </ol> <p>Note: You can also use the https://cli.github.com/GitHub CLI to define your secrets, using the command <code>gh secret set &lt;MY_SECRET&gt; -b\"&lt;SECRET_VALUE&gt;\" -R &lt;repository_url&gt;</code></p>"},{"location":"deployment/landing-zone/landing-zone-github/#running-the-workflow","title":"Running the workflow","text":"<p>Once you have set up your secrets and modified the workflow files, you can now push your changes to the main branch of your repository. This will trigger the workflow and start the deployment process.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/","title":"Deploy a Mission Enclave Landing Zone manually","text":"<p>This document provides guidance on how to deploy a Mission Enclave Landing Zone starter using manual methods.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have met the following requirements:</p> <ul> <li> <p>Azure Subscription: You need an Azure subscription to create resources in Azure. If you don't have one, you can create a free account.</p> </li> <li> <p>Azure CLI or Azure PowerShell: You need either Azure CLI or Azure PowerShell installed and configured to interact with your Azure account. You can download them from here and here respectively.</p> </li> <li> <p>Terraform: You will need Terraform installed to deploy the infrastructure. You can download Terraform from here.</p> </li> <li> <p>Knowledge of Azure Landing Zones: This project involves deploying and managing Azure Landing Zones resources. Familiarity with Azure Landing Zones and its concepts is recommended.</p> </li> </ul>"},{"location":"deployment/landing-zone/landing-zone-manual/#quickstart","title":"Quickstart","text":"<p>Below is an example of a Terraform deployment that uses all the defaults in the TFVARS folder to deploy the landing zone to one subscription.</p> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the landing zone without having to deploy the remote state storage account first.</p> <pre><code>cd infrastructure/terraform\nterraform init\nterraform plan --out anoa.dev.plan --var-file tfvars/parameters.tfvars --var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;vm password&gt;&gt;\" # supply some parameters, approve, copy the output values\nterraform apply anoa.dev.plan\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-manual/#manual-deployment","title":"Manual Deployment","text":"<p>Mission Enclave Landing Zone can be deployed with command-line tools provided with the Terraform CLI in PowerShell.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#command-line-deployment-using-the-terraform-cli-in-powershell","title":"Command Line Deployment Using the Terraform CLI in PowerShell","text":"<p>Use the Terraform CLI command <code>terraform</code> to deploy Mission Enclave Landing Zone across one or many subscriptions. The following sections describe how to deploy Mission Enclave Landing Zone using the Terraform CLI in PowerShell.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#single-subscription-deployment","title":"Single Subscription Deployment","text":"<p>To deploy Mission Enclave Landing Zone into a single subscription, you must first login to Azure.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#login-to-azure-cli","title":"Login to Azure CLI","text":"<p>Log in using the Azure CLI.</p> <pre><code># AZ CLI\naz cloud set -n AzureCloud\naz login\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-manual/#set-the-environment","title":"Set the Environment","text":"<pre><code># AZ CLI\n$env:ARM_ENVIRONMENT = \"public\"\n</code></pre> <p>NOTE: If you are deploying to Azure US Government, set the environment to <code>usgovernment</code>.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#terraform-init","title":"Terraform init","text":"<p>Before provisioning any Azure resources with Terraform you must initialize a working directory.</p> <ol> <li> <p>Navigate to the directory in the repository that contains the Mission Enclave Landing Zone Starter Terraform modules and configuration files:</p> <pre><code>cd infrastructure/terraform\n</code></pre> </li> </ol> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the landing zone without having to deploy the remote state storage account first. For more information on remote state, see the Remote State documentation.</p> <ol> <li> <p>Execute <code>terraform init</code></p> <pre><code>terraform init\n</code></pre> </li> </ol>"},{"location":"deployment/landing-zone/landing-zone-manual/#terraform-plan","title":"Terraform Plan","text":"<p>After initializing the directory, use <code>terraform plan</code> to provision the resources plan described in <code>infrastructure/terraform</code>.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform plan</code> with the <code>--var-file</code> parameter to specify the path to the <code>parameters.tfvars</code> file:</p> <pre><code>terraform apply --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\"\n</code></pre> </li> <li> <p>You'll be prompted for a Hub subscription ID and VM Password.</p> <p>Supply the subscription ID you want to use for the Hub network:</p> <pre><code>&gt; terraform plan\nvar.subscription_id_hub\nIf specified, identifies the Platform subscription for \"Hub\" for resource deployment and correct placement in the Management Group hierarchy.\n\nEnter a value:\n\nSupply the VM Admin Password you want to use for the Bastion VM:\n\n```plaintext\nvar.vm_admin_password\nThe password for the administrator account for the Bastion VM.\n\nEnter a value:\n</code></pre> </li> </ol> <p>NOTE: If you want to skip the prompts, you can supply the values on the command line using the <code>--var</code> parameter. For more information, see the Terraform CLI documentation.</p>"},{"location":"deployment/landing-zone/landing-zone-manual/#terraform-apply","title":"Terraform Apply","text":"<p>Now run <code>terraform apply</code>, by default, Terraform will inspect the state of your environment to determine what resource creation, modification, or deletion needs to occur from the <code>terraform plan</code> using the output plan and then prompt you for your approval before taking action.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform apply</code> with the <code>anoa.de.plan</code> parameter:</p> <pre><code>terraform apply \"anoa.dev.plan\"\n</code></pre> </li> </ol> <p>NOTE: Since you are using a output plan file, you will not be prompted for approval to deploy.</p> <ol> <li>The deployment will begin. These commands will deploy all of the resources that make up Mission Enclave LZ. Deployment could take up to 45 minutes.</li> </ol>"},{"location":"deployment/landing-zone/landing-zone-manual/#apply-complete","title":"Apply Complete","text":"<p>When it's complete, you'll see some output values that will be necessary if you want to stand up new workload spoke, or add-on:</p> <pre><code>Apply complete! Resources: 166 added, 0 changed, 0 destroyed.\n\nExample Outputs:\n\nhub_virtual_network_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/anoa-hub-networking-rg/providers/Microsoft.Network/virtualNetworks/anoa-hub-vnet\nhub_virtual_network_name = \"anoa-hub-core-dev-vnet\"\nfirewall_private_ip = \"0.0.0.0\"\nlog_analytics_workspace_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/anoa-hub-networking-rg/providers/microsoft.operationalinsights/workspaces/anoa-hub-logs-dev-law\n...\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-manual/#deploying-to-other-clouds","title":"Deploying to Other Clouds","text":"<p>When deploying to another cloud, like Azure US Government, first set the cloud and log in.</p> <p>Logging into <code>AzureUSGovernment</code>:</p> <pre><code># AZ CLI\naz cloud set -n AzureUsGovernment\naz login\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-manual/#deploying-to-multiple-subscriptions","title":"Deploying to Multiple Subscriptions","text":"<p>To deploy Mission Enclave Landing Zone into multiple subscriptions, follow the same steps as deploying to Single Subscription. The only difference is that you will need to add the subscription ID for each subscription you are deploying to on the <code>terraform plan</code>.</p> <p>Example:</p> <pre><code>&gt; terraform plan --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\" -var \"subscription_id_hub=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_identity=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_operations=\"\\00000000-0000-0000-0000-000000000000\" -var \"subscription_id_devsecops=00000000-0000-0000-0000-000000000000\" -var \"vm_admin_password=Password1234!\"\n</code></pre>"},{"location":"deployment/landing-zone/landing-zone-manual/#cleanup","title":"Cleanup","text":"<p>If you want to delete an Mission Enclave Landing Zone deployment you can use <code>terraform destroy</code>. If you have deployed more than one Terraform template, e.g., if you have deployed <code>Landing Zone</code> and then <code>Add-on</code>, run the <code>terraform destroy</code> commands in the reverse order that you applied them. For example:</p> <pre><code># Deploy core MLZ resources\ncd infrastructure/terraform\nterraform apply\n\n# Destroy core MLZ resources\ncd infrastructure/terraform\nterraform destroy\n</code></pre> <p>Running <code>terraform destroy</code> for <code>infrastructure/terraform</code> looks like this:</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> and <code>terraform apply</code> execute <code>terraform destroy</code>:</p> <pre><code>terraform destroy\n</code></pre> </li> <li> <p>You'll be prompted for a subscription ID. Supply the subscription ID you want to used previously:</p> <pre><code>&gt; terraform destroy\nvar.hub_subid\nSubscription ID for the deployment\n\nEnter a value: \n</code></pre> </li> <li> <p>Terraform will then inspect the state of your Azure environment and compare it with what is described in Terraform state. Eventually, you'll be prompted for your approval to destroy resources. Supply <code>yes</code>:</p> <pre><code>Do you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\nEnter a value: yes\n</code></pre> </li> </ol> <p>This command will attempt to remove all the resources that were created by <code>terraform apply</code> and could take up to 45 minutes.</p>"},{"location":"deployment/landing-zone/landing-zone-mg/","title":"Mission Enclave Management Groups","text":""},{"location":"deployment/landing-zone/landing-zone-planning/","title":"Planning","text":""},{"location":"deployment/landing-zone/landing-zone-planning/#initial-considerations","title":"Initial considerations","text":"<p>The Mission Enclave Landing Zone Starter Terraform module is designed to be used as a starting point for deploying a landing zone. It is not intended to be used as a complete solution, but rather as a starting point that can be customized to meet specific requirements.</p> <p>Before getting started with this module, please take note of the following considerations:</p> <ol> <li> <p>This module requires a minimum <code>azurerm</code> provider version of <code>&gt; 3.36.0</code>.</p> </li> <li> <p>This module requires a minimum Terraform version <code>1.3.1</code>.</p> <p>NOTE: New releases of the module may contain features which require the minimum supported versions to be increased, but changes will be clearly documented in the release notes, user guide, and readme.</p> </li> </ol>"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-landing-zone-remote-state-storage-account","title":"Mission Enclave Landing Zone Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/landing-zone/landing-zone-planning/#deployment-planning","title":"Deployment Planning","text":"<p>If you want to change the default values, you can do so by editing the parameters.tfvars file. The following sections describe the parameters that can be changed.</p>"},{"location":"deployment/landing-zone/landing-zone-planning/#one-subscription-or-multiple","title":"One Subscription or Multiple","text":"<p>Mission Enclave Landing Zone starter can deploy to a single subscription or multiple subscriptions. A test and evaluation deployment may deploy everything to a single subscription, and a production deployment may place each tier into its own subscription.</p> <p>The optional parameters related to subscriptions are below. At least one subscription is required.</p> Parameter name Default Value Description <code>subscription_id_hub</code> '' Subscription ID for the Hub deployment <code>subscription_id_identity</code> value of hub_subid Subscription ID for identity tier <code>subscription_id_operations</code> value of hub_subid Subscription ID for operations tier <code>subscription_id_devsecops</code> value of hub_subid Subscription ID for devsecops tier"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-landing-zone-global-configuration","title":"Mission Enclave Landing Zone Global Configuration","text":"<p>The following parameters affect the \"01 Global Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>org_name</code> anoa This Prefix will be used on most deployed resources.  10 Characters max. <code>deploy_environment</code> dev This Prefix will be used on most deployed resources.  10 Characters max. <code>environment</code> public The environment to deploy to. <code>default_location</code> eastus The default region to deploy to. <code>enable_resource_locks</code> false Enable locks on resources. true , false <code>enable_traffic_analytics</code> true Enable NSG Flow Logs. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-management-groups","title":"Mission Enclave Management Groups","text":"<p>The following parameters affect the \"02 Management Groups Configuration\" To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>enable_management_groups</code> true Enable management groups for this subscription <code>root_management_group_id</code> anoa The root management group id for this subscription <code>root_management_group_display_name</code> anoa The root management group display name for this subscription <p>To modify the management group structure, go to the locals.tf file and modify the 'management_groups' section. The 'root_management_group_id' is used for the top level groups.</p>"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-management-budgets","title":"Mission Enclave Management Budgets","text":"<p>The following parameter effects budgets. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>enable_management_groups_budgets</code> false enable budgets for management groups <code>budget_contact_emails</code> [\"anoa@contoso.com\"] email addresses to send alerts to for this subscription <code>budget_amount</code> 100 budget amount <code>budget_start_date</code> 2023-09-01T00:00:00Z budget start date. format: YYYY-MM-DDTHH:MM:SSZ <code>budget_end_date</code> 2023-09-01T00:00:00Z budget end date. format: YYYY-MM-DDTHH:MM:SSZ"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-management-roles","title":"Mission Enclave Management Roles","text":"<p>The following parameter effects custom roles. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>deploy_custom_roles</code> true deploy custom roles <p>To modify the roles structure, go to the locals.tf file and modify the 'custom_role_definitions' section.</p>"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-management-hub-virtual-network","title":"Mission Enclave - Management Hub Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Group for Management Hub Networking (main.tf)</li> <li>Management Hub Network (main.tf)</li> <li>Management Hub Subnets (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Hub Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>NOTE: IP address ranges are in CIDR notation. For more information, see Understanding IP Addressing.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>hub_vnet_address_space</code> [\"10.0.128.0/23\"] The CIDR Virtual Network Address Prefix for the Hub Virtual Network. <code>fw_client_snet_address_prefixes</code> [\"10.0.128.0/26\"] The CIDR Subnet Address Prefix for the Azure Firewall Subnet. It must be in the Hub Virtual Network space. It must be /26. <code>ampls_subnet_address_prefixes</code> [\"10.0.131.64/27\"] The CIDR Subnet Address Prefix for the Azure Monitor Private Link Subnet. It must be in the Hub Virtual Network space. It must be /27. <code>fw_management_snet_address_prefixes</code> [\"10.0.128.64/26\"] The CIDR Subnet Address Prefix for the Azure Firewall Management Subnet. It must be in the Hub Virtual Network space. It must be /26. <code>gateway_vnet_address_space</code> [\"10.0.128.0/27\"] The CIDR Subnet Address Prefix for the Gateway Subnet. It must be in the Hub Virtual Network space. It must be /27. This is the subnet that will be used for the VPN Gateway. Optional, if you do not want to deploy a VPN Gateway, remove this subnet from the list. <code>hub_subnets</code> array The subnets to create in the hub virtual network."},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-management-hub-operational-logging","title":"Mission Enclave - Management Hub Operational Logging","text":"<p>The following will be created:</p> <ul> <li>Log Analytics (main.tf)</li> <li>Log Solutions (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Operational Logging\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>log_analytics_workspace_sku</code> \"PerGB2018\" The SKU for the Log Analytics Workspace. PerGB2018 , Standalone , PerNode , Free , CapacityReservation <code>log_analytics_logs_retention_in_days</code> 30 The number of days to retain logs in the Log Analytics Workspace. 30 , 60 , 90 , 120 , 150 , 180 , 365 , 730 , 1827 , 3653 <code>enable_azure_activity_log</code> true Enable Azure Activity Log. true , false <code>enable_vm_insights</code> true Enable Azure Monitor for VMs. true , false <code>enable_azure_security_center</code> true Enable Azure Security Center. true , false <code>enable_container_insights</code> true Enable Azure Monitor for Containers. true , false <code>enable_key_vault_analytics</code> true Enable Azure Monitor for Key Vault. true , false <code>enable_service_map</code> true Enable Azure Monitor for Service Map. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-azure-firewall-resource","title":"Mission Enclave - Azure Firewall Resource","text":"<p>By default, Mission Enclave Landing Zone Starter deploys Azure Firewall Premium. Not all regions support Azure Firewall Premium. Check here to see if the region you're deploying to supports Azure Firewall Premium. If necessary you can set a different firewall SKU or location.</p> <p>The following will be created:</p> <ul> <li>Azure Firewall (main.tf)</li> <li>Required Firewall rules (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Hub Firewall\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_firewall</code> true Enable Azure Firewall. true , false <code>enable_forced_tunneling</code> true Enable forced tunneling. true , false <code>firewall_zones</code> array The availability zones to deploy the firewall to. 1 , 2 , 3 <code>firewall_network_rules</code> array The network rules to create in the firewall. <code>firewall_application_rules</code> array The application rules to create in the firewall. <code>firewall_nat_rules</code> array The NAT rules to create in the firewall."},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-bastionprivate-dns-zones","title":"Mission Enclave - Bastion/Private DNS Zones","text":"<p>If you want to remotely access the network and the resources you've deployed, you can use Azure Bastion to remotely access virtual machines within the network without exposing them via Public IP Addresses.</p> <p>Deploy a Linux or Windows virtual machine as jumpboxes into the network without a Public IP Address using Azure Bastion Host by providing values for these parameters below.</p> <p>The following will be created:</p> <ul> <li>Azure Bastion (main.tf)</li> <li>Private DNS Zones (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Bastion/Private DNS Zones\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_bastion_host</code> true Enable Azure Bastion. true , false <code>azure_bastion_host_sku</code> \"Standard\" The SKU for the Azure Bastion Host. Standard , Premium <code>azure_bastion_subnet_address_prefix</code> [\"10.0.128.192/26\"] The CIDR Subnet Address Prefix for the Azure Bastion Subnet. It must be in the Hub Virtual Network space. It must be /27. This is the subnet that will be used for the Azure Bastion Host. Optional, if you do not want to deploy Azure Bastion, remove this subnet from the list. <code>hub_private_dns_zones</code> array The private DNS zones to create in the hub virtual network."},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-identity-management-spoke-virtual-network","title":"Mission Enclave - Identity Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Identity Spoke Networking</li> <li>Spoke Networks (Identity)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Identity Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>id_vnet_address_space</code> [\"10.0.130.0/24\"] The CIDR Virtual Network Address Prefix for the Identity Virtual Network. <code>id_subnets</code> array The subnets to create in the identity virtual network. <code>id_private_dns_zones</code> array The private DNS zones to create in the identity virtual network. <code>enable_forced_tunneling_on_id_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-operations-management-spoke-virtual-network","title":"Mission Enclave - Operations Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Operations Spoke Networking</li> <li>Spoke Networks (Operations)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Operations Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>ops_vnet_address_space</code> [\"10.0.131.0/24\"] The CIDR Virtual Network Address Prefix for the Operations Virtual Network. <code>ops_subnets</code> array The subnets to create in the operations virtual network. <code>ops_private_dns_zones</code> array The private DNS zones to create in the operations virtual network. <code>enable_forced_tunneling_on_ops_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-security-management-spoke-virtual-network","title":"Mission Enclave - Security Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Security Spoke Networking</li> <li>Spoke Networks (Security)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Security Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>sec_vnet_address_space</code> [\"10.0.133.0/24\"] The CIDR Virtual Network Address Prefix for the Operations Virtual Network. <code>sec_subnets</code> array The subnets to create in the operations virtual network. <code>sec_private_dns_zones</code> array The private DNS zones to create in the operations virtual network. <code>enable_forced_tunneling_on_sec_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-devsecops-management-spoke-virtual-network","title":"Mission Enclave - DevSecOps Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for DevSecOps Spoke Networking</li> <li>Spoke Networks (DevSecOps)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"DevSecOps Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>devsecops_vnet_address_space</code> [\"10.0.132.0/24\"] The CIDR Virtual Network Address Prefix for the DevSecOps Virtual Network. <code>devsecops_subnets</code> array The subnets to create in the devsecops virtual network. <code>devsecops_private_dns_zones</code> array The private DNS zones to create in the devsecops virtual network. <code>enable_forced_tunneling_on_devsecops_route_table</code> true Enable forced tunneling on the route table. true , false <code>use_remote_spoke_gateway</code> false Use a remote spoke gateway. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-devsecops-management-spoke-components","title":"Mission Enclave - DevSecOps Management Spoke Components","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for DevSecOps Spoke Components</li> <li>Spoke Components (DevSecOps)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"DevSecOps Management Spoke Components\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>NOTE: Key Vault and Bastion Jumpbox are not deployed by default. To deploy them, set the <code>enable_devsecops_resources</code> variable to <code>true</code>.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_devsecops_resources</code> true Enable DevSecOps resources. true , false <p>Example Key Vault Configuration:</p> Parameter name Default Value Description Possible Values <code>enabled_for_deployment</code> true Enable DevSecOps resources for deployment. true , false <code>enabled_for_disk_encryption</code> true Enable DevSecOps resources for disk encryption. true , false <code>enabled_for_template_deployment</code> true Enable DevSecOps resources for template deployment. true , false <code>rbac_authorization_enabled</code> true Enable RBAC authorization. true , false <code>enable_key_vault_private_endpoint</code> true Enable Key Vault private endpoint. true , false <code>admin_group_name</code> \"DevSecOps Admins\" The name of the DevSecOps Admins group for use with Key Vault. 1-64 characters <p>Example Bastion JumpBox Configuration:</p> Parameter name Default Value Description Possible Values <code>windows_distribution_name</code> \"windows2019dc\" The Windows distribution name. View Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/cli-ps-findimage \"windows2019dc\" , \"windows2019datacenter\" <code>virtual_machine_size</code> \"Standard_D2s_v3\" The size of the virtual machine. View Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes \"Standard_D2s_v3\" , \"Standard_D4s_v3\" <code>vm_admin_username</code> \"anoaadmin\" The username for the administrator account for the Bastion VM. 1-20 characters <code>vm_admin_password</code> \"Password1234!\" The password for the administrator account for the Bastion VM. This is a secret and used with GitHub Actions. If used for testing, it should be changed after testing. 12-123 characters <code>nsg_inbound_rules</code> array The inbound rules to create in the NSG for the Bastion VM. \"3389\" , \"5986\" <code>data_disks</code> array The data disks to create for the Bastion VM. \"P30\" , \"P40\" , \"P50\" <code>deploy_log_analytics_agent</code> true Deploy the Log Analytics agent for the Bastion VM. true , false"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-ampls-configuration","title":"Mission Enclave - AMPLS Configuration","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for AMPLS Configuration</li> <li>AMPLS Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"AMPLS Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_ampls</code> true Enable AMPLS Configuration. true , false <code>ampls_subnet_address_prefixes</code> [\"10.0.134.0/27\"] The CIDR Subnet Address Prefix for the Azure Monitor Private Link Subnet. It must be in the Operations Virtual Network space. It must be /27."},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-microsoft-defender-for-cloud-configuration","title":"Mission Enclave - Microsoft Defender for Cloud Configuration","text":"<p>By default Microsoft Defender for Cloud offers a free set of monitoring capabilities that are enabled via an Azure policy when you first set up a subscription and view the Microsoft Defender for Cloud portal blade.</p> <p>Microsoft Defender for Cloud offers a standard/defender sku which enables a greater depth of awareness including more recomendations and threat analytics. You can enable this higher depth level of security in Mission Enclave Landing Zone Starter by setting the parameter deployDefender during deployment. In addition you can include the security_center_contact_email parameter to set a contact email for alerts.</p> <p>The following will be created:</p> <ul> <li>Microsoft Defender for Cloud Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Microsoft Defender for Cloud Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_defender_for_cloud</code> true Enable Microsoft Defender for Cloud Configuration. true , false <code>security_center_contact_email</code> \"\" The email address to send alerts to for this subscription. 1-64 characters <code>security_center_contact_phone</code> \"\" The phone number to send alerts to for this subscription. 1-64 characters <code>security_center_alert_notifications</code> true The alert notifications to send for this subscription. true , false <code>security_center_alerts_to_admins</code> true Send alerts to admins. true , false <code>security_center_pricing_tier</code> \"Standard\" The pricing tier for Microsoft Defender for Cloud. Free , Standard <code>security_center_pricing_resource_types</code> [\"KeyVaults\", \"StorageAccounts\", \"VirtualMachines\"] The resource types to monitor with Microsoft Defender for Cloud. \"VirtualMachines\", \"SQLServers\", \"KubernetesServices\", \"AppServices\", \"StorageAccounts\", \"KeyVaults\", \"CosmosDBs\", \"PostgreSQLServers\", \"MariaDBServers\", \"MySQLServers\", \"RedisCaches\", \"EventHubs\", \"ServiceBusNamespaces\", \"IoTHubs\", \"LogicApps\", \"APIManagementServices\", \"AppServiceEnvironments\", \"AzureFunctions\", \"ContainerRegistries\", \"ContainerInstances\", \"ContainerServices\", \"ContainerGroups\" <p>The Defender plan for Microsoft Defender for Cloud is enabled by default in the following Azure Environments: AzureCloud. To enable this for other Azure Cloud environments, this will need to executed manually. Documentation on how to do this can be found here.</p> <p>Learn more about Microsoft Defender for Cloud pricing.</p>"},{"location":"deployment/landing-zone/landing-zone-planning/#mission-enclave-azure-service-health-configuration","title":"Mission Enclave - Azure Service Health Configuration","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Service Health Configuration</li> <li>Service Health Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Azure Service Health Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_service_health_monitoring</code> true Enable Service Health Configuration. true <code>action_group_short_name</code> \"anoa\" The short name for the action group. 1-12 characters"},{"location":"deployment/landing-zone/landing-zone/","title":"Mission Enclave Landing Zone Starter","text":"<p>The Mission Enclave Landing Zone Starter Composition Terraform module provides an opinionated approach for deploying and managing the core platform capabilities of Azure landing zones architecture using Terraform, with a focus on the central resource hierarchy.</p>"},{"location":"deployment/landing-zone/landing-zone/#architecture","title":"Architecture","text":""},{"location":"deployment/landing-zone/landing-zone/#design-areas","title":"Design areas","text":"<p>The Mission Enclave Landing Zone Starter Terraform module is designed to address the following areas:</p> <p>Resource organization</p> <ul> <li>Create the Management Group resource hierarchy</li> <li>Assign Subscriptions to Management Groups</li> <li>Budgets and Cost Management</li> </ul> <p>Identity and access management</p> <ul> <li>Create custom Role Assignments and Role Definitions</li> </ul> <p>Management</p> <ul> <li>Create a central Log Analytics workspace and Automation Account</li> <li>Link Log Analytics workspace to the Automation Account</li> <li>Deploy recommended Log Analytics Solutions</li> <li>Azure Monitor Link Scopes</li> </ul> <p>Network topology and connectivity</p> <ul> <li>Create a centralized hub network</li> <li>Traditional Azure networking topology (hub and spoke)</li> <li>Secure network design that follow the principles of SCCA/Zero Trust Network</li> <li>Azure Firewall</li> <li>DDoS Network Protection</li> <li>Centrally managed DNS zones</li> </ul>"},{"location":"deployment/landing-zone/landing_zone_networking/","title":"Networking","text":"<p>This repository has carefully planned default address prefixes configured throughout the virtual networks in Mission Enclave Landing Zone starter and the add-ons to prevent deployment conflicts. We exepect most customers to define custom address prefixes. However, if you deploy everything \"as-is\", there are no overlapping address spaces and the networks will deploy without an error. Here are the default address prefixes:</p>"},{"location":"deployment/landing-zone/landing_zone_networking/#super-network","title":"Super Network","text":"<p>10.0.128.0/18</p>"},{"location":"deployment/landing-zone/landing_zone_networking/#virtual-networks","title":"Virtual Networks","text":"Solution Network Address Prefix MELZS Hub 10.0.128.0/23 MELZS Identity 10.0.130.0/24 MELZS Operations 10.0.131.0/24 MELZS DevSecOps 10.0.132.0/24 MELZS Security 10.0.133.0/24 MELZS AMPLS 10.0.134.0/27 Add-On Workloads 10.0.135.0/24"},{"location":"deployment/landing-zone-aks/landing-zone-aks/","title":"Configuration with Azure Kubernetes Service","text":"<p>This document provides guidance on how to deploy/configure a Azure Kubernetes Service being used with Mission Enclave Landing Zone Starter with Azure Kubernetes Service.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-aks/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have met the following requirements:</p>"},{"location":"deployment/landing-zone-aks/landing-zone-cleanup/","title":"Cleanup","text":"<p>Remember to destroy resources that are not in use. If you want to delete an Mission Enclave Landing Zone Starter with Azure Kubernetes Service deployment you can use <code>terraform destroy</code>. If you have deployed more than one Terraform template, e.g., if you have deployed <code>landing zone</code> and then <code>addon-workload</code>, run the <code>terraform destroy</code> commands in the reverse order that you applied them.</p> <p>Delete in the specified bash below.</p> <p>Ensure the following state management environment variables have been defined:</p> <ul> <li>STORAGEACCOUNTNAME = 'xxxxx'</li> <li>CONTAINERNAME      = 'xxxxx'</li> <li>TFSTATE_RG         = 'xxxxx'</li> </ul> <pre><code># Deploy core MELZS resources\n$STORAGEACCOUNTNAME='xxxxx'\n$CONTAINERNAME='xxxxx'\n$TFSTATE_RG='xxxxx'\n\nterraform init --backend-config=\"resource_group_name=$TFSTATE_RG\" --backend-config=\"storage_account_name=$STORAGEACCOUNTNAME\" --backend-config=\"container_name=$CONTAINERNAME\"\n\ncd infrastructure/terraform\nterraform apply --out anoa.dev.plan --var-file ../tfvars/parameters.tfvars --var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;password&gt;&gt;\"\n\n# Destroy core MELZS resources\ncd infrastructure/terraform\nterraform plan --destroy -out anoa.dev.plan --var-file ../tfvars/parameters.tfvars -var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;password&gt;&gt;\"\nterraform apply anoa.dev.plan\n</code></pre> <p>This command will attempt to remove all the resources that were created by <code>terraform apply</code> and could take up to 45 minutes.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-cleanup/#misc-tasks","title":"Misc Tasks","text":"<p>The Mission Enclave Landing Zone Starter with Azure Kubernetes Service when destroyed may leave behind some resources that need to be manually deleted. Please check the following resources and delete them if they are not needed.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-cleanup/#diagnostic-settings","title":"Diagnostic Settings","text":"<ul> <li>Delete the diagnostic settings deployed at the subscription level.</li> </ul> <p>WARNING If you deploy and delete Mission Enclave Landing Zone Starter with Azure Kubernetes Service in the same subscription multiple times without deleting the subscription-level diagnostic settings, the sixth deployment will fail. Azure has a limit of five diagnostic settings per subscription. The error will be similar to this: <code>\"The limit of 5 diagnostic settings was reached.\"</code></p> <p>To delete the diagnotic settings in script, use the AZ CLI or PowerShell. An AZ CLI example is below:</p> <pre><code># View diagnostic settings in the current subscription\naz monitor diagnostic-settings subscription list --query value[] --output table\n\n# Delete a diagnostic setting\naz monitor diagnostic-settings subscription delete --name &lt;diagnostic setting name&gt;\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-cleanup/#using-the-portal","title":"Using the Portal","text":"<p>Alternatively, you can delete the diagnostic settings from the Azure Portal. Choose the subscription blade, then Activity log in the left panel. At the top of the Activity log screen click the Diagnostics settings button. From there you can click the Edit setting link and delete the diagnostic setting.</p> <p></p>"},{"location":"deployment/landing-zone-aks/landing-zone-cleanup/#defender-for-cloud","title":"Defender for Cloud","text":"<ul> <li>Delete the Defender for Cloud workspace deployed at the subscription level.</li> </ul> <p>To downgrade the Microsoft Defender for Cloud pricing level in the Azure portal:</p> <ol> <li>Navigate to the Microsoft Defender for Cloud page, then click the \"Environment settings\" tab in the left navigation panel.</li> <li>In the tree/grid select the subscription you want to manage.</li> <li>Click the large box near the top of the page that says \"Enhanced security off\".</li> <li>Click the save button.</li> </ol> <p>To downgrade the Microsoft Defender for Cloud pricing level using the AZ CLI:</p> <pre><code># List the pricing tiers\naz security pricing list -o table --query \"value[].{Name:name, Tier:pricingTier}\"\n\n# Change a pricing tier to the default free tier\naz security pricing create --name \"&lt;name of tier&gt;\" --tier Free\n</code></pre> <p>NOTE The Azure portal allows changing all pricing tiers with a single setting, but the AZ CLI requires each setting to be managed individually.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-faq/","title":"FAQs","text":""},{"location":"deployment/landing-zone-aks/landing-zone-faq/#how-long-does-landing-zone-take-to-deploy","title":"How long does landing zone take to deploy?","text":"<p>Deployment time depends on the options you select in your configuration. It varies from around five minutes to 40 minutes, depending on the configuration selected.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-faq/#why-does-the-mission-enclave-landing-zone-starter-with-azure-kubernetes-service-implementation-require-permission-at-tenant-root-scope","title":"Why does the Mission Enclave Landing Zone Starter with Azure Kubernetes Service implementation require permission at tenant root '/' scope?","text":"<p>Management group creation, subscription creation, and placing subscriptions into management groups are APIs that operate at the tenant root \"<code>/</code>\" scope.</p> <p>To establish the management group hierarchy and create subscriptions and place them into the defined management groups, the initial deployment must be invoked at the tenant root \"<code>/</code>\" scope. Once you deploy enterprise-scale architecture, you can remove the owner permission from the tenant root \"<code>/</code>\" scope. The user deploying the enterprise-scale reference implementation is made an owner at the intermediate root management group (for example \"Contoso\").</p> <p>For more information about tenant-level deployments in Azure, see Deploy resources to tenant.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-faq/#how-much-does-a-typical-deployment-cost","title":"How much does a typical deployment cost?","text":"<p>The Mission Enclave Landing Zone Starter with Azure Kubernetes Service Terraform module covers many different deployment scenarios, so costs can vary dramatically depending on what options are configured.</p> <p>Some of these costs can come from resources deployed directly by the module. Other costs may be incurred when Azure Policy performs remediation of non-compliant resources within scope of the deployment.</p> <p>If you are looking to reduce costs as part of evaluating the module, we recommend assessing whether your evaluation needs to implement the following common resources which can incur the highest costs include:</p> <ul> <li>Microsoft Defender for Cloud</li> <li>Azure DDoS Network Protection</li> <li>Azure Firewall</li> </ul> <p>Although our starters try to minimize the use of these resources and to use lower cost SKUs where applicable, please take care to ensure you understand which resources are being deployed and the associated costs these will incur.</p> <p>In large environments, costs can also increase when large volumes of data are being stored in the Log Analytics workspace.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/","title":"Deploy a Mission Enclave Landing Zone using GitHub Actions","text":"<p>This document provides guidance on how to deploy a Mission Enclave Landing Zone Starter with Azure Kubernetes Serviceusing GitHub Actions.</p> <p>Learn more about Azure NoOps GitHub Actions here.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#github-deployment","title":"GitHub Deployment","text":"<p>To deploy the Mission Enclave Landing Zone, we'll setup a GitHub Actions CI/CD workflow that will build and deploy our application whenever we push new commits to the main branch of our repository.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#configure-remote-state-storage-account","title":"Configure remote state storage account","text":"<p>Before you use Azure Storage as a backend for the state file, you must create a storage account.</p> <p>Reference the Remote State Storage directory for the Terraform configuration to create the storage account and container.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#using-github-dependencies-action","title":"Using GitHub Dependencies Action","text":"<p>Run the following action deploy_dependencies.yml to create the storage account and container.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#setting-up-github-actions-for-deployment","title":"Setting Up GitHub Actions for deployment","text":"<p>To set up GitHub Actions for deployment, we'll need to use the new workflow file in our repository. This file will contain the instructions for our CI/CD pipeline.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#creating-an-azure-service-principal","title":"Creating an Azure Service Principal","text":"<p>In order to deploy our Mission Enclave Landing Zone, we'll need to create an Azure Service Principal. This is an identity that can be used to authenticate to Azure, and that can be granted access to specific resources.</p> <p>To create a new Service Principal, run the following commands:</p> <pre><code>    SUBSCRIPTION_ID=$(\n      az account show \\\n        --query id \\\n        --output tsv \\\n        --only-show-errors\n    )\n\n    AZURE_CREDENTIALS=$(\n      MSYS_NO_PATHCONV=1 az ad sp create-for-rbac \\\n        --name=\"sp-${PROJECT}-${UNIQUE_IDENTIFIER}\" \\\n        --role=\"owner\" \\\n        --scopes=\"/subscriptions/$SUBSCRIPTION_ID\" \\\n        --sdk-auth \\\n        --only-show-errors\n    )\n\n    echo $AZURE_CREDENTIALS\n    echo $SUBSCRIPTION_ID     \n</code></pre> <p>Use this service principal to set up the following secrets in your GitHub repository:</p> <ul> <li><code>AZURE_CREDENTIALS</code>: The JSON output of the <code>az ad sp create-for-rbac</code> command.</li> <li><code>AZURE_SUBSCRIPTION_ID</code>: The subscription ID of your Azure subscription.</li> </ul>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#setup-secrets","title":"Setup secrets","text":"<p>We are using different secrets in our workflow: Secrets in GitHub are encrypted and allow you to store sensitive information such as passwords or API keys, and use them in your workflows using the ${{ secrets.MY_SECRET }} syntax.</p> <p>In GitHub, secrets can be defined at three different levels:</p> <ul> <li> <p>Repository level: secrets defined at the repository level are available in all workflows of the repository.</p> </li> <li> <p>Organization level: secrets defined at the organization level are available in all workflows of the GitHub organization.</p> </li> <li> <p>Environment level: secrets defined at the environment level are available only in workflows referencing the specified environment.</p> </li> </ul> <p>For this refernence implementation, we\u2019ll define our secrets at the repository level. To do so, go to the Settings tab of your repository, and select Secrets then Actions under it, in the left menu.</p> <p>Note   The GitHub Actions pipelines are currently configured to deploy the Terraform <code>Mission Enclave Landing Zone</code> deployments located in the infrastructure/terraform.</p> <p>GitHub Actions pipelines are located in the <code>.github/workflows</code> directory of the repository.</p> <ol> <li> <p>Configure your GitHub Actions Secrets</p> <ul> <li>In your forked repository, navigate to <code>Settings &gt; Secrets and variables &gt; Actions</code>.</li> <li>Create the following secrets:</li> </ul> Secret Name Description Example Value <code>AZURE_AD_CLIENT_ID</code> GUID value for the Client ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_hub</code> [Required] GUID value for the Hub Subscription ID to deploy resources to <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_identity</code> [Optional] GUID value for the Identity Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_operations</code> [Optional] GUID value for the Operations Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_devsecops</code> [Optional] GUID value for the DevSecOps Subscription ID to deploy resources to. This is used in Multi-Subscription deployment <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_TENANT_ID</code> [Optional] GUID value for the Tenant ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_CLIENT_SECRET</code> Secret value for the Service Principal to authenticate with <code>asdf1234567</code> <code>AZURE_TF_STATE_RESOURCE_GROUP_NAME</code> [Optional] For Terraform only: override value to configure the remote state resource group name <code>rg-terraform-state</code> <code>AZURE_TF_STATE_STORAGE_ACCOUNT_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage account name <code>tfstate</code> <code>AZURE_TF_STATE_STORAGE_CONTAINER_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage container name <code>tfstate</code> <code>VM_PASSWORD</code> Password for the VM <code>P@ssw0rd!</code> <code>ARM_ENVIRONMENT</code> The Azure environment to deploy to <code>public</code> or <code>usgovernment</code> </li> </ol> <p>Note: You can also use the https://cli.github.com/GitHub CLI to define your secrets, using the command <code>gh secret set &lt;MY_SECRET&gt; -b\"&lt;SECRET_VALUE&gt;\" -R &lt;repository_url&gt;</code></p>"},{"location":"deployment/landing-zone-aks/landing-zone-github/#running-the-workflow","title":"Running the workflow","text":"<p>Once you have set up your secrets and modified the workflow files, you can now push your changes to the main branch of your repository. This will trigger the workflow and start the deployment process.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/","title":"Deploy a Mission Enclave Landing Zone manually","text":"<p>This document provides guidance on how to deploy a Mission Enclave Landing Zone Starter with Azure Kubernetes Service using manual methods.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have met the following requirements:</p> <ul> <li> <p>Azure Subscription: You need an Azure subscription to create resources in Azure. If you don't have one, you can create a free account.</p> </li> <li> <p>Azure CLI or Azure PowerShell: You need either Azure CLI or Azure PowerShell installed and configured to interact with your Azure account. You can download them from here and here respectively.</p> </li> <li> <p>Terraform: You will need Terraform installed to deploy the infrastructure. You can download Terraform from here.</p> </li> <li> <p>Knowledge of Azure Landing Zones: This project involves deploying and managing Azure Landing Zones resources. Familiarity with Azure Landing Zones and its concepts is recommended.</p> </li> </ul>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#quickstart","title":"Quickstart","text":"<p>Below is an example of a Terraform deployment that uses all the defaults in the TFVARS folder to deploy the landing zone to one subscription.</p> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the landing zone without having to deploy the remote state storage account first.</p> <pre><code>cd infrastructure/terraform\nterraform init\nterraform plan --out anoa.dev.plan --var-file tfvars/parameters.tfvars --var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"vm_admin_password=&lt;&lt;vm password&gt;&gt;\" # supply some parameters, approve, copy the output values\nterraform apply anoa.dev.plan\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#manual-deployment","title":"Manual Deployment","text":"<p>Mission Enclave Landing Zone can be deployed with command-line tools provided with the Terraform CLI in PowerShell.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#command-line-deployment-using-the-terraform-cli-in-powershell","title":"Command Line Deployment Using the Terraform CLI in PowerShell","text":"<p>Use the Terraform CLI command <code>terraform</code> to deploy Mission Enclave Landing Zone across one or many subscriptions. The following sections describe how to deploy Mission Enclave Landing Zone using the Terraform CLI in PowerShell.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#single-subscription-deployment","title":"Single Subscription Deployment","text":"<p>To deploy Mission Enclave Landing Zone into a single subscription, you must first login to Azure.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#login-to-azure-cli","title":"Login to Azure CLI","text":"<p>Log in using the Azure CLI.</p> <pre><code># AZ CLI\naz cloud set -n AzureCloud\naz login\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#set-the-environment","title":"Set the Environment","text":"<pre><code># AZ CLI\n$env:ARM_ENVIRONMENT = \"public\"\n</code></pre> <p>NOTE: If you are deploying to Azure US Government, set the environment to <code>usgovernment</code>.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#terraform-init","title":"Terraform init","text":"<p>Before provisioning any Azure resources with Terraform you must initialize a working directory.</p> <ol> <li> <p>Navigate to the directory in the repository that contains the Mission Enclave Landing Zone Starter with Azure Kubernetes Service Terraform modules and configuration files:</p> <pre><code>cd infrastructure/terraform\n</code></pre> </li> </ol> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the landing zone without having to deploy the remote state storage account first. For more information on remote state, see the Remote State documentation.</p> <ol> <li> <p>Execute <code>terraform init</code></p> <pre><code>terraform init\n</code></pre> </li> </ol>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#terraform-plan","title":"Terraform Plan","text":"<p>After initializing the directory, use <code>terraform plan</code> to provision the resources plan described in <code>infrastructure/terraform</code>.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform plan</code> with the <code>--var-file</code> parameter to specify the path to the <code>parameters.tfvars</code> file:</p> <pre><code>terraform apply --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\"\n</code></pre> </li> <li> <p>You'll be prompted for a Hub subscription ID and VM Password.</p> <p>Supply the subscription ID you want to use for the Hub network:</p> <pre><code>&gt; terraform plan\nvar.subscription_id_hub\nIf specified, identifies the Platform subscription for \"Hub\" for resource deployment and correct placement in the Management Group hierarchy.\n\nEnter a value:\n\nSupply the VM Admin Password you want to use for the Bastion VM:\n\n```plaintext\nvar.vm_admin_password\nThe password for the administrator account for the Bastion VM.\n\nEnter a value:\n</code></pre> </li> </ol> <p>NOTE: If you want to skip the prompts, you can supply the values on the command line using the <code>--var</code> parameter. For more information, see the Terraform CLI documentation.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#terraform-apply","title":"Terraform Apply","text":"<p>Now run <code>terraform apply</code>, by default, Terraform will inspect the state of your environment to determine what resource creation, modification, or deletion needs to occur from the <code>terraform plan</code> using the output plan and then prompt you for your approval before taking action.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform apply</code> with the <code>anoa.de.plan</code> parameter:</p> <pre><code>terraform apply \"anoa.dev.plan\"\n</code></pre> </li> </ol> <p>NOTE: Since you are using a output plan file, you will not be prompted for approval to deploy.</p> <ol> <li>The deployment will begin. These commands will deploy all of the resources that make up Mission Enclave LZ. Deployment could take up to 45 minutes.</li> </ol>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#apply-complete","title":"Apply Complete","text":"<p>When it's complete, you'll see some output values that will be necessary if you want to stand up new workload spoke, or add-on:</p> <pre><code>Apply complete! Resources: 166 added, 0 changed, 0 destroyed.\n\nExample Outputs:\n\nhub_virtual_network_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/anoa-hub-networking-rg/providers/Microsoft.Network/virtualNetworks/anoa-hub-vnet\nhub_virtual_network_name = \"anoa-hub-core-dev-vnet\"\nfirewall_private_ip = \"0.0.0.0\"\nlog_analytics_workspace_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/anoa-hub-networking-rg/providers/microsoft.operationalinsights/workspaces/anoa-hub-logs-dev-law\n...\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#deploying-to-other-clouds","title":"Deploying to Other Clouds","text":"<p>When deploying to another cloud, like Azure US Government, first set the cloud and log in.</p> <p>Logging into <code>AzureUSGovernment</code>:</p> <pre><code># AZ CLI\naz cloud set -n AzureUsGovernment\naz login\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#deploying-to-multiple-subscriptions","title":"Deploying to Multiple Subscriptions","text":"<p>To deploy Mission Enclave Landing Zone into multiple subscriptions, follow the same steps as deploying to Single Subscription. The only difference is that you will need to add the subscription ID for each subscription you are deploying to on the <code>terraform plan</code>.</p> <p>Example:</p> <pre><code>&gt; terraform plan --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\" -var \"subscription_id_hub=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_identity=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_operations=\"\\00000000-0000-0000-0000-000000000000\" -var \"subscription_id_devsecops=00000000-0000-0000-0000-000000000000\" -var \"vm_admin_password=Password1234!\"\n</code></pre>"},{"location":"deployment/landing-zone-aks/landing-zone-manual/#cleanup","title":"Cleanup","text":"<p>If you want to delete an Mission Enclave Landing Zone deployment you can use <code>terraform destroy</code>. If you have deployed more than one Terraform template, e.g., if you have deployed <code>Landing Zone</code> and then <code>Add-on</code>, run the <code>terraform destroy</code> commands in the reverse order that you applied them. For example:</p> <pre><code># Deploy core MLZ resources\ncd infrastructure/terraform\nterraform apply\n\n# Destroy core MLZ resources\ncd infrastructure/terraform\nterraform destroy\n</code></pre> <p>Running <code>terraform destroy</code> for <code>infrastructure/terraform</code> looks like this:</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> and <code>terraform apply</code> execute <code>terraform destroy</code>:</p> <pre><code>terraform destroy\n</code></pre> </li> <li> <p>You'll be prompted for a subscription ID. Supply the subscription ID you want to used previously:</p> <pre><code>&gt; terraform destroy\nvar.hub_subid\nSubscription ID for the deployment\n\nEnter a value: \n</code></pre> </li> <li> <p>Terraform will then inspect the state of your Azure environment and compare it with what is described in Terraform state. Eventually, you'll be prompted for your approval to destroy resources. Supply <code>yes</code>:</p> <pre><code>Do you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\nEnter a value: yes\n</code></pre> </li> </ol> <p>This command will attempt to remove all the resources that were created by <code>terraform apply</code> and could take up to 45 minutes.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-mg/","title":"Mission Enclave Management Groups","text":""},{"location":"deployment/landing-zone-aks/landing-zone-planning/","title":"Planning","text":""},{"location":"deployment/landing-zone-aks/landing-zone-planning/#initial-considerations","title":"Initial considerations","text":"<p>The Mission Enclave Landing Zone Starter with Azure Kubernetes Service Terraform module is designed to be used as a starting point for deploying a landing zone. It is not intended to be used as a complete solution, but rather as a starting point that can be customized to meet specific requirements.</p> <p>Before getting started with this module, please take note of the following considerations:</p> <ol> <li> <p>This module requires a minimum <code>azurerm</code> provider version of <code>&gt; 3.36.0</code>.</p> </li> <li> <p>This module requires a minimum Terraform version <code>1.3.1</code>.</p> <p>NOTE: New releases of the module may contain features which require the minimum supported versions to be increased, but changes will be clearly documented in the release notes, user guide, and readme.</p> </li> </ol>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-landing-zone-remote-state-storage-account","title":"Mission Enclave Landing Zone Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#deployment-planning","title":"Deployment Planning","text":"<p>If you want to change the default values, you can do so by editing the parameters.tfvars file. The following sections describe the parameters that can be changed.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#one-subscription-or-multiple","title":"One Subscription or Multiple","text":"<p>Mission Enclave Landing Zone Starter with Azure Kubernetes Service can deploy to a single subscription or multiple subscriptions. A test and evaluation deployment may deploy everything to a single subscription, and a production deployment may place each tier into its own subscription.</p> <p>The optional parameters related to subscriptions are below. At least one subscription is required.</p> Parameter name Default Value Description <code>subscription_id_hub</code> '' Subscription ID for the Hub deployment <code>subscription_id_identity</code> value of hub_subid Subscription ID for identity tier <code>subscription_id_operations</code> value of hub_subid Subscription ID for operations tier <code>subscription_id_devsecops</code> value of hub_subid Subscription ID for devsecops tier"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-landing-zone-global-configuration","title":"Mission Enclave Landing Zone Global Configuration","text":"<p>The following parameters affect the \"01 Global Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>org_name</code> anoa This Prefix will be used on most deployed resources.  10 Characters max. <code>deploy_environment</code> dev This Prefix will be used on most deployed resources.  10 Characters max. <code>environment</code> public The environment to deploy to. <code>default_location</code> eastus The default region to deploy to. <code>enable_resource_locks</code> false Enable locks on resources. true , false <code>enable_traffic_analytics</code> true Enable NSG Flow Logs. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-management-groups","title":"Mission Enclave Management Groups","text":"<p>The following parameters affect the \"02 Management Groups Configuration\" To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>enable_management_groups</code> true Enable management groups for this subscription <code>root_management_group_id</code> anoa The root management group id for this subscription <code>root_management_group_display_name</code> anoa The root management group display name for this subscription <p>To modify the management group structure, go to the locals.tf file and modify the 'management_groups' section. The 'root_management_group_id' is used for the top level groups.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-management-budgets","title":"Mission Enclave Management Budgets","text":"<p>The following parameter effects budgets. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>enable_management_groups_budgets</code> false enable budgets for management groups <code>budget_contact_emails</code> [\"anoa@contoso.com\"] email addresses to send alerts to for this subscription <code>budget_amount</code> 100 budget amount <code>budget_start_date</code> 2023-09-01T00:00:00Z budget start date. format: YYYY-MM-DDTHH:MM:SSZ <code>budget_end_date</code> 2023-09-01T00:00:00Z budget end date. format: YYYY-MM-DDTHH:MM:SSZ"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-management-roles","title":"Mission Enclave Management Roles","text":"<p>The following parameter effects custom roles. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>deploy_custom_roles</code> true deploy custom roles <p>To modify the roles structure, go to the locals.tf file and modify the 'custom_role_definitions' section.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-management-hub-virtual-network","title":"Mission Enclave - Management Hub Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Group for Management Hub Networking (main.tf)</li> <li>Management Hub Network (main.tf)</li> <li>Management Hub Subnets (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Hub Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>NOTE: IP address ranges are in CIDR notation. For more information, see Understanding IP Addressing.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>hub_vnet_address_space</code> [\"10.0.128.0/23\"] The CIDR Virtual Network Address Prefix for the Hub Virtual Network. <code>fw_client_snet_address_prefixes</code> [\"10.0.128.0/26\"] The CIDR Subnet Address Prefix for the Azure Firewall Subnet. It must be in the Hub Virtual Network space. It must be /26. <code>ampls_subnet_address_prefixes</code> [\"10.0.131.64/27\"] The CIDR Subnet Address Prefix for the Azure Monitor Private Link Subnet. It must be in the Hub Virtual Network space. It must be /27. <code>fw_management_snet_address_prefixes</code> [\"10.0.128.64/26\"] The CIDR Subnet Address Prefix for the Azure Firewall Management Subnet. It must be in the Hub Virtual Network space. It must be /26. <code>gateway_vnet_address_space</code> [\"10.0.128.0/27\"] The CIDR Subnet Address Prefix for the Gateway Subnet. It must be in the Hub Virtual Network space. It must be /27. This is the subnet that will be used for the VPN Gateway. Optional, if you do not want to deploy a VPN Gateway, remove this subnet from the list. <code>hub_subnets</code> array The subnets to create in the hub virtual network."},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-management-hub-operational-logging","title":"Mission Enclave - Management Hub Operational Logging","text":"<p>The following will be created:</p> <ul> <li>Log Analytics (main.tf)</li> <li>Log Solutions (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Operational Logging\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>log_analytics_workspace_sku</code> \"PerGB2018\" The SKU for the Log Analytics Workspace. PerGB2018 , Standalone , PerNode , Free , CapacityReservation <code>log_analytics_logs_retention_in_days</code> 30 The number of days to retain logs in the Log Analytics Workspace. 30 , 60 , 90 , 120 , 150 , 180 , 365 , 730 , 1827 , 3653 <code>enable_azure_activity_log</code> true Enable Azure Activity Log. true , false <code>enable_vm_insights</code> true Enable Azure Monitor for VMs. true , false <code>enable_azure_security_center</code> true Enable Azure Security Center. true , false <code>enable_container_insights</code> true Enable Azure Monitor for Containers. true , false <code>enable_key_vault_analytics</code> true Enable Azure Monitor for Key Vault. true , false <code>enable_service_map</code> true Enable Azure Monitor for Service Map. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-azure-firewall-resource","title":"Mission Enclave - Azure Firewall Resource","text":"<p>By default, Mission Enclave Landing Zone Starter with Azure Kubernetes Service deploys Azure Firewall Premium. Not all regions support Azure Firewall Premium. Check here to see if the region you're deploying to supports Azure Firewall Premium. If necessary you can set a different firewall SKU or location.</p> <p>The following will be created:</p> <ul> <li>Azure Firewall (main.tf)</li> <li>Required Firewall rules (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Management Hub Firewall\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_firewall</code> true Enable Azure Firewall. true , false <code>enable_forced_tunneling</code> true Enable forced tunneling. true , false <code>firewall_zones</code> array The availability zones to deploy the firewall to. 1 , 2 , 3 <code>firewall_network_rules</code> array The network rules to create in the firewall. <code>firewall_application_rules</code> array The application rules to create in the firewall. <code>firewall_nat_rules</code> array The NAT rules to create in the firewall."},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-bastionprivate-dns-zones","title":"Mission Enclave - Bastion/Private DNS Zones","text":"<p>If you want to remotely access the network and the resources you've deployed, you can use Azure Bastion to remotely access virtual machines within the network without exposing them via Public IP Addresses.</p> <p>Deploy a Linux or Windows virtual machine as jumpboxes into the network without a Public IP Address using Azure Bastion Host by providing values for these parameters below.</p> <p>The following will be created:</p> <ul> <li>Azure Bastion (main.tf)</li> <li>Private DNS Zones (main.tf)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Bastion/Private DNS Zones\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_bastion_host</code> true Enable Azure Bastion. true , false <code>azure_bastion_host_sku</code> \"Standard\" The SKU for the Azure Bastion Host. Standard , Premium <code>azure_bastion_subnet_address_prefix</code> [\"10.0.128.192/26\"] The CIDR Subnet Address Prefix for the Azure Bastion Subnet. It must be in the Hub Virtual Network space. It must be /27. This is the subnet that will be used for the Azure Bastion Host. Optional, if you do not want to deploy Azure Bastion, remove this subnet from the list. <code>hub_private_dns_zones</code> array The private DNS zones to create in the hub virtual network."},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-identity-management-spoke-virtual-network","title":"Mission Enclave - Identity Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Identity Spoke Networking</li> <li>Spoke Networks (Identity)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Identity Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>id_vnet_address_space</code> [\"10.0.130.0/24\"] The CIDR Virtual Network Address Prefix for the Identity Virtual Network. <code>id_subnets</code> array The subnets to create in the identity virtual network. <code>id_private_dns_zones</code> array The private DNS zones to create in the identity virtual network. <code>enable_forced_tunneling_on_id_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-operations-management-spoke-virtual-network","title":"Mission Enclave - Operations Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Operations Spoke Networking</li> <li>Spoke Networks (Operations)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Operations Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>ops_vnet_address_space</code> [\"10.0.131.0/24\"] The CIDR Virtual Network Address Prefix for the Operations Virtual Network. <code>ops_subnets</code> array The subnets to create in the operations virtual network. <code>ops_private_dns_zones</code> array The private DNS zones to create in the operations virtual network. <code>enable_forced_tunneling_on_ops_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-security-management-spoke-virtual-network","title":"Mission Enclave - Security Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Security Spoke Networking</li> <li>Spoke Networks (Security)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Security Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>sec_vnet_address_space</code> [\"10.0.133.0/24\"] The CIDR Virtual Network Address Prefix for the Operations Virtual Network. <code>sec_subnets</code> array The subnets to create in the operations virtual network. <code>sec_private_dns_zones</code> array The private DNS zones to create in the operations virtual network. <code>enable_forced_tunneling_on_sec_route_table</code> true Enable forced tunneling on the route table. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-devsecops-management-spoke-virtual-network","title":"Mission Enclave - DevSecOps Management Spoke Virtual Network","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for DevSecOps Spoke Networking</li> <li>Spoke Networks (DevSecOps)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"DevSecOps Management Spoke Virtual Network\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>devsecops_vnet_address_space</code> [\"10.0.132.0/24\"] The CIDR Virtual Network Address Prefix for the DevSecOps Virtual Network. <code>devsecops_subnets</code> array The subnets to create in the devsecops virtual network. <code>devsecops_private_dns_zones</code> array The private DNS zones to create in the devsecops virtual network. <code>enable_forced_tunneling_on_devsecops_route_table</code> true Enable forced tunneling on the route table. true , false <code>use_remote_spoke_gateway</code> false Use a remote spoke gateway. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-devsecops-management-spoke-components","title":"Mission Enclave - DevSecOps Management Spoke Components","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for DevSecOps Spoke Components</li> <li>Spoke Components (DevSecOps)</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"DevSecOps Management Spoke Components\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>NOTE: Key Vault and Bastion Jumpbox are not deployed by default. To deploy them, set the <code>enable_devsecops_resources</code> variable to <code>true</code>.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_devsecops_resources</code> true Enable DevSecOps resources. true , false <p>Example Key Vault Configuration:</p> Parameter name Default Value Description Possible Values <code>enabled_for_deployment</code> true Enable DevSecOps resources for deployment. true , false <code>enabled_for_disk_encryption</code> true Enable DevSecOps resources for disk encryption. true , false <code>enabled_for_template_deployment</code> true Enable DevSecOps resources for template deployment. true , false <code>rbac_authorization_enabled</code> true Enable RBAC authorization. true , false <code>enable_key_vault_private_endpoint</code> true Enable Key Vault private endpoint. true , false <code>admin_group_name</code> \"DevSecOps Admins\" The name of the DevSecOps Admins group for use with Key Vault. 1-64 characters <p>Example Bastion JumpBox Configuration:</p> Parameter name Default Value Description Possible Values <code>windows_distribution_name</code> \"windows2019dc\" The Windows distribution name. View Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/cli-ps-findimage \"windows2019dc\" , \"windows2019datacenter\" <code>virtual_machine_size</code> \"Standard_D2s_v3\" The size of the virtual machine. View Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes \"Standard_D2s_v3\" , \"Standard_D4s_v3\" <code>vm_admin_username</code> \"anoaadmin\" The username for the administrator account for the Bastion VM. 1-20 characters <code>vm_admin_password</code> \"Password1234!\" The password for the administrator account for the Bastion VM. This is a secret and used with GitHub Actions. If used for testing, it should be changed after testing. 12-123 characters <code>nsg_inbound_rules</code> array The inbound rules to create in the NSG for the Bastion VM. \"3389\" , \"5986\" <code>data_disks</code> array The data disks to create for the Bastion VM. \"P30\" , \"P40\" , \"P50\" <code>deploy_log_analytics_agent</code> true Deploy the Log Analytics agent for the Bastion VM. true , false"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-ampls-configuration","title":"Mission Enclave - AMPLS Configuration","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for AMPLS Configuration</li> <li>AMPLS Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"AMPLS Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_ampls</code> true Enable AMPLS Configuration. true , false <code>ampls_subnet_address_prefixes</code> [\"10.0.134.0/27\"] The CIDR Subnet Address Prefix for the Azure Monitor Private Link Subnet. It must be in the Operations Virtual Network space. It must be /27."},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-microsoft-defender-for-cloud-configuration","title":"Mission Enclave - Microsoft Defender for Cloud Configuration","text":"<p>By default Microsoft Defender for Cloud offers a free set of monitoring capabilities that are enabled via an Azure policy when you first set up a subscription and view the Microsoft Defender for Cloud portal blade.</p> <p>Microsoft Defender for Cloud offers a standard/defender sku which enables a greater depth of awareness including more recomendations and threat analytics. You can enable this higher depth level of security in Mission Enclave Landing Zone Starter with Azure Kubernetes Service by setting the parameter deployDefender during deployment. In addition you can include the security_center_contact_email parameter to set a contact email for alerts.</p> <p>The following will be created:</p> <ul> <li>Microsoft Defender for Cloud Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Microsoft Defender for Cloud Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_defender_for_cloud</code> true Enable Microsoft Defender for Cloud Configuration. true , false <code>security_center_contact_email</code> \"\" The email address to send alerts to for this subscription. 1-64 characters <code>security_center_contact_phone</code> \"\" The phone number to send alerts to for this subscription. 1-64 characters <code>security_center_alert_notifications</code> true The alert notifications to send for this subscription. true , false <code>security_center_alerts_to_admins</code> true Send alerts to admins. true , false <code>security_center_pricing_tier</code> \"Standard\" The pricing tier for Microsoft Defender for Cloud. Free , Standard <code>security_center_pricing_resource_types</code> [\"KeyVaults\", \"StorageAccounts\", \"VirtualMachines\"] The resource types to monitor with Microsoft Defender for Cloud. \"VirtualMachines\", \"SQLServers\", \"KubernetesServices\", \"AppServices\", \"StorageAccounts\", \"KeyVaults\", \"CosmosDBs\", \"PostgreSQLServers\", \"MariaDBServers\", \"MySQLServers\", \"RedisCaches\", \"EventHubs\", \"ServiceBusNamespaces\", \"IoTHubs\", \"LogicApps\", \"APIManagementServices\", \"AppServiceEnvironments\", \"AzureFunctions\", \"ContainerRegistries\", \"ContainerInstances\", \"ContainerServices\", \"ContainerGroups\" <p>The Defender plan for Microsoft Defender for Cloud is enabled by default in the following Azure Environments: AzureCloud. To enable this for other Azure Cloud environments, this will need to executed manually. Documentation on how to do this can be found here.</p> <p>Learn more about Microsoft Defender for Cloud pricing.</p>"},{"location":"deployment/landing-zone-aks/landing-zone-planning/#mission-enclave-azure-service-health-configuration","title":"Mission Enclave - Azure Service Health Configuration","text":"<p>The following will be created:</p> <ul> <li>Resource Groups for Service Health Configuration</li> <li>Service Health Configuration</li> </ul> <p>Review and if needed, comment out and modify the variables within the \"Landing Zone Configuration\" section under \"Azure Service Health Configuration\" of the common variable definitions file parameters.tfvars. Do not modify if you plan to use the default values.</p> <p>Example Configuration:</p> Parameter name Default Value Description Possible Values <code>enable_service_health_monitoring</code> true Enable Service Health Configuration. true <code>action_group_short_name</code> \"anoa\" The short name for the action group. 1-12 characters"},{"location":"deployment/landing-zone-aks/landing-zone/","title":"Mission Enclave Landing Zone Starter with Azure Kubernetes Service","text":"<p>The Mission Enclave Landing Zone Starter with Azure Kubernetes Service Composition Terraform module provides an opinionated approach for deploying and managing the core platform capabilities of Azure landing zones architecture using Terraform, with a focus on the central resource hierarchy.</p>"},{"location":"deployment/landing-zone-aks/landing-zone/#architecture","title":"Architecture","text":""},{"location":"deployment/landing-zone-aks/landing-zone/#design-areas","title":"Design areas","text":"<p>The Mission Enclave Landing Zone Starter with Azure Kubernetes Service Terraform module is designed to address the following areas:</p> <p>Resource organization</p> <ul> <li>Create the Management Group resource hierarchy</li> <li>Assign Subscriptions to Management Groups</li> <li>Budgets and Cost Management</li> </ul> <p>Identity and access management</p> <ul> <li>Create custom Role Assignments and Role Definitions</li> </ul> <p>Management</p> <ul> <li>Create a central Log Analytics workspace and Automation Account</li> <li>Link Log Analytics workspace to the Automation Account</li> <li>Deploy recommended Log Analytics Solutions</li> <li>Azure Monitor Link Scopes</li> </ul> <p>Network topology and connectivity</p> <ul> <li>Create a centralized hub network</li> <li>Traditional Azure networking topology (hub and spoke)</li> <li>Secure network design that follow the principles of SCCA/Zero Trust Network</li> <li>Azure Firewall</li> <li>DDoS Network Protection</li> <li>Centrally managed DNS zones</li> </ul>"},{"location":"deployment/landing-zone-aks/landing_zone_networking/","title":"Networking","text":"<p>This repository has carefully planned default address prefixes configured throughout the virtual networks in Mission Enclave Landing Zone Starter with Azure Kubernetes Service and the add-ons to prevent deployment conflicts. We exepect most customers to define custom address prefixes. However, if you deploy everything \"as-is\", there are no overlapping address spaces and the networks will deploy without an error. Here are the default address prefixes:</p>"},{"location":"deployment/landing-zone-aks/landing_zone_networking/#super-network","title":"Super Network","text":"<p>10.0.128.0/18</p>"},{"location":"deployment/landing-zone-aks/landing_zone_networking/#virtual-networks","title":"Virtual Networks","text":"Solution Network Address Prefix MELZS Hub 10.0.128.0/23 MELZS Identity 10.0.130.0/24 MELZS Operations 10.0.131.0/24 MELZS DevSecOps 10.0.132.0/24 MELZS Security 10.0.133.0/24 MELZS AMPLS 10.0.134.0/27 Add-On Workloads 10.0.135.0/24"},{"location":"deployment/policy/policy-def/","title":"Policy Definitions","text":"<p>This section provides a list of policy definitions included in the Mission Enclave Policy starter implementation.</p>"},{"location":"deployment/policy/policy-def/#intermedite-root-management-group","title":"Intermedite Root Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Allowed locations</code> This policy enables you to restrict the locations your organization can specify when deploying resources. Use to enforce your geo-compliance requirements. Excludes resource groups, Microsoft.AzureActiveDirectory/b2cDirectories, and resources that use the 'global' region. <code>Policy Definition</code>,Built-in General Goverance {\"listOfAllowedLocations\":{\"value\":[\"eastus\",\"eastus2\",\"westus\",\"westus2\"]}} <code>Audit lock on Networking Resource Types</code> This policy audits if a resource lock 'CanNotDelete' or 'ReadOnly' has been applied to the specified Networking components. <code>Policy Definition</code>,Built-in General Goverance {\"resourceTypes\": {\"type\": \"Array\", \"metadata\": {\"description\": \"Azure netowrking resource types to audit for Locks\",\"displayName\": \"resourceTypes\"},\"defaultValue\": [\"microsoft.network/expressroutecircuits\", \"microsoft.network/expressroutegateways\", \"microsoft.network/virtualnetworks\", \"microsoft.network/virtualnetworkgateways\", \"microsoft.network/vpngateways\", \"microsoft.network/p2svpngateways\"]}} <code>Allowed virtual machine size SKUs</code> This policy enables you to specify a set of virtual machine size SKUs that your organization can deploy. <code>Policy Definition</code>,Built-in General Goverance {\"listOfAllowedSKUs\":{\"value\":[\"Standard_DS1_v2\",\"Standard_DS2_v2\",\"Standard_DS3_v2\",\"Standard_DS4_v2\",\"Standard_DS5_v2\",\"Standard_DS11_v2\",\"Standard_DS12_v2\",\"Standard_DS13_v2\",\"Standard_DS14_v2\",\"Standard_DS15_v2\"]}} <code>Deploy Microsoft Defender for Cloud Security Contacts</code> This policy deploys Microsoft Defender for Cloud Security Contacts. <code>Policy Definition</code>,Custom Security Goverance \"emailSecurityContact\": {\"type\": \"string\",\"metadata\": {\"description\": \"Provide email address for Azure Security Center contact details\",\"displayName\": \"Security contacts email address\"},\"defaultValue\": \"anoa@contoso.com\"}, <code>Deploy export to Log Analytics workspace for Microsoft Defender for Cloud data</code> Enable export to Log Analytics workspace of Microsoft Defender for Cloud data. This policy deploys an export to Log Analytics workspace configuration with your conditions and target workspace on the assigned scope. To deploy this policy on newly created subscriptions, open the Compliance tab, select the relevant non-compliant assignment and create a remediation task. <code>Policy Definition</code>,Custom Security Governance <code>Audit Public Network Access</code> This policy set audits Azure resources that allow access from the public internet. <code>Policy Definition Set</code>, Built-in Audit Public Network Access <code>Configure Microsoft Defender for Cloud plans</code> This policy set deploys Microsoft Defender for Cloud provides comprehensive, cloud-native protections from development to runtime in multi-cloud environments. Use the policy initiative to configure Defender for Cloud plans and extensions to be enabled on selected scope(s). <code>Policy Definition Set</code>, Built-in Configure Microsoft Defender for Cloud plans <code>Deploy Diagnostic Settings for Subscriptions to a Log Analytics workspace</code> Deploys the diagnostic settings for Subscriptions to stream to a Log Analytics workspace when any Subscription which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace</code> Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace</code> Deploys the diagnostic settings for SQL Managed Instances to stream to a regional Log Analytics workspace when any Azure Storage which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Public IPs to a Log Analytics workspace</code> Deploys the diagnostic settings for Azure Public IPs to stream to a regional Log Analytics workspace when any Azure Public IPs which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace</code> Deploys the diagnostic settings for Azure Network Interfaces to stream to a regional Log Analytics workspace when any Azure Network Interfaces which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace</code> Deploys the diagnostic settings for Log Analytics workspaces to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Firewall to Log Analytics workspace</code> Deploys the diagnostic settings for Azure Firewall to stream to a regional Log Analytics workspace when any Azure Firewall which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace</code> Deploys the diagnostic settings for Azure Bastion to stream to a regional Log Analytics workspace when any Azure Bastion which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace</code> Deploys the diagnostic settings for Azure Virtual Network to stream to a regional Log Analytics workspace when any Azure Virtual Network which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace</code> Deploys the diagnostic settings for Azure App Service Plan to stream to a regional Log Analytics workspace when any Azure App Service Plan which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Diagnostic Settings for App Service to Log Analytics workspace</code> Deploys the diagnostic settings for Azure App Service to stream to a regional Log Analytics workspace when any Azure App Service which is missing this diagnostic settings is created or updated. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Deploy Activity Log Key Vault Delete Alert</code> Policy to Deploy Activity Log Key Vault Delete Alert. <code>Policy Definition</code>,Custom Monitoring Goverance <code>DenyAction implementation on Activity Logs</code> This is a DenyAction implementation policy on Activity Logs.. <code>Policy Definition</code>,Custom Monitoring Goverance <code>DenyAction implementation on Diagnostic Logs.</code> DenyAction implementation on Diagnostic Logs. <code>Policy Definition</code>,Custom Monitoring Goverance <code>Azure Active Directory should use private link to access Azure services</code> Azure Private Link lets you connect your virtual networks to Azure services without a public IP address at the source or destination. The Private Link platform handles the connectivity between the consumer and services over the Azure backbone network. By mapping private endpoints to Azure AD, you can reduce data leakage risks. Learn more at: https://aka.ms/privateLinkforAzureADDocs. It should be only used from isolated VNETs to Azure services, with no access to the Internet or other services (M365).. <code>Policy Definition</code>,Built-in Identity and Access Management Governance <code>A maximum of 3 owners should be designated for your subscription</code> It is recommended to designate up to 3 subscription owners in order to reduce the potential for breach by a compromised owner.. <code>Policy Definition</code>,Built-in Identity and Access Management Governance <code>Blocked accounts with owner permissions on Azure resources should be removed</code> Deprecated accounts with owner permissions should be removed from your subscription.  Deprecated accounts are accounts that have been blocked from signing in.. <code>Policy Definition</code>,Built-in Identity and Access Management Governance <code>Audit usage of custom RBAC roles</code> Audit built-in roles such as 'Owner, Contributer, Reader' instead of custom RBAC roles, which are error prone. Using custom roles is treated as an exception and requires a rigorous review and threat modeling. <code>Policy Definition</code>,Built-in Identity and Access Management Governance <code>Accounts with owner permissions on Azure resources should be MFA enabled</code> Multi-Factor Authentication (MFA) should be enabled for all subscription accounts with owner permissions to prevent a breach of accounts or resources. <code>Policy Definition</code>,Built-in Identity and Access Management Governance <code>Deploy SQL Database security Alert Policies configuration with email admin accounts</code> Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration. <code>Policy Definition</code>,Built-in SQL Security Governance <code>Deploy SQL database auditing settings</code> Deploy auditing settings to SQL Database when it not exist in the deployment. <code>Policy Definition</code>,Built-in SQL Security Governance <code>SQL servers deploys a specific min TLS version requirement</code> Deploys a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server. <code>Policy Definition</code>,Built-in SQL Security Governance <code>Deploy SQL Database Vulnerability Assessments</code> Deploy SQL Database Vulnerability Assessments when it does not exist in the deployment, and save results to the storage account specified in the parameters. <code>Policy Definition</code>,Built-in SQL Security Governance <code>Deploy SQL DB transparent data encryption</code> Enables transparent data encryption on SQL databases. <code>Policy Definition</code>,Built-in SQL Security Governance <code>Configure Azure Defender to be enabled on SQL servers</code> Enable Azure Defender on your Azure SQL Servers to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. <code>Policy Definition</code>,Built-in SQL Security Governance <code>Deploy Advanced Data Security on SQL servers</code> This policy enables Advanced Data Security on SQL Servers. This includes turning on Threat Detection and Vulnerability Assessment. It will automatically create a storage account in the same region and resource group as the SQL server to store scan results, with a 'sqlva' prefix. <code>Policy Definition</code>,Built-in SQL Security Governance <code>An Azure Active Directory administrator should be provisioned for SQL servers</code> Audit provisioning of an Azure Active Directory administrator for your SQL server to enable Azure AD authentication. Azure AD authentication enables simplified permission management and centralized identity management of database users and other Microsoft services. <code>Policy Definition</code>,Built-in SQL Security Governance"},{"location":"deployment/policy/policy-def/#platforms-management-group","title":"Platforms Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Key vaults should have soft delete enabled</code> This policy requires that all Key Vaults should have soft delete enabled. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Key vaults should have deletion protection enabled</code> This policy requires that all Key Vaults should have deletion protection enabled. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Key Vault secrets should have an expiration date</code> This policy requires that all Key Vault secrets should have an expiration date. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Key Vault keys should have an expiration date</code> This policy requires that all Key Vault keys should have an expiration date. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Azure Key Vault should have firewall enabled</code> This policy requires that all Key Vaults should have firewall enabled. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Keys should have more than the specified number of days before expiration</code> This policy requires that all keys should have more than the specified number of days before expiration. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Secrets should have more than the specified number of days before expiration</code> This policy requires that all secrets should have more than the specified number of days before expiration. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Azure Key Vaults should use private link</code> This policy requires that all Key Vaults should use private link. <code>Policy Definition</code>,Built-in Key Vault Governance <code>Storage accounts should use private link</code> This policy requires that all Storage Accounts should use private link. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Storage accounts should have the specified minimum TLS version</code> This policy requires that all Storage Accounts should have the specified minimum TLS version. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Storage accounts should allow access from trusted Microsoft services</code> This policy requires that all Storage Accounts should allow access from trusted Microsoft services. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Storage accounts should disable public network access</code> This policy requires that all Storage Accounts should disable public network access. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Storage accounts should prevent cross tenant object replication</code> This policy requires that all Storage Accounts should prevent cross tenant object replication. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Configure secure transfer of data on a storage account</code> This policy requires that all Storage Accounts should have secure transfer of data enabled. <code>Policy Definition</code>,Built-in Storage Account Governance <code>Geo-redundant storage should be enabled for Storage Accounts</code> This policy requires that all Storage Accounts should have geo-redundant storage enabled. <code>Policy Definition</code>,Built-in Storage Account Governance"},{"location":"deployment/policy/policy-def/#operations-management-group","title":"Operations Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Deny the creation of public IP</code> This policy denies creation of Public IPs under the assigned scope. <code>Policy Definition</code>,Built-in Network Governance <code>Management port access from the Internet should be blocked</code> This policy denies any network security rule that allows management port access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Deny Azure Bastion Hosts resource creation</code> This policy denies the creation of Azure Bastion Hosts under the assigned scope. <code>Policy Definition</code>,Custom Network Governance <code>RDP access from the Internet should be blocked</code> This policy denies any network security rule that allows RDP access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Require NSG on VNET</code> This policy requires that a Network Security Group (NSG) is associated with a Virtual Network. <code>Policy Definition</code>,Custom Network Governance <code>[Preview]: All Internet traffic should be routed via your deployed Azure Firewall.</code> This policy requires that all Internet traffic should be routed via your deployed Azure Firewall. <code>Policy Definition</code>,Built-in Network Governance <code>Subscription should configure the Azure Firewall Premium to provide additional layer of protection.</code> Azure Firewall Premium provides advanced threat protection that meets the needs of highly sensitive and regulated environments. Deploy Azure Firewall Premium to your subscription and make sure all the service traffic are protected by Azure Firewall Premium. To learn more about Azure Firewall Premium, visit https://aka.ms/fw-premium. <code>Policy Definition</code>,Built-in Network Governance <code>Configure virtual network to enable Flow Log and Traffic Analytics</code> This policy requires that all virtual networks should have Flow Log and Traffic Analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Configure network security groups to enable traffic analytics</code> Traffic analytics can be enabled for all network security groups hosted in a particular region with the settings provided during policy creation. If it already has Traffic analytics enabled, then policy does not overwrite its settings. Flow Logs are also enabled for the Network security groups that do not have it. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network Watcher flow logs should have traffic analytics enabled</code> This policy requires that all Network Watcher flow logs should have traffic analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Flow logs should be configured for every network security group</code> This policy requires that all network security groups should have flow logs enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Azure DDoS Protection should be enabled</code> This policy requires that Azure DDoS Protection should be enabled for virtual networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network interfaces should not have public IPs</code> This policy denies the creation of public IP addresses on network interfaces. <code>Policy Definition</code>,Built-in Network Governance"},{"location":"deployment/policy/policy-def/#security-management-group","title":"Security Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Deny the creation of public IP</code> This policy denies creation of Public IPs under the assigned scope. <code>Policy Definition</code>,Built-in Network Governance <code>Management port access from the Internet should be blocked</code> This policy denies any network security rule that allows management port access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Deny Azure Bastion Hosts resource creation</code> This policy denies the creation of Azure Bastion Hosts under the assigned scope. <code>Policy Definition</code>,Custom Network Governance <code>RDP access from the Internet should be blocked</code> This policy denies any network security rule that allows RDP access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Require NSG on VNET</code> This policy requires that a Network Security Group (NSG) is associated with a Virtual Network. <code>Policy Definition</code>,Custom Network Governance <code>[Preview]: All Internet traffic should be routed via your deployed Azure Firewall.</code> This policy requires that all Internet traffic should be routed via your deployed Azure Firewall. <code>Policy Definition</code>,Built-in Network Governance <code>Subscription should configure the Azure Firewall Premium to provide additional layer of protection.</code> Azure Firewall Premium provides advanced threat protection that meets the needs of highly sensitive and regulated environments. Deploy Azure Firewall Premium to your subscription and make sure all the service traffic are protected by Azure Firewall Premium. To learn more about Azure Firewall Premium, visit https://aka.ms/fw-premium. <code>Policy Definition</code>,Built-in Network Governance <code>Configure virtual network to enable Flow Log and Traffic Analytics</code> This policy requires that all virtual networks should have Flow Log and Traffic Analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Configure network security groups to enable traffic analytics</code> Traffic analytics can be enabled for all network security groups hosted in a particular region with the settings provided during policy creation. If it already has Traffic analytics enabled, then policy does not overwrite its settings. Flow Logs are also enabled for the Network security groups that do not have it. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network Watcher flow logs should have traffic analytics enabled</code> This policy requires that all Network Watcher flow logs should have traffic analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Flow logs should be configured for every network security group</code> This policy requires that all network security groups should have flow logs enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Azure DDoS Protection should be enabled</code> This policy requires that Azure DDoS Protection should be enabled for virtual networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network interfaces should not have public IPs</code> This policy denies the creation of public IP addresses on network interfaces. <code>Policy Definition</code>,Built-in Network Governance"},{"location":"deployment/policy/policy-def/#identity-management-group","title":"Identity Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Deny the creation of public IP</code> This policy denies creation of Public IPs under the assigned scope. <code>Policy Definition</code>,Built-in Network Governance <code>Management port access from the Internet should be blocked</code> This policy denies any network security rule that allows management port access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Deny Azure Bastion Hosts resource creation</code> This policy denies the creation of Azure Bastion Hosts under the assigned scope. <code>Policy Definition</code>,Custom Network Governance <code>RDP access from the Internet should be blocked</code> This policy denies any network security rule that allows RDP access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Require NSG on VNET</code> This policy requires that a Network Security Group (NSG) is associated with a Virtual Network. <code>Policy Definition</code>,Custom Network Governance <code>[Preview]: All Internet traffic should be routed via your deployed Azure Firewall.</code> This policy requires that all Internet traffic should be routed via your deployed Azure Firewall. <code>Policy Definition</code>,Built-in Network Governance <code>Subscription should configure the Azure Firewall Premium to provide additional layer of protection.</code> Azure Firewall Premium provides advanced threat protection that meets the needs of highly sensitive and regulated environments. Deploy Azure Firewall Premium to your subscription and make sure all the service traffic are protected by Azure Firewall Premium. To learn more about Azure Firewall Premium, visit https://aka.ms/fw-premium. <code>Policy Definition</code>,Built-in Network Governance <code>Configure virtual network to enable Flow Log and Traffic Analytics</code> This policy requires that all virtual networks should have Flow Log and Traffic Analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Configure network security groups to enable traffic analytics</code> Traffic analytics can be enabled for all network security groups hosted in a particular region with the settings provided during policy creation. If it already has Traffic analytics enabled, then policy does not overwrite its settings. Flow Logs are also enabled for the Network security groups that do not have it. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network Watcher flow logs should have traffic analytics enabled</code> This policy requires that all Network Watcher flow logs should have traffic analytics enabled. <code>Policy Definition</code>,Custom Network Governance <code>Flow logs should be configured for every network security group</code> This policy requires that all network security groups should have flow logs enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Azure DDoS Protection should be enabled</code> This policy requires that Azure DDoS Protection should be enabled for virtual networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network interfaces should not have public IPs</code> This policy denies the creation of public IP addresses on network interfaces. <code>Policy Definition</code>,Built-in Network Governance"},{"location":"deployment/policy/policy-def/#devsecops-management-group","title":"DevSecOps Management Group","text":"Policy Name Description Policy Type Initiative Parameter <code>Deny the creation of public IP</code> This policy denies creation of Public IPs under the assigned scope. <code>Policy Definition</code>,Built-in Network Governance <code>Management port access from the Internet should be blocked</code> This policy denies any network security rule that allows management port access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Deny Azure Bastion Hosts resource creation</code> This policy denies the creation of Azure Bastion Hosts under the assigned scope. <code>Policy Definition</code>,Custom Network Governance <code>RDP access from the Internet should be blocked</code> This policy denies any network security rule that allows RDP access from the Internet. <code>Policy Definition</code>,Custom Network Governance <code>Require NSG on VNET</code> This policy requires that a Network Security Group (NSG) is associated with a Virtual Network. <code>Policy Definition</code>,Custom Network Governance <code>[Preview]: All Internet traffic should be routed via your deployed Azure Firewall.</code> This policy requires that all Internet traffic should be routed via your deployed Azure Firewall. <code>Policy Definition</code>,Built-in Network Governance <code>Subscription should configure the Azure Firewall Premium to provide additional layer of protection.</code> Azure Firewall Premium provides advanced threat protection that meets the needs of highly sensitive and regulated environments. Deploy Azure Firewall Premium to your subscription and make sure all the service traffic are protected by Azure Firewall Premium. To learn more about Azure Firewall Premium, visit https://aka.ms/fw-premium. <code>Policy Definition</code>,Built-in Network Governance <code>Configure virtual network to enable Flow Log and Traffic Analytics</code> This policy requires that all virtual networks should have Flow Log and Traffic Analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Configure network security groups to enable traffic analytics</code> Traffic analytics can be enabled for all network security groups hosted in a particular region with the settings provided during policy creation. If it already has Traffic analytics enabled, then policy does not overwrite its settings. Flow Logs are also enabled for the Network security groups that do not have it. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network Watcher flow logs should have traffic analytics enabled</code> This policy requires that all Network Watcher flow logs should have traffic analytics enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Flow logs should be configured for every network security group</code> This policy requires that all network security groups should have flow logs enabled. <code>Policy Definition</code>,Built-in Network Governance <code>Azure DDoS Protection should be enabled</code> This policy requires that Azure DDoS Protection should be enabled for virtual networks. <code>Policy Definition</code>,Built-in Network Governance <code>Network interfaces should not have public IPs</code> This policy denies the creation of public IP addresses on network interfaces. <code>Policy Definition</code>,Built-in Network Governance"},{"location":"deployment/policy/policy-def/#workloads-management-group","title":"Workloads Management Group","text":"Policy Name Description Policy Type Initiative Parameter"},{"location":"deployment/policy/policy-faq/","title":"FAQ","text":""},{"location":"deployment/policy/policy-faq/#azure-monitor-agent-may-2023","title":"Azure Monitor Agent (May 2023)","text":"<p>Similarly, as Microsoft Monitor Agent (MMA) is on a deprecation path, Azure Monitor Agent (AMA) is the recommended replacement and there are a number of requests to support AMA specific policies. AMA is currently in preview, and we are working with the product group to ensure that the policies are updated as soon as possible. Some policies are ready, however, the initiative to activate all components is still being worked on.</p>"},{"location":"deployment/policy/policy-faq/#why-are-there-custom-policy-definitions-as-part-of-this-implementation","title":"Why are there custom policy definitions as part of this implementation?","text":"<p>We work with and learn from our customers and partners. This collaboration helps us evolve and enhance the reference implementations to meet customer and partner requirements. As part of this interaction with customers and partners, we might notice policy definition gaps. In those cases, we create and test a definition to fill the gap and include it in enterprise-scale architecture for everyone to use.</p> <p>We then work with the Azure Policy and associated engineering teams to continuously transition the new custom policy definitions into built-in policy definitions.</p>"},{"location":"deployment/policy/policy-faq/#where-can-i-see-the-policy-definitions-used-by-the-mission-enclave-policy-starter-implementation","title":"Where can I see the policy definitions used by the Mission Enclave Policy starter implementation?","text":"<p>You can find a list of policy definitions here: Policies included in Mission Enclave Policy starter implementations</p>"},{"location":"deployment/policy/policy-github/","title":"Deploy a Mission Enclave Policy using GitHub Actions","text":"<p>This document provides guidance on how to deploy a Mission Enclave Policy starter using GitHub Actions.</p> <p>Learn more about Azure NoOps GitHub Actions here.</p>"},{"location":"deployment/policy/policy-github/#github-deployment","title":"GitHub Deployment","text":"<p>To deploy the Mission Enclave Policy, we'll setup a GitHub Actions CI/CD workflow that will build and deploy our application whenever we push new commits to the main branch of our repository.</p>"},{"location":"deployment/policy/policy-github/#configure-remote-state-storage-account","title":"Configure remote state storage account","text":"<p>Before you use Azure Storage as a backend for the state file, you must create a storage account.</p> <p>Reference the Remote State Storage directory for the Terraform configuration to create the storage account and container.</p>"},{"location":"deployment/policy/policy-github/#using-github-dependencies-action","title":"Using GitHub Dependencies Action","text":"<p>Run the following action deploy_dependencies.yml to create the storage account and container.</p>"},{"location":"deployment/policy/policy-github/#setting-up-github-actions-for-deployment","title":"Setting Up GitHub Actions for deployment","text":"<p>To set up GitHub Actions for deployment, we'll need to use the new workflow file in our repository. This file will contain the instructions for our CI/CD pipeline.</p>"},{"location":"deployment/policy/policy-github/#creating-an-azure-service-principal","title":"Creating an Azure Service Principal","text":"<p>In order to deploy our Mission Enclave Policy, we'll need to create an Azure Service Principal.  This is an identity that can be used to authenticate to Azure, and that can be granted access to specific resources.</p> <p>NOTE: If you already have a Service Principal that you want to use, you can skip this step.</p> <p>To create a new Service Principal, run the following commands:</p> <pre><code>    SUBSCRIPTION_ID=$(\n      az account show \\\n        --query id \\\n        --output tsv \\\n        --only-show-errors\n    )\n\n    AZURE_CREDENTIALS=$(\n      MSYS_NO_PATHCONV=1 az ad sp create-for-rbac \\\n        --name=\"sp-${PROJECT}-${UNIQUE_IDENTIFIER}\" \\\n        --role=\"owner\" \\\n        --scopes=\"/subscriptions/$SUBSCRIPTION_ID\" \\\n        --sdk-auth \\\n        --only-show-errors\n    )\n\n    echo $AZURE_CREDENTIALS\n    echo $SUBSCRIPTION_ID     \n</code></pre> <p>Use this service principal to set up the following secrets in your GitHub repository:</p> <ul> <li><code>AZURE_CREDENTIALS</code>: The JSON output of the <code>az ad sp create-for-rbac</code> command.</li> <li><code>AZURE_SUBSCRIPTION_ID</code>: The subscription ID of your Azure subscription.</li> </ul>"},{"location":"deployment/policy/policy-github/#setup-secrets","title":"Setup secrets","text":"<p>We are using different secrets in our workflow: Secrets in GitHub are encrypted and allow you to store sensitive information such as passwords or API keys, and use them in your workflows using the ${{ secrets.MY_SECRET }} syntax.</p> <p>In GitHub, secrets can be defined at three different levels:</p> <ul> <li> <p>Repository level: secrets defined at the repository level are available in all workflows of the repository.</p> </li> <li> <p>Organization level: secrets defined at the organization level are available in all workflows of the GitHub organization.</p> </li> <li> <p>Environment level: secrets defined at the environment level are available only in workflows referencing the specified environment.</p> </li> </ul> <p>For this refernence implementation, we\u2019ll define our secrets at the repository level. To do so, go to the Settings tab of your repository, and select Secrets then Actions under it, in the left menu.</p> <p>Note   The GitHub Actions pipelines are currently configured to deploy the Terraform <code>Mission Enclave Policy</code> deployments located in the infrastructure/policy.</p> <p>GitHub Actions pipelines are located in the <code>.github/workflows</code> directory of the repository.</p> <ol> <li> <p>Configure your GitHub Actions Secrets</p> <ul> <li>In your forked repository, navigate to <code>Settings &gt; Secrets and variables &gt; Actions</code>.</li> <li>Create the following secrets:</li> </ul> Secret Name Description Example Value <code>AZURE_AD_CLIENT_ID</code> GUID value for the Client ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>subscription_id_hub</code> [Required] GUID value for the Hub Subscription ID to deploy resources to <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_TENANT_ID</code> [Optional] GUID value for the Tenant ID of the service principal to authenticate with <code>00000000-0000-0000-0000-000000000000</code> <code>AZURE_AD_CLIENT_SECRET</code> Secret value for the Service Principal to authenticate with <code>asdf1234567</code> <code>AZURE_TF_STATE_RESOURCE_GROUP_NAME</code> [Optional] For Terraform only: override value to configure the remote state resource group name <code>rg-terraform-state</code> <code>AZURE_TF_STATE_STORAGE_ACCOUNT_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage account name <code>tfstate</code> <code>AZURE_TF_STATE_STORAGE_CONTAINER_NAME</code> [Optional] For Terraform only: override value to configure the remote state storage container name <code>tfstate</code> <code>ARM_ENVIRONMENT</code> The Azure environment to deploy to <code>public</code> or <code>usgovernment</code> </li> </ol> <p>Note: You can also use the https://cli.github.com/GitHub CLI to define your secrets, using the command <code>gh secret set &lt;MY_SECRET&gt; -b\"&lt;SECRET_VALUE&gt;\" -R &lt;repository_url&gt;</code></p>"},{"location":"deployment/policy/policy-github/#running-the-workflow","title":"Running the workflow","text":"<p>Once you have set up your secrets and modified the workflow files, you can now push your changes to the main branch of your repository. This will trigger the workflow and start the deployment process.</p>"},{"location":"deployment/policy/policy-governance/","title":"Policy Governance","text":"<p>As part of a default deployment configuration, policy and policy set definitions are deployed at multiple levels within the Mission Enclave Management Group hierarchy as depicted within this diagram.</p> <p>The subsequent sections will provide a summary of policy sets and policy set definitions applied at each level of the Management Group hierarchy.</p> <p>NOTE: Although the below sections will define which policy definitions/sets are applied at specific scopes, please remember that policy will inherit within your management group hierarchy.</p> <p> For convenience, an Excel version of the below information is available here or click the icon (last updated January 2024).</p>"},{"location":"deployment/policy/policy-governance/#intermediate-root","title":"Intermediate Root","text":"<p>This management group is a parent to all the other management groups created within the default Misson Enclave landing zone configuration. Policy assignment is predominantly focused on assignment of security and monitoring best practices to ensure compliance and reduced operational overhead.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 15 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Intermediate Root Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) General Governance <code>Policy Definition Set</code>, Custom N/A This policy set configures all the General settings, such as Allowed Virtual Machine Sizes, Allowed Regions, and Not Allowed Resource Types AuditIfNotExists, Deny AzureCloud, AzureUSGovernment Security Governance <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the MDFC settings, such as Security contacts, and export from MDFC to Log Analytics workspace. DeployIfNotExists AzureCloud, AzureUSGovernment Audit Public Network Access <code>Policy Definition Set</code>, Built-in AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-15 This policy set audits Azure resources that allow access from the public internet. Audit AzureCloud, AzureUSGovernment Configure Microsoft Defender for Cloud plans <code>Policy Definition Set</code>, Built-in AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-15 This policy set deploys Microsoft Defender for Cloud provides comprehensive, cloud-native protections from development to runtime in multi-cloud environments. Use the policy initiative to configure Defender for Cloud plans and extensions to be enabled on selected scope(s).. DeployIfNotExists AzureCloud, AzureUSGovernment Monitoring Governance <code>Policy Definition Set</code>, Custom AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-12, SI-4, This policy set configures all the Azure Monitor settings, such as Activity Log, Diagnostic Settings for Azure Services, Workspace Retention, Azure Monitor Baseline Alerts for Service Health and DenyAction Delete on Activity Log Settings and Diagnostic Settings. AuditIfNotExists,DeployIfNotExists AzureCloud, AzureUSGovernment Identity and Access Management Governance <code>Policy Definition Set</code>, Custom IA-2 (1), IA-2 (2) This policy set configures all the Identity and Access Management settings, such as Account management, Use private link to access Azure services AuditIfNotExists,DeployIfNotExists AzureCloud, AzureUSGovernment SQL Security Governance <code>Policy Definition Set</code>, Custom AC-2, AC-2 (1), AC-2 (7), AC-4, AU-11, IA-4, SC-28, SC-28 (1), CM-4, This policy set configures all the SQL Security settings, such as SQL Security Alert Policies, SQL Transparent Encryption and SQL Auditing Settings AuditIfNotExists,DeployIfNotExists AzureCloud, AzureUSGovernment Cost Management Governance <code>Policy Definition Set</code>, Custom N/A This policy set configures all the Cost Management settings, such as Budgets, and Audit Unused Resources AuditIfNotExists,DeployIfNotExists AzureCloud, AzureUSGovernment Tag Management Governance <code>Policy Definition Set</code>, Custom N/A This policy set configures all the Tag settings, such as Inherit Resource Group Tags and Append. Append AzureCloud, AzureUSGovernment Configure Microsoft Defender for Databases to be enabled <code>Policy Definition Set</code>, Built-In AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures Microsoft Defender for Databases to protect your Azure SQL Databases, Managed Instances, Open-source relational databases and Cosmos DB. DeployIfNotExists AzureCloud, AzureUSGovernment [Preview]: Deploy Microsoft Defender for Endpoint agent <code>Policy Definition Set</code>, Built-In AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set deploys Microsoft Defender for Endpoint agent on applicable images. DeployIfNotExists AzureCloud, AzureUSGovernment Configure Advanced Threat Protection to be enabled on open-source relational databases <code>Policy Definition Set</code>, Built-In AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set enables Advanced Threat Protection on your non-Basic tier open-source relational databases to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. See https://aka.ms/AzDforOpenSourceDBsDocu. DeployIfNotExists AzureCloud, AzureUSGovernment Configure Azure Defender to be enabled on SQL Servers and SQL Managed Instances <code>Policy Definition Set</code>, Built-In AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set enables Azure Defender on your SQL Servers and SQL Managed Instances to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. DeployIfNotExists AzureCloud, AzureUSGovernment Enable Azure Monitor for VMs with Azure Monitoring Agent(AMA) <code>Policy Definition Set</code>, Built-In AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-12, SI-4, This policy set enables Azure Monitor for the virtual machines (VMs) in the specified scope (management group, subscription or resource group). Takes Log Analytics workspace as parameter. AuditIfNotExists,DeployIfNotExists AzureCloud, AzureUSGovernment Enable Azure Monitor for VMSS with Azure Monitoring Agent(AMA) <code>Policy Definition Set</code>, Built-In AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set enables Azure Monitor for the Virtual Machine Scale Sets in the specified scope (Management group, Subscription or resource group). Takes Log Analytics workspace as parameter. Note: if your scale set upgradePolicy is set to Manual, you need to apply the extension to the all VMs in the set by calling upgrade on them. In CLI this would be az vmss update-instances. DeployIfNotExists AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#platform","title":"Platform","text":"<p>This management group contains all the platform child management groups, like operations, transport, devsecops, and identity.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 2 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Platforms Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Key Vault Governance <code>Policy Definition Set</code>, Custom AC-4, AC-17, AC-17 (1), AU-6 (4), AU-6 (5), AU-12 (1), CP-9,  IA-5, SC-7,  SC-7 (3), This policy set configures all the Azure Key Vault settings and gaurdrails, such as Azure Key Vault Auditing, Purge Protection, and Soft Delete Deny, Audit, DeployIfNotExists AzureCloud, AzureUSGovernment Storage Governance <code>Policy Definition Set</code>, Custom AC-4,AC-17, AC-17 (1), CP-6, CP-6 (1), SC-7, SC-7 (3), This policy set configures all the Azure Storage settings and guardrails, such as Storage Accounts with encryption and HTTPS traffic only. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#transport","title":"Transport","text":"<p>This management group contains a dedicated subscription for connectivity. This subscription will host the Azure networking resources required for the platform, like Azure Virtual WAN, Azure Firewall, and Azure DNS private zones. Policy assignment is predominantly focused on Azure DDoS Protection.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 2 <code>Policy Definitions</code> 0 <code>Policy Exemptions</code> 1 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Transport Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Azure Monitor Baseline Alerts for Service Health <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6 (4), AU-6 (5), AU-12, AU-12 (1), CP-9, IA-5, SC-7, SC-7 (3), This policy set configures all the Azure Monitor Baseline Alerts for Service Health. Modify AzureCloud, AzureUSGovernment Exemption for Deny IP <code>Policy Exemption</code>, Custom N/A This policy exemption is for any Hub Public Ips. Exemption AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#operations","title":"Operations","text":"<p>This management group contains a dedicated subscription for operations. This subscription will host the Azure monitoring and management resources required for the platform, like Log Analytics workspaces, Azure Automation accounts, and Azure Monitor. Policy assignment is predominantly focused on Azure Monitor and Azure Security Center.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 3 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Operations Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Logging Governance <code>Policy Definition Set</code>, Custom AU-6, AU-6 (5), AU-6 (4),AU-12, AU-12 (1), This policy set deploys resource group containing Log Analytics workspace and linked automation account to centralize logs and monitoring. Audit AzureCloud, AzureUSGovernment Azure Security Center Baseline Policies <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the Azure Security Center Baseline Policies. DeployIfNotExists AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#forensics","title":"Forensics","text":"<p>This management group contains a dedicated subscription for forensics. This subscription will host the ACAS Scanners resources required for the platform. Policy assignment is predominantly focused on Azure Security Center and Azure Policy.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 3 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Forensics Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Virtual Machine Governance <code>Policy Definition Set</code>, Custom AC-2 (12), AC-4, AC-4 (3), AU-6 (4), AU-6 (5), AU-12, AU-12 (1), CP-7, CP-9, SI-2 This policy set configures all the Virtual Machine settings and guardrails, such as VMSS and VMs vulnerabilities and Just-In-Time Network Access Control Audit AzureCloud, AzureUSGovernment Azure Security Center Baseline Policies <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the Azure Security Center Baseline Policies. DeployIfNotExists AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#identity","title":"Identity","text":"<p>This management group contains a dedicated subscription for identity. This subscription will host the Azure Active Directory and Azure AD Domain Services. Policy assignment is predominantly focused on Azure AD Identity Protection.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 2 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Identity Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Azure AD Identity Protection Baseline Policies <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the Azure AD Identity Protection Baseline Policies. DeployIfNotExists"},{"location":"deployment/policy/policy-governance/#devsecops","title":"DevSecOps","text":"<p>This management group contains a dedicated subscription for DevSecOps. This subscription will host the Azure DevOps and GitHub resources required for the platform. Policy assignment is predominantly focused on Azure DevOps and GitHub.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 3 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the DevSecOps Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Virtual Machine Governance <code>Policy Definition Set</code>, Custom AC-2 (12), AC-4, AC-4 (3), AU-6 (4), AU-6 (5), AU-12, AU-12 (1), CP-7, CP-9, SI-2 This policy set configures all the Virtual Machine settings and guardrails, such as VMSS and VMs vulnerabilities and Just-In-Time Network Access Control Audit AzureCloud, AzureUSGovernment Azure DevOps Baseline Policies <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the Azure DevOps Baseline Policies. DeployIfNotExists"},{"location":"deployment/policy/policy-governance/#security","title":"Security","text":"<p>This management group contains a dedicated subscription for security. This subscription will host the Azure Security Center and Azure Sentinel resources required for the platform. Policy assignment is predominantly focused on Azure Security Center and Azure Sentinel.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 2 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Security Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Network Governance <code>Policy Definition Set</code>, Custom AC-4, AC-4 (3), AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12 (1), SC-5, SC-7 (3), This policy set protects your virtual networks against volumetric and protocol attacks with Azure DDoS Protection Standard. For more information, visit\u00a0https://aka.ms/ddosprotectiondocs. Audit,DeployIfNotExists AzureCloud, AzureUSGovernment Azure Security Center Baseline Policies <code>Policy Definition Set</code>, Custom AC-2 (12), AC-16, AU-6, AU-6 (4), AU-6 (5), AU-12, AU-12(1),CM-7, IR-4, IR-5, RA-5, SC-3, SI-2, SI-3, SI-3 (1), SI-4, SI-16 This policy set configures all the Azure Security Center Baseline Policies. DeployIfNotExists AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#workloads","title":"Workloads","text":"<p>This management group contains a dedicated subscription for workloads. This subscription will host the Azure resources required for the platform, like Azure Virtual Machines, Azure SQL Databases, and Azure App Services. Policy assignment is predominantly focused on Azure Security Center and Azure Policy.</p> <p></p> <p>Note: The Workloads Management Group is a placeholder for the actual workloads that will be deployed by your organization. The actual workloads will be deployed in the subscriptions created under the Workloads Management Group. The policy assignments for the Workloads Management Group are not defined in the default configuration.</p>"},{"location":"deployment/policy/policy-governance/#sandbox","title":"Sandbox","text":"<p>This management group is for subscriptions that will only be used for testing and exploration by an organization. These subscriptions will be securely disconnected from the corporate and online landing zones. Sandboxes also have a less restrictive set of policies assigned to enable testing, exploration, and configuration of Azure services.</p> <p></p> Policy Type Count <code>Policy Definition Sets</code> 4 <code>Policy Definitions</code> 0 <p>The table below provides the specific Custom and Built-in policy definitions and policy definitions sets assigned at the Sandbox Management Group.</p> Assignment Name Policy Type NIST Controls Description Effect(s) Platform(s) Sandbox Governance Enforce policies in the Sandbox Management Group <code>Policy Definition Set</code>, Custom This initiative will help enforce and govern subscriptions that are placed within the Sandbox Management Group. Enforce AzureCloud, AzureUSGovernment"},{"location":"deployment/policy/policy-governance/#versioning","title":"Versioning","text":"<p>Each policy definition and initiative contains a version in its metadata section: <pre><code>  assignment_metadata = {\n    version  = \"1.0.0\"\n    category = \"General\"\n    anoaCloudEnvironments = [\n      \"AzureCloud\",\n      \"AzureUSGovernment\",\n    ]\n  }\n</code></pre></p>"},{"location":"deployment/policy/policy-manual/","title":"Deploying the Mission Enclave Policy starter using manual deployment","text":"<p>This guide describes how to deploy Mission Enclave Policy starter using the Terraform modules at policy/terraform/.</p> <p>To get started with Terraform on Azure check out their tutorial.</p>"},{"location":"deployment/policy/policy-manual/#quickstart","title":"Quickstart","text":"<p>Below is an example of a Terraform deployment that uses all the defaults in the TFVARS folder to deploy the Policy to one subscription.</p> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the Policy without having to deploy the remote state storage account first.</p> <pre><code>cd infrastructure/policy\nterraform init\nterraform plan --out anoa.policy.dev.plan --var-file tfvars/parameters.tfvars --var \"subscription_id_hub=&lt;&lt;subscription_id&gt;&gt;\" --var \"environment=usegovernment\" # supply some parameters, approve, copy the output values\nterraform apply anoa.policy.dev.plan\n</code></pre>"},{"location":"deployment/policy/policy-manual/#manual-deployment","title":"Manual Deployment","text":"<p>Mission Enclave Policy can be deployed with command-line tools provided with the Terraform CLI in PowerShell.</p>"},{"location":"deployment/policy/policy-manual/#command-line-deployment-using-the-terraform-cli-in-powershell","title":"Command Line Deployment Using the Terraform CLI in PowerShell","text":"<p>Use the Terraform CLI command <code>terraform</code> to deploy Mission Enclave Policy across one or many subscriptions. The following sections describe how to deploy Mission Enclave Policy using the Terraform CLI in PowerShell.</p>"},{"location":"deployment/policy/policy-manual/#single-subscription-deployment","title":"Single Subscription Deployment","text":"<p>To deploy Mission Enclave Policy into a single subscription, you must first login to Azure.</p>"},{"location":"deployment/policy/policy-manual/#login-to-azure-cli","title":"Login to Azure CLI","text":"<p>Log in using the Azure CLI.</p> <pre><code># AZ CLI\naz cloud set -n AzureCloud\naz login\n</code></pre>"},{"location":"deployment/policy/policy-manual/#set-the-environment","title":"Set the Environment","text":"<pre><code># AZ CLI\n$env:ARM_ENVIRONMENT = \"public\"\n</code></pre> <p>NOTE: If you are deploying to Azure US Government, set the environment to <code>usgovernment</code>.</p>"},{"location":"deployment/policy/policy-manual/#terraform-init","title":"Terraform init","text":"<p>Before provisioning any Azure resources with Terraform you must initialize a working directory.</p> <ol> <li> <p>Navigate to the directory in the repository that contains the Mission Enclave Policy Starter Terraform modules and configuration files:</p> <pre><code>cd infrastructure/policy\n</code></pre> </li> </ol> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the Policy without having to deploy the remote state storage account first. For more information on remote state, see the Remote State documentation.</p> <ol> <li> <p>Execute <code>terraform init</code></p> <pre><code>terraform init\n</code></pre> </li> </ol>"},{"location":"deployment/policy/policy-manual/#terraform-plan","title":"Terraform Plan","text":"<p>After initializing the directory, use <code>terraform plan</code> to provision the resources plan described in <code>infrastructure/policy</code>.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform plan</code> with the <code>--var-file</code> parameter to specify the path to the <code>parameters.tfvars</code> file:</p> <pre><code>terraform apply --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\"\n</code></pre> </li> <li> <p>You'll be prompted for a Hub subscription ID and VM Password.</p> <p>Supply the subscription ID you want to use for the Hub network:</p> <pre><code>&gt; terraform plan\nvar.subscription_id_hub\nIf specified, identifies the Platform subscription for \"Hub\" for resource deployment and correct placement in the Management Group hierarchy.\n\nEnter a value:\n\nSupply the VM Admin Password you want to use for the Bastion VM:\n\n```plaintext\nvar.vm_admin_password\nThe password for the administrator account for the Bastion VM.\n\nEnter a value:\n</code></pre> </li> </ol> <p>NOTE: If you want to skip the prompts, you can supply the values on the command line using the <code>--var</code> parameter. For more information, see the Terraform CLI documentation.</p>"},{"location":"deployment/policy/policy-manual/#terraform-apply","title":"Terraform Apply","text":"<p>Now run <code>terraform apply</code>, by default, Terraform will inspect the state of your environment to determine what resource creation, modification, or deletion needs to occur from the <code>terraform plan</code> using the output plan and then prompt you for your approval before taking action.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform apply</code> with the <code>anoa.de.plan</code> parameter:</p> <pre><code>terraform apply \"anoa.dev.plan\"\n</code></pre> </li> </ol> <p>NOTE: Since you are using a output plan file, you will not be prompted for approval to deploy.</p> <ol> <li>The deployment will begin. These commands will deploy all of the resources that make up Mission Enclave LZ. Deployment could take up to 45 minutes.</li> </ol>"},{"location":"deployment/policy/policy-manual/#apply-complete","title":"Apply Complete","text":"<p>When it's complete, you'll see some output values that will be necessary if you want to stand up new workload spoke, or add-on:</p> <pre><code>Apply complete! Resources: 166 added, 0 changed, 0 destroyed.\n\nExample Outputs:\n\nhub_virtual_network_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/anoa-hub-networking-rg/providers/Microsoft.Network/virtualNetworks/anoa-hub-vnet\nhub_virtual_network_name = \"anoa-hub-core-dev-vnet\"\nfirewall_private_ip = \"0.0.0.0\"\nlog_analytics_workspace_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/anoa-hub-networking-rg/providers/microsoft.operationalinsights/workspaces/anoa-hub-logs-dev-law\n...\n</code></pre>"},{"location":"deployment/policy/policy-manual/#deploying-to-other-clouds","title":"Deploying to Other Clouds","text":"<p>When deploying to another cloud, like Azure US Government, first set the cloud and log in.</p> <p>Logging into <code>AzureUSGovernment</code>:</p> <pre><code># AZ CLI\naz cloud set -n AzureUsGovernment\naz login\n</code></pre>"},{"location":"deployment/policy/policy-manual/#deploying-to-multiple-subscriptions","title":"Deploying to Multiple Subscriptions","text":"<p>To deploy Mission Enclave Policy into multiple subscriptions, follow the same steps as deploying to Single Subscription. The only difference is that you will need to add the subscription ID for each subscription you are deploying to on the <code>terraform plan</code>.</p> <p>Example:</p> <pre><code>&gt; terraform plan --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\" -var \"subscription_id_hub=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_identity=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_operations=\"\\00000000-0000-0000-0000-000000000000\" -var \"subscription_id_devsecops=00000000-0000-0000-0000-000000000000\" -var \"vm_admin_password=Password1234!\"\n</code></pre>"},{"location":"deployment/policy/policy-manual/#development-setup","title":"Development Setup","text":"<p>For development of the Mission Policy Starter Terraform templates we recommend using the development container because it has the necessary dependencies already installed. To get started follow the guidance for using the development container.</p>"},{"location":"deployment/policy/policy-planning/","title":"Planning the Landing Zone Policy","text":""},{"location":"deployment/policy/policy-planning/#initial-considerations","title":"Initial considerations","text":"<p>The Mission Enclave Policy Starter Terraform module is designed to be used as a starting point for deploying Azure Policy onto an Mission Enclave Landing Zone. It is not intended to be used as a complete solution, but rather as a starting point that can be customized to meet specific requirements.</p> <p>Before getting started with this module, please take note of the following considerations:</p> <ol> <li> <p>This module requires a minimum <code>azurerm</code> provider version of <code>&gt; 3.36.0</code>.</p> </li> <li> <p>This module requires a minimum Terraform version <code>1.3.1</code>.</p> <p>NOTE: New releases of the module may contain features which require the minimum supported versions to be increased, but changes will be clearly documented in the release notes, user guide, and readme.</p> </li> </ol>"},{"location":"deployment/policy/policy-planning/#mission-enclave-landing-zone-remote-state-storage-account","title":"Mission Enclave Landing Zone Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/policy/policy-planning/#deployment-planning","title":"Deployment Planning","text":"<p>If you want to change the default values, you can do so by editing the parameters.tfvars file. The following sections describe the parameters that can be changed.</p>"},{"location":"deployment/policy/policy-planning/#mission-enclave-policy-global-configuration","title":"Mission Enclave Policy Global Configuration","text":"<p>The following parameters affect the \"Global Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>org_name</code> anoa This Prefix will be used on most deployed resources.  10 Characters max. <code>environment</code> public The environment to deploy to. <code>deploy_environment</code> dev,test,prod The environment to deploy to. <code>default_location</code> eastus The default region to deploy to."},{"location":"deployment/policy/policy-planning/#mission-enclave-policy-configuration","title":"Mission Enclave Policy Configuration","text":"<p>The following parameters affect the \"Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>skip_remediation</code> false set to true to skip remediation of existing resources <code>skip_role_assignment</code> false set to true to skip role assignment <code>re_evaluate_compliance</code> false set to true to re-evaluate compliance <code>policy_non_compliance_message_enabled</code> true set to true to enable the policy non-compliance message <code>policy_non_compliance_message_default_enabled</code> true set to true to enable the policy non-compliance message by default <code>policy_exemption_expires_on</code> \"2025-12-31\" The date the policy exemption expires"},{"location":"deployment/policy/policy-planning/#definition-and-assignment-scopes","title":"Definition and Assignment Scopes","text":"<ul> <li>Should be Defined as high up in the hierarchy as possible.</li> <li>Should be Assigned as low down in the hierarchy as possible.</li> <li>Multiple scopes can be exempt from policy inheritance by specifying <code>assignment_not_scopes</code> or using the Azure NoOps Policy Exemption module.</li> <li>Policy overrides RBAC so even resource owners and contributors fall under compliance enforcements assigned at a higher scope (unless the policy is assigned at the ownership scope).</li> </ul> <p>Requirement: Ensure the deployment account has at least Resource Policy Contributor role at the <code>definition_scope</code> and <code>assignment_scope</code>. To successfully create Role-assignments (or group memberships) the same account may also require the User Access Administrator role at the <code>assignment_scope</code> or preferably the <code>definition_scope</code> to simplify workflows.</p>"},{"location":"deployment/policy/policy-planning/#remediation-tasks-and-role-assignments","title":"Remediation Tasks and Role Assignments","text":"<p>Role assignments and remediation tasks will be automatically created if the Policy Definition contains a list of Role Definitions.</p> <p>The remediation tasks will be created with the following naming convention: <code>remediate-&lt;policy-definition-name&gt;-&lt;timestamp&gt;</code>. The timestamp is used to ensure that a new remediation task is created on each <code>terraform apply</code>. Unless you specify <code>skip_remediation=true</code>, the <code>*_assignment</code> modules will automatically create remediation tasks for policies containing effects of <code>DeployIfNotExists</code> and <code>Modify</code>.</p> <p>You can override these with explicit Role Assignments, or specify <code>skip_role_assignment=true</code> to omit creation, this is also skipped when using User Managed Identities. By default role assignment scopes will match the policy assignment but can be changed by setting role_assignment_scope.</p>"},{"location":"deployment/policy/policy-planning/#assignment-effects","title":"Assignment Effects","text":"<p>The <code>Append</code> effect is used to add a tag to a resource if it doesn't already have it. The <code>DeployIfNotExists</code> effect is used to deploy a resource if it doesn't already exist. The <code>Modify</code> effect is used to modify a resource if it doesn't match the policy. The <code>Audit</code> effect is used to audit a resource for compliance. The <code>Deny</code> effect is used to deny a resource from being created or modified.</p> <p>Note: If you're managing tags, it's recommended to use <code>Modify</code> instead of <code>Append</code> as Modify provides additional operation types and the ability to remediate existing resources. However, Append is recommended if you aren't able to create a managed identity or Modify doesn't yet support the alias for the resource property. Microsoft Docs: Understand how effects work</p>"},{"location":"deployment/policy/policy-planning/#on-demand-evaluation-scan","title":"On-demand evaluation scan","text":"<p>To trigger an on-demand compliance scan with terraform, set <code>re_evaluate_compliance = true</code> on <code>*_assignment</code> modules, defaults to <code>false (ExistingNonCompliant)</code>.</p> <p>Note: <code>ReEvaluateCompliance</code> only applies to remediation at Subscription scope and below and will take longer depending on the size of your environment.</p>"},{"location":"deployment/policy/policy-planning/#mission-enclave-general-policy-configuration","title":"Mission Enclave General Policy Configuration","text":"<p>The following parameters affect the \"General Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>listOfAllowedLocations</code> [\"eastus\", \"eastus2\", \"westus2\", \"westus\", ] list of allowed locations for resources <code>listOfAllowedSKUs</code> [ \"Standard_D1_v2\", \"Standard_D2_v2\",  \"Standard_D3_v2\",  \"Standard_D4_v2\",  \"Standard_D11_v2\",  \"Standard_D12_v2\",  \"Standard_D13_v2\",  \"Standard_D14_v2\",  \"Standard_DS1_v2\",  \"Standard_DS2_v2\",  \"Standard_DS3_v2\",  \"Standard_DS4_v2\",  \"Standard_DS5_v2\",  \"Standard_DS11_v2\",  \"Standard_DS12_v2\",  \"Standard_DS13_v2\",  \"Standard_DS14_v2\",  \"Standard_M8-2ms\",  \"Standard_M8-4ms\",  \"Standard_M8ms\",  \"Standard_M16-4ms\",  \"Standard_M16-8ms\",  \"Standard_M16ms\",  \"Standard_M32-8ms\",  \"Standard_M32-16ms\",  \"Standard_M32ls\",  \"Standard_M32ms\",  \"Standard_M32ts\",  \"Standard_M64-16ms\",  \"Standard_M64-32ms\",  \"Standard_M64ls\",  \"Standard_M64ms\",  \"Standard_M64s\",  \"Standard_M128-32ms\",  \"Standard_M128-64ms\",  \"Standard_M128ms\",  \"Standard_M128s\",  \"Standard_M64\",  \"Standard_M64m\",  \"Standard_M128\",  \"Standard_M128m\",  \"Standard_D1\",  \"Standard_D2\",  \"Standard_D3\",  \"Standard_D4\",  \"Standard_D11\",  \"Standard_D12\",  \"Standard_D13\",  \"Standard_D14\",  \"Standard_DS15_v2\",  \"Standard_NV6\",  \"Standard_NV12\",  \"Standard_NV24\",  \"Standard_F2s_v2\",  \"Standard_F4s_v2\",  \"Standard_F8s_v2\",  \"Standard_F16s_v2\",  \"Standard_F32s_v2\",  \"Standard_F64s_v2\",  \"Standard_F72s_v2\", \"Standard_NC6s_v3\",  \"Standard_NC12s_v3\",  \"Standard_NC24rs_v3\",  \"Standard_NC24s_v3\",  \"Standard_NC6\",  \"Standard_NC12\",  \"Standard_NC24\", \"Standard_NC24r\",  \"Standard_ND6s\",  \"Standard_ND12s\",  \"Standard_ND24rs\",  \"Standard_ND24s\",  \"Standard_NC6s_v2\",  \"Standard_NC12s_v2\",  \"Standard_NC24rs_v2\", \"Standard_NC24s_v2\",  \"Standard_ND40rs_v2\",  \"Standard_NV12s_v3\",  \"Standard_NV24s_v3\",  \"Standard_NV48s_v3\"] list of allowed SKUs for Virtual Machines"},{"location":"deployment/policy/policy-planning/#mission-enclave-logging-policy-configuration","title":"Mission Enclave Logging Policy Configuration","text":"<p>The following parameters affect the \"Logging Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>workspaceRetentionDays</code> 90 The number of days to retain logs in the Log Analytics workspace."},{"location":"deployment/policy/policy-planning/#mission-enclave-network-policy-configuration","title":"Mission Enclave Network Policy Configuration","text":"<p>The following parameters affect the \"Network Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>listofPortsToDeny</code> [\"22\",\"3389\"] list of ports to deny in the Network Security Group <code>listOfAllowedIPAddressesforNSGs</code> [] list of allowed IP addresses for Network Security Groups"},{"location":"deployment/policy/policy-planning/#mission-enclave-monitoring-policy-configuration","title":"Mission Enclave Monitoring Policy Configuration","text":"<p>The following parameters affect the \"Monitoring Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>listOfResourceTypesToAuditDiagnosticSettings</code> [\"Microsoft.AnalysisServices/servers\",  \"Microsoft.ApiManagement/service\",  \"Microsoft.Network/applicationGateways\",  \"Microsoft.Automation/automationAccounts\",  \"Microsoft.ContainerRegistry/registries\",  \"Microsoft.ContainerService/managedClusters\",  \"Microsoft.Batch/batchAccounts\",  \"Microsoft.Cdn/profiles/endpoints\",  \"Microsoft.CognitiveServices/accounts\",  \"Microsoft.DocumentDB/databaseAccounts\",  \"Microsoft.DataFactory/factories\",  \"Microsoft.DataLakeAnalytics/accounts\",  \"Microsoft.DataLakeStore/accounts\",  \"Microsoft.EventGrid/topics\",  \"Microsoft.EventHub/namespaces\",  \"Microsoft.Network/expressRouteCircuits\",  \"Microsoft.Network/azureFirewalls\",  \"Microsoft.HDInsight/clusters\",  \"Microsoft.Devices/IotHubs\",  \"Microsoft.KeyVault/vaults\",  \"Microsoft.Network/loadBalancers\",  \"Microsoft.Logic/integrationAccounts\",  \"Microsoft.Logic/workflows\",  \"Microsoft.DBforMySQL/servers\",  \"Microsoft.Network/networkSecurityGroups\",  \"Microsoft.Network/bastionHosts\",  \"Microsoft.Kusto/clusters\",  \"Microsoft.DBForMariaDB/servers\",  \"Microsoft.DBforPostgreSQL/servers\",  \"Microsoft.PowerBIDedicated/capacities\",  \"Microsoft.Network/publicIPAddresses\",  \"Microsoft.RecoveryServices/vaults\",  \"Microsoft.Cache/redis\",  \"Microsoft.Relay/namespaces\",  \"Microsoft.Search/searchServices\",  \"Microsoft.ServiceBus/namespaces\",  \"Microsoft.SignalRService/SignalR\",  \"Microsoft.Sql/servers/databases\",  \"Microsoft.StreamAnalytics/streamingjobs\",  \"Microsoft.TimeSeriesInsights/environments\",  \"Microsoft.Network/trafficManagerProfiles\",  //\"Microsoft.Compute/virtualMachines\", # Logs are collected through Microsoft Monitoring Agent  //\"Microsoft.Compute/virtualMachineScaleSets\", Removed since it is not supported,  \"Microsoft.Network/virtualNetworks\",  \"Microsoft.Network/virtualNetworkGateways\",  \"Microsoft.Web/sites\",  \"Microsoft.Media/mediaservices\",] list of resource types to audit diagnostic settings <code>securityContactsEmail</code> <code>anoa_admins@contoso.us</code> The email address to send security alerts to."},{"location":"deployment/policy/policy-planning/#mission-enclave-key-vault-policy-configuration","title":"Mission Enclave Key Vault Policy Configuration","text":"<p>The following parameters affect the \"Key Vault Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>listOfAllowedIPAddresses</code> [] list of allowed IP addresses for Key Vault"},{"location":"deployment/policy/policy-planning/#mission-enclave-cost-management-policy-configuration","title":"Mission Enclave Cost Management Policy Configuration","text":"<p>The following parameters affect the \"Cost Management Policy Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>budget_amount</code> \"10000\" The budget amount in USD"},{"location":"deployment/policy/policy-remediation/","title":"Policy Remediation","text":"<p>Policy remediation is the process of correcting non-compliant resources to bring them into compliance with the defined policies. Remediation can be performed manually or automatically, depending on the nature and severity of the non-compliance. Azure NoOps provides guidance on best practices for policy remediation to help organizations ensure that their resources remain secure and compliant.</p>"},{"location":"deployment/policy/policy-remediation/#manual-remediation","title":"Manual Remediation","text":"<p>Manual remediation involves identifying non-compliant resources and taking the necessary actions to correct them. This may involve modifying the resource configuration, deleting the resource, or taking other corrective measures. Manual remediation is often used for non-critical or one-off issues that do not require immediate attention.</p>"},{"location":"deployment/policy/policy-remediation/#automatic-remediation","title":"Automatic Remediation","text":"<p>Automatic remediation involves using automation tools to identify and correct non-compliant resources automatically. This can be achieved using policy as code (PaC) and infrastructure as code (IaC) tools, such as Terraform, to define the desired state of the resources and automatically apply the necessary changes to bring them into compliance.</p> <p>Automatic remediation is often used for critical or recurring issues that require immediate attention. It can help ensure that non-compliant resources are corrected quickly and consistently, reducing the risk of security breaches and compliance violations.</p> <p>Azure NoOps Policy Module provides a set of policy definitions, initatives and remediation tasks that can be used to automatically remediate non-compliant resources in Azure. These policy definitions and remediation tasks are designed to help organizations enforce security and compliance standards across their Azure environment.</p>"},{"location":"deployment/policy/policy-remediation/#best-practices-for-policy-remediation","title":"Best Practices for Policy Remediation","text":"<p>When implementing policy remediation, consider the following best practices:</p> <ul> <li> <p>Define clear remediation actions: Clearly define the actions that need to be taken to bring non-compliant resources into compliance. This may include modifying resource configurations, deleting resources, or taking other corrective measures.</p> </li> <li> <p>Automate where possible: Whenever possible, use automation tools to automatically identify and correct non-compliant resources. This can help ensure that remediation is performed consistently and quickly, reducing the risk of security breaches and compliance violations.</p> </li> <li> <p>Monitor and audit remediation: Regularly monitor and audit the remediation process to ensure that non-compliant resources are being corrected effectively. This can help identify any issues or gaps in the remediation process and ensure that resources remain in compliance.</p> </li> <li> <p>Document remediation procedures: Document the procedures for identifying and correcting non-compliant resources, including the steps to be taken and the tools to be used. This can help ensure that remediation is performed consistently and effectively, even in the absence of the original remediation team.</p> </li> </ul>"},{"location":"deployment/policy/policy/","title":"Mission Enclave Policy Starter","text":"<p>The Mission Enclave Policy Starter Composition Terraform module provides an opinionated approach for deploying and managing the core platform capabilities of Azure Policy using Terraform, with a focus on the central resource hierarchy and Policy Driven Governance.</p> <p>Please refer to Policy Driven Governance for further information.</p> <p>IMPORTANT NOTE: Mission Enclave Policy Starter is to provide a secure, Zero Trust/SCCA aligned, and compliant environment. It is not a one-size-fits-all solution. It is a starting point that should be customized to meet the specific needs of your organization.</p>"},{"location":"deployment/policy/policy/#architecture","title":"Architecture","text":""},{"location":"deployment/policy/policy/#design-areas","title":"Design areas","text":"<p>The Mission Enclave Policy Starter Terraform module is designed to address the following areas:</p> <p>Resource organization</p> <ul> <li>Create custom Policy Assignments, Policy Definitions and Policy Set Definitions (Initiatives)</li> </ul> <p>Identity and access management</p> <ul> <li>Secure the identity subscription using Azure Policy</li> </ul>"},{"location":"deployment/sentinel/sentinel-faq/","title":"FAQs","text":""},{"location":"deployment/sentinel/sentinel-github/","title":"Deploy a Mission Enclave Sentinel Starter using GitHub Actions","text":"<p>Mission Enclave Sentinel starter does not use GitHub Actions.</p>"},{"location":"deployment/sentinel/sentinel-manual/","title":"Deploying the Mission Enclave Sentinel starter using manual deployment","text":""},{"location":"deployment/sentinel/sentinel-manual/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Quickstart</li> <li>Planning </li> <li>Deployment </li> <li>Cleanup </li> <li>Development Setup </li> <li>See Also</li> </ul> <p>This guide describes how to deploy Mission Enclave Sentinel starter using the Terraform modules at infrastructure/terraform/.</p> <p>To get started with Terraform on Azure check out their tutorial.</p>"},{"location":"deployment/sentinel/sentinel-manual/#prerequisites","title":"Prerequisites","text":"<ul> <li>Current version of the Azure CLI</li> <li>The version of the Terraform CLI described in the .devcontainer Dockerfile</li> <li>An Azure Subscription(s) where you or an identity you manage has <code>Owner</code> RBAC permissions</li> </ul> <p>NOTE: Azure Cloud Shell is often our preferred place to deploy from because the AZ CLI and Terraform are already installed. However, sometimes Cloud Shell has different versions of the dependencies from what we have tested and verified, and sometimes there have been bugs in the Terraform Azure RM provider or the AZ CLI that only appear in Cloud Shell. If you are deploying from Azure Cloud Shell and see something unexpected, try the development container or deploy from your machine using locally installed AZ CLI and Terraform. We welcome all feedback and contributions, so if you see something that doesn't make sense, please create an issue or open a discussion thread.</p>"},{"location":"deployment/sentinel/sentinel-manual/#quickstart","title":"Quickstart","text":"<p>Below is an example of a Terraform deployment that uses all the defaults in the TFVARS folder to deploy the Sentinel to one subscription.</p> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the Sentinel without having to deploy the remote state storage account first.</p> <pre><code>cd infrastructure/terraform\nterraform init\nterraform plan --out anoa.dev.plan --var-file tfvars/parameters.tfvars --var \"security_subscription_id=&lt;&lt;subscription_id&gt;&gt;\" # supply some parameters, approve, copy the output values\nterraform apply anoa.dev.plan\n</code></pre>"},{"location":"deployment/sentinel/sentinel-manual/#planning","title":"Planning","text":"<p>If you want to change the default values, you can do so by editing the parameters.tfvars file. The following sections describe the parameters that can be changed.</p>"},{"location":"deployment/sentinel/sentinel-manual/#one-subscription-or-multiple","title":"One Subscription or Multiple","text":"<p>Mission Enclave Sentinel starter can deploy to a single subscription or multiple subscriptions. A test and evaluation deployment may deploy everything to a single subscription, and a production deployment may place each tier into its own subscription.</p> <p>The optional parameters related to subscriptions are below. At least one subscription is required.</p> Parameter name Default Value Description <code>security_subscription_id</code> '' Subscription ID for the security subscription. This is the subscription where the security resources will be deployed."},{"location":"deployment/sentinel/sentinel-manual/#mission-enclave-sentinel-remote-state-storage-account","title":"Mission Enclave Sentinel Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/sentinel/sentinel-manual/#deployment","title":"Deployment","text":"<p>Mission Enclave Sentinel can be deployed with command-line tools provided with the Terraform CLI in PowerShell.</p>"},{"location":"deployment/sentinel/sentinel-manual/#command-line-deployment-using-the-terraform-cli-in-powershell","title":"Command Line Deployment Using the Terraform CLI in PowerShell","text":"<p>Use the Terraform CLI command <code>terraform</code> to deploy Mission Enclave Sentinel across one or many subscriptions. The following sections describe how to deploy Mission Enclave Sentinel using the Terraform CLI in PowerShell.</p>"},{"location":"deployment/sentinel/sentinel-manual/#single-subscription-deployment","title":"Single Subscription Deployment","text":"<p>To deploy Mission Enclave Sentinel into a single subscription, you must first login to Azure.</p>"},{"location":"deployment/sentinel/sentinel-manual/#login-to-azure-cli","title":"Login to Azure CLI","text":"<p>Log in using the Azure CLI.</p> <pre><code># AZ CLI\naz cloud set -n AzureCloud\naz login\n</code></pre>"},{"location":"deployment/sentinel/sentinel-manual/#set-the-environment","title":"Set the Environment","text":"<pre><code># AZ CLI\n$env:ARM_ENVIRONMENT = \"public\"\n</code></pre> <p>NOTE: If you are deploying to Azure US Government, set the environment to <code>usgovernment</code>.</p>"},{"location":"deployment/sentinel/sentinel-manual/#terraform-init","title":"Terraform init","text":"<p>Before provisioning any Azure resources with Terraform you must initialize a working directory.</p> <ol> <li> <p>Navigate to the directory in the repository that contains the Mission Enclave Sentinel Starter Terraform modules and configuration files:</p> <pre><code>cd infrastructure/terraform\n</code></pre> </li> </ol> <p>NOTE: Since this reference implementation is designed to use remote state, you will need to comment out the <code>backend \"local\" {}</code> block in the versions.tf file. This will allow you to deploy the Sentinel without having to deploy the remote state storage account first. For more information on remote state, see the Remote State documentation.</p> <ol> <li> <p>Execute <code>terraform init</code></p> <pre><code>terraform init\n</code></pre> </li> </ol>"},{"location":"deployment/sentinel/sentinel-manual/#terraform-plan","title":"Terraform Plan","text":"<p>After initializing the directory, use <code>terraform plan</code> to provision the resources plan described in <code>infrastructure/terraform</code>.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform plan</code> with the <code>--var-file</code> parameter to specify the path to the <code>parameters.tfvars</code> file:</p> <pre><code>terraform apply --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\"\n</code></pre> </li> <li> <p>You'll be prompted for a Security subscription ID and VM Password.</p> <p>Supply the subscription ID you want to use for the Security network:</p> <pre><code>&gt; terraform plan\nvar.security_subscription_id\nIf specified, identifies the Platform subscription for \"Security\" for resource deployment and correct placement in the Management Group hierarchy.\n\nEnter a value:\n</code></pre> </li> </ol> <p>NOTE: If you want to skip the prompts, you can supply the values on the command line using the <code>--var</code> parameter. For more information, see the Terraform CLI documentation.</p>"},{"location":"deployment/sentinel/sentinel-manual/#terraform-apply","title":"Terraform Apply","text":"<p>Now run <code>terraform apply</code>, by default, Terraform will inspect the state of your environment to determine what resource creation, modification, or deletion needs to occur from the <code>terraform plan</code> using the output plan and then prompt you for your approval before taking action.</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> execute <code>terraform apply</code> with the <code>anoa.de.plan</code> parameter:</p> <pre><code>terraform apply \"anoa.dev.plan\"\n</code></pre> </li> </ol> <p>NOTE: Since you are using a output plan file, you will not be prompted for approval to deploy.</p> <ol> <li>The deployment will begin. These commands will deploy all of the resources that make up Mission Enclave LZ. Deployment could take up to 45 minutes.</li> </ol>"},{"location":"deployment/sentinel/sentinel-manual/#apply-complete","title":"Apply Complete","text":"<p>When it's complete, you'll see some output values that will be necessary if you want to stand up new workload spoke, or add-on:</p> <pre><code>Apply complete! Resources: 166 added, 0 changed, 0 destroyed.\n\nExample Outputs:\n\nsecurity_subscription_id = /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/anoa-security-networking-rg/providers/Microsoft.Network/\n...\n</code></pre>"},{"location":"deployment/sentinel/sentinel-manual/#deploying-to-other-clouds","title":"Deploying to Other Clouds","text":"<p>When deploying to another cloud, like Azure US Government, first set the cloud and log in.</p> <p>Logging into <code>AzureUSGovernment</code>:</p> <pre><code># AZ CLI\naz cloud set -n AzureUsGovernment\naz login\n</code></pre>"},{"location":"deployment/sentinel/sentinel-manual/#deploying-to-multiple-subscriptions","title":"Deploying to Multiple Subscriptions","text":"<p>To deploy Mission Enclave Sentinel into multiple subscriptions, follow the same steps as deploying to Single Subscription. The only difference is that you will need to add the subscription ID for each subscription you are deploying to on the <code>terraform plan</code>.</p> <p>Example:</p> <pre><code>&gt; terraform plan --var-file tfvars/parameters.tfvars --out \"anoa.dev.plan\" -var \"security_subscription_id=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_identity=00000000-0000-0000-0000-000000000000\" -var \"subscription_id_operations=\"\\00000000-0000-0000-0000-000000000000\" -var \"subscription_id_devsecops=00000000-0000-0000-0000-000000000000\" -var \"vm_admin_password=Password1234!\"\n</code></pre>"},{"location":"deployment/sentinel/sentinel-manual/#cleanup","title":"Cleanup","text":"<p>If you want to delete an Mission Enclave Sentinel deployment you can use <code>terraform destroy</code>. If you have deployed more than one Terraform template, e.g., if you have deployed <code>Sentinel</code> and then <code>Add-on</code>, run the <code>terraform destroy</code> commands in the reverse order that you applied them. For example:</p> <pre><code># Deploy core MLZ resources\ncd infrastructure/terraform\nterraform apply\n\n# Destroy core MLZ resources\ncd infrastructure/terraform\nterraform destroy\n</code></pre> <p>Running <code>terraform destroy</code> for <code>infrastructure/terraform</code> looks like this:</p> <ol> <li> <p>From the directory in which you executed <code>terraform init</code> and <code>terraform apply</code> execute <code>terraform destroy</code>:</p> <pre><code>terraform destroy\n</code></pre> </li> <li> <p>You'll be prompted for a subscription ID. Supply the subscription ID you want to used previously:</p> <pre><code>&gt; terraform destroy\nvar.security_subscription_id\nSubscription ID for the deployment\n\nEnter a value: \n</code></pre> </li> <li> <p>Terraform will then inspect the state of your Azure environment and compare it with what is described in Terraform state. Eventually, you'll be prompted for your approval to destroy resources. Supply <code>yes</code>:</p> <pre><code>Do you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\nEnter a value: yes\n</code></pre> </li> </ol> <p>This command will attempt to remove all the resources that were created by <code>terraform apply</code> and could take up to 45 minutes.</p>"},{"location":"deployment/sentinel/sentinel-manual/#development-setup","title":"Development Setup","text":"<p>For development of the Mission Sentinel Starter Terraform templates we recommend using the development container because it has the necessary dependencies already installed. To get started follow the guidance for using the development container.</p>"},{"location":"deployment/sentinel/sentinel-manual/#see-also","title":"See Also","text":"<p>Terraform</p> <p>Terraform Tutorial</p> <p>Developing in a container using Visual Studio Code</p>"},{"location":"deployment/sentinel/sentinel-planning/","title":"Planning the Sentinel Deployment","text":""},{"location":"deployment/sentinel/sentinel-planning/#initial-considerations","title":"Initial considerations","text":"<p>The Mission Enclave Sentinel Starter Terraform module is designed to be used as a starting point for deploying Azure Sentinel onto an Mission Enclave Landing Zone. It is not intended to be used as a complete solution, but rather as a starting point that can be customized to meet specific requirements.</p> <p>Before getting started with this module, please take note of the following considerations:</p> <ol> <li> <p>This module requires a minimum <code>azurerm</code> provider version of <code>&gt; 3.36.0</code>.</p> </li> <li> <p>This module requires a minimum Terraform version <code>1.3.1</code>.</p> <p>NOTE: New releases of the module may contain features which require the minimum supported versions to be increased, but changes will be clearly documented in the release notes, user guide, and readme.</p> </li> </ol> <p>Before any deployment, you should have a clear understanding of Azure Sentinel and how it works. You should also have a clear understanding of the Azure Sentinel pricing model and how it will affect your organization.</p> <p>Please review the Azure Sentinel pricing page for more information.</p>"},{"location":"deployment/sentinel/sentinel-planning/#mission-enclave-landing-zone-remote-state-storage-account","title":"Mission Enclave Landing Zone Remote State Storage Account","text":"<p>The remote state storage account is used to store the Terraform state files. The state files contain the current state of the infrastructure that has been deployed. The state files are used by Terraform to determine what changes need to be made to the infrastructure when a deployment is run.</p> <p>To find out more about remote state, see the Remote State documentation.</p>"},{"location":"deployment/sentinel/sentinel-planning/#deployment-planning","title":"Deployment Planning","text":"<p>If you want to change the default values, you can do so by editing the parameters.tfvars file. The following sections describe the parameters that can be changed.</p>"},{"location":"deployment/sentinel/sentinel-planning/#mission-enclave-sentinel-global-configuration","title":"Mission Enclave Sentinel Global Configuration","text":"<p>The following parameters affect the \"Global Configuration\". To override the defaults edit the variables file at parameters.tfvars.</p> <p>Example Configuration:</p> Parameter name Default Value Description <code>org_name</code> anoa This Prefix will be used on most deployed resources.  10 Characters max. <code>environment</code> public The environment to deploy to. <code>deploy_environment</code> dev,test,prod The environment to deploy to. <code>default_location</code> eastus The default region to deploy to."},{"location":"deployment/sentinel/sentinel/","title":"Mission Enclave Sentinel Starter","text":"<p>The Mission Enclave Sentinel Starter Terraform module provides an opinionated approach for deploying and managing the core platform capabilities of Azure Sentinel using Terraform, with a focus on the central resource hierarchy.</p>"},{"location":"deployment/sentinel/sentinel/#architecture","title":"Architecture","text":""},{"location":"deployment/sentinel/sentinel/#design-areas","title":"Design areas","text":"<p>The Mission Enclave Sentinel Starter Terraform module is designed to address the following areas:</p> <p>Resource organization</p> <ul> <li>Create a management group hierarchy for the Sentinel platform</li> </ul> <p>Identity and access management</p> <ul> <li>Azure Active Directory tenant for the Sentinel platform</li> </ul> <p>Security</p> <ul> <li>Enable Azure Security Center and Azure Defender for the Sentinel platform</li> </ul>"},{"location":"developing-modules/module-documentation/","title":"Module documentation","text":"<p>This document provides guidance on how to document an Azure NoOps overlay module.</p>"},{"location":"developing-modules/module-documentation/#documentation","title":"Documentation","text":"<p>Module documentation is the process of documenting the module. It is a documentation technique that is used to document the module.</p>"},{"location":"developing-modules/module-documentation/#terraform-documentation","title":"Terraform documentation","text":"<p>Terraform has built-in support for module documentation through the use of the <code>README.md</code> file. This file contains the documentation for the module, and can be used to provide information about the module.</p> <p>To create the <code>README.md</code> file, use the following command:</p> <pre><code>touch README.md\n</code></pre> <p>This command will create the <code>README.md</code> file in the current directory.</p>"},{"location":"developing-modules/module-documentation/#module-documentation-structure","title":"Module documentation structure","text":"<p>The <code>README.md</code> file should contain the following sections:</p> <ul> <li>Module overview</li> <li>Module structure</li> <li>Module testing</li> <li>Module examples</li> <li>Module resources</li> </ul>"},{"location":"developing-modules/module-documentation/#module-overview","title":"Module overview","text":"<p>The module overview section should provide a high-level overview of the module. It should describe what the module does, and how it can be used.</p> <p>Includes:</p> <p>Module Title: The title of the module. It should be descriptive and concise. For example, <code>Azure Storage Account Overlay Terraform Module</code>.</p>"},{"location":"developing-modules/module-documentation/#module-structure","title":"Module structure","text":"<p>The module structure section should describe the structure of the module. It should provide information about the directory structure, file naming conventions, and code style.</p>"},{"location":"developing-modules/module-documentation/#module-testing","title":"Module testing","text":"<p>The module testing section should provide guidance on how to test the module. It should describe the different types of testing that can be performed, and how to perform them.</p>"},{"location":"developing-modules/module-documentation/#module-examples","title":"Module examples","text":"<p>The module examples section should provide examples of how to use the module. It should include code snippets and explanations of how to use the module.</p>"},{"location":"developing-modules/module-documentation/#module-resources","title":"Module resources","text":"<p>The module resources section should provide information about the resources that the module creates. It should describe the resources, their configuration, and any other relevant information.</p>"},{"location":"developing-modules/module-structure/","title":"Module Structure","text":"<p>Building a module is a great way to reuse code and share it with others. This guide will help you understand the basic concepts and best practices for structuring your Terraform modules used with Azure NoOps.</p>"},{"location":"developing-modules/module-structure/#terraform-modules","title":"Terraform modules","text":"<ul> <li>Overlay modules should be used to create reusable, composable, and configurable infrastructure components. They should be designed to be used in a variety of scenarios and should be as specific as possible. For example, a module that creates a Key Vault should also create a Storage account if it is needed as part of the use case.</li> <li>A overlay module should not create just a single resource. Exceptions can be made if that resource requires complex configuration or a stringent set of predefined parameters.</li> </ul>"},{"location":"developing-modules/module-structure/#module-structure_1","title":"Module structure","text":"<p>In Azure NoOps overlay modules, the Terraform configurations are structured in the following way:</p> <ul> <li> <p><code>resources.&lt;azure_resource&gt;.tf</code> - contains the resources that are created in the module and the configuration of those resources. Example: <code>resources.key.vault.tf</code></p> </li> <li> <p><code>modules.&lt;azure_resource&gt;.tf</code> - contains the NoOps modules that are used in the module. Example: <code>modules.key.vault.tf</code> which is the Key Vault module</p> </li> <li> <p><code>variables.&lt;azure_resource&gt;.tf</code> - contains declarations of variables used in <code>resources.tf</code></p> </li> <li> <p><code>outputs.tf</code> - contains outputs from the resources created in <code>resources.tf</code></p> </li> <li> <p><code>versions.tf</code> - contains version requirements for Terraform and providers</p> </li> <li> <p><code>parameters.tfvars</code> should not be used anywhere except composition.</p> </li> </ul>"},{"location":"developing-modules/module-structure/#control-plane-and-data-plane","title":"Control plane and data plane","text":"<ul> <li> <p>A module should only perform control plane operations (e.g., managing Storage account or Key vault), not data plane operations (e.g., managing Storage container or Key vault secret). See control plane and data plane in Microsoft docs.</p> <ul> <li> <p>Performing data plane operations usually require workarounds for dealing with firewalls when run from an automated pipeline that deviate from the deterministic approach promoted by Terraform (e.g, temporarily disabling firewall or temporarily adding own IP to firewall).</p> </li> <li> <p>This may lead to the decision of disabling a resource firewall because it is preventing data plane operations from a pipeline, lowering the security of the resource.</p> </li> <li> <p>Data plane operations should be handled outside of Terraform. For example, use a script to upload a file to a storage container or use a pipeline to add a secret to a key vault. This way, the data plane operations can be performed in a deterministic way and the security of the resource can be maintained.</p> </li> </ul> <p>Note Might be irrelevant depending on the implementation of github/roadmap#614.</p> </li> </ul>"},{"location":"developing-modules/module-structure/#resources","title":"Resources","text":"<ul> <li>By default, configure resources based on Microsoft security recommendations, e.g. Security recommendations for Blob storage.</li> </ul>"},{"location":"developing-modules/module-structure/#repeatable-resources","title":"Repeatable resources","text":"<ul> <li> <p>For named repeatable resources (resources that support argument <code>name</code>), use a variable of type <code>map(object())</code> to dynamically create the resources, where setting the value to <code>{}</code> will not create any resources.</p> <pre><code>variable \"firewall_rules\" {\n  description = \"A map of SQL firewall rules to create.\"\n\n  type = map(object({\n    name             = string\n    start_ip_address = string\n    end_ip_address   = string\n  }))\n\n  default = {}\n}\n\nresource \"azurerm_mssql_firewall_rule\" \"this\" {\n  for_each = var.firewall_rules\n\n  name             = each.value.name\n  start_ip_address = each.value.start_ip_address\n  end_ip_address   = each.value.end_ip_address\n}\n</code></pre> </li> <li> <p>For unnamed repeatable resources (usually a resources that link other resources together), use a variable of type <code>list(object())</code> to dynamically create the resources, where setting the value to <code>[]</code> will not create any resources.</p> <pre><code>variable \"job_schedules\" {\n  description = \"A list of Automation job schedules to create.\"\n\n  type = list(object({\n    runbook_name  = string\n    schedule_name = string\n  }))\n\n  default = []\n}\n\nresource \"azurerm_automation_job_schedule\" \"this\" {\n  count = length(var.job_schedules)\n\n  runbook_name            = var.job_schedules[count.index].runbook_name\n  schedule_name           = var.job_schedules[count.index].schedule_name\n}\n</code></pre> </li> </ul>"},{"location":"developing-modules/module-structure/#repeatable-nested-blocks","title":"Repeatable nested blocks","text":"<ul> <li> <p>For repeatable nested blocks, use a variable of type <code>list(object())</code> to dynamically create the nested blocks, where setting the value to <code>[]</code> will not create any nested blocks:</p> <pre><code>variable \"auth_settings_active_directory\" {\n  description = \"A list of authentication settings using the Active Directory provider to configure for this Linux web app.\"\n\n  type = list(object({\n    client_id                  = string\n    client_secret_setting_name = string\n  }))\n\n  default = []\n}\n\nresource \"azurerm_linux_web_app\" \"this\" {\n  # omitted\n\n  auth_settings {\n    enabled = length(var.auth_settings_active_directory) == 0 ? false : true\n\n    dynamic \"active_directory\" {\n      for_each = var.auth_settings_active_directory\n\n      content {\n        client_id                  = active_directory.value[\"client_id\"]\n        client_secret_setting_name = active_directory.value[\"client_secret_setting_name\"]\n      }\n    }\n  }\n}\n</code></pre> </li> </ul>"},{"location":"developing-modules/module-structure/#non-repeatable-nested-blocks","title":"Non-repeatable nested blocks","text":"<ul> <li>For non-repeatable nested blocks, use a variable of type <code>object()</code> to dynamically create the nested block, where setting the value to <code>null</code> will not create the nested block.</li> </ul> <p>Note: This is important because the nested block may not be supported in certain scenarios. For example, <code>blob_properties</code> for <code>azurerm_storage_account</code> is only supported if <code>account_kind</code> is set to <code>StorageV2</code> or <code>BlobStorage</code>.</p> <pre><code>```terraform\nvariable \"account_kind\" {\n  description = \"The kind of storage account to create.\"\n  type        = string\n  default     = \"StorageV2\"\n}\n\nvariable \"blob_properties\" {\n  description = \"The blob properties for this storage account.\"\n\n  type = object({\n    versioning_enabled  = optional(bool, true)\n    change_feed_enabled = optional(bool, true)\n  })\n\n  default = {}\n}\n\nresource \"azurerm_storage_account\" \"this\" {\n  # omitted\n  account_kind = var.account_kind\n\n  dynamic \"blob_properties\" {\n    for_each = var.blob_properties != null ? [var.blob_properties] : []\n\n    content {\n      versioning_enabled  = blob_properties.value[\"versioning_enabled\"]\n      change_feed_enabled = blob_properties.value[\"change_feed_enabled\"]\n    }\n  }\n}\n```\n\n&gt; Known exceptions to this rule would be:\n&gt;\n&gt; - Blocks that are defined as required by the provider (e.g. the `site_config` block for the `azurerm_linux_web_app` resource).\n&gt; - Blocks that are optional but requires an argument to enable/disable its functionality (e.g. the `auth_settings` block for the `azurerm_linux_web_app` resource which requires an argument `enabled`).\n</code></pre>"},{"location":"developing-modules/module-structure/#variables","title":"Variables","text":"<ul> <li>All arguments should be made available as variables with sensible default values to make the module as generic as possible. Default values should be the most generic and secure values possible.</li> </ul> <p>Example generic value: <code>account_kind</code> set to <code>StorageV2</code> instead of  <code>BlobStorage</code> for <code>storage</code> module.</p> <p>Example secure value: <code>min_tls_version</code> set to <code>1.2</code> instead of <code>1.0</code> for <code>storage</code> module.</p> <ul> <li>Required variables (variables without default values) should be placed first in <code>variables.tf</code>.</li> </ul>"},{"location":"developing-modules/module-structure/#variable-naming-convention","title":"Variable naming convention","text":"<p>Variables and outputs should follow a common naming convention <code>&lt;resource&gt;_&lt;block&gt;_&lt;argument&gt;</code>, where <code>&lt;resource&gt;</code> and/or <code>&lt;block&gt;</code> can be omitted if not applicable.</p> <ul> <li>Use <code>description</code> to explain the use case of variables and outputs.</li> </ul> <pre><code>variable \"vault_name\" {\n  description = \"The name of this key vault.\"\n  type        = string\n}\n\nvariable \"diagnostic_setting_name\" {\n  description = \"The name of this diagnostic setting.\"\n  type        = string\n}\n\nvariable \"network_acls_virtual_network_subnet_ids\" {\n  description = \"A list of virtual network subnet IDs that should be able to bypass the network ACL and access this key vault.\"\n  type        = list(string)\n  default     = []\n}\n\nresource \"azurerm_key_vault\" \"this\" {\n  name = var.vault_name\n  # omitted\n\n  network_acls {\n    # omitted\n    virtual_network_subnet_ids = var.network_acls_virtual_network_subnet_ids\n  }\n}\n\nresource \"azurerm_monitor_diagnostic_setting\" \"this\" {\n  name               = var.diagnostic_setting_name\n  target_resource_id = azurerm_key_vault.this.id\n  # omitted\n}\n</code></pre> <p>Known exceptions to this rule:</p> <ul> <li>Variable names that contain the module name. For example, in module <code>storage</code> the variable <code>storage_account_name</code> should be named <code>account_name</code> instead.</li> </ul>"},{"location":"developing-modules/module-structure/#lifecycle-meta-arguments","title":"Lifecycle meta-arguments","text":"<ul> <li> <p>The <code>prevent_destroy</code> lifecycle meta-argument should be used sparingly. A <code>CanNotDelete</code> lock should be used instead.</p> </li> <li> <p>The <code>ignore_changes</code> lifecycle meta-argument should be used sparingly, as heavy use could lead to configuration drift.</p> </li> </ul>"},{"location":"developing-modules/module-testing/","title":"Module Testing","text":"<p>This document provides guidance on how to test an Azure NoOps overlay module.</p>"},{"location":"developing-modules/module-testing/#testing","title":"Testing","text":""},{"location":"developing-modules/module-testing/#unit-testing","title":"Unit testing","text":"<p>Unit testing is the process of testing individual units or components of a module. It is a testing technique that is used to test the smallest part of a module. In the context of Terraform, this means testing the individual resources and modules that make up the module.</p>"},{"location":"developing-modules/module-testing/#terraform-testing","title":"Terraform testing","text":"<p>Terraform has built-in support for unit testing through the use of the <code>terraform validate</code> command. This command checks the configuration files for syntax errors and other issues, and can be used to verify that the configuration is valid.</p> <p>To run the <code>terraform validate</code> command, use the following command:</p> <pre><code>terraform validate\n</code></pre> <p>This command will check the configuration files in the current directory for syntax errors and other issues.</p>"},{"location":"developing-modules/module-testing/#integration-testing","title":"Integration testing","text":"<p>Integration testing is the process of testing the integration of different components of a module. In the context of Terraform, this means testing the interaction between different resources and modules.</p>"},{"location":"developing-modules/module-testing/#terraform-testing_1","title":"Terraform testing","text":"<p>Terraform has built-in support for integration testing through the use of the <code>terraform plan</code> and <code>terraform apply</code> commands. These commands can be used to create a plan for the changes that will be made to the infrastructure, and to apply those changes.</p> <p>To run the <code>terraform plan</code> command, use the following command:</p> <pre><code>terraform plan\n</code></pre> <p>This command will create a plan for the changes that will be made to the infrastructure.</p> <p>To apply the changes, use the following command:</p> <pre><code>terraform apply\n</code></pre> <p>This command will apply the changes to the infrastructure.</p>"},{"location":"developing-modules/module-testing/#end-to-end-testing","title":"End-to-end testing","text":"<p>End-to-end testing is the process of testing a complete module in a production-like environment. In the context of Terraform, this means testing the complete module in a real environment.</p>"},{"location":"developing-modules/module-testing/#terraform-testing_2","title":"Terraform testing","text":"<p>Terraform has built-in support for end-to-end testing through the use of the <code>terraform apply</code> command. This command can be used to apply the complete module to a real environment.</p> <p>To apply the complete module, use the following command:</p> <pre><code>terraform apply\n</code></pre> <p>This command will apply the complete module to a real environment.</p>"},{"location":"developing-modules/module-testing/#automated-tests","title":"Automated tests","text":"<ul> <li>Automated tests should be implemented for all variants of the relevant resource using Terratest. For example, in the <code>storage</code> module, automated tests should be implemented for standard GPv2 storage, premium GPv2 storage, standard blob storage, premium block blob storage and premium file storage.</li> </ul>"},{"location":"developing-modules/module-testing/#best-practices","title":"Best practices","text":"<p>When testing an Azure NoOps overlay module, consider the following best practices:</p> <ul> <li>Use the <code>terraform validate</code> command to check the configuration files for syntax errors and other issues.</li> <li>Use the <code>terraform plan</code> command to create a plan for the changes that will be made to the infrastructure.</li> <li>Use the <code>terraform apply</code> command to apply the changes to the infrastructure.</li> <li>Use the <code>terraform destroy</code> command to destroy the infrastructure after testing.</li> <li>Use the <code>terraform fmt</code> command to format the configuration files before testing.</li> </ul>"},{"location":"developing-modules/module-testing/#next-steps","title":"Next steps","text":"<p>For more information on testing Terraform modules, see the Terraform documentation. [</p>"},{"location":"developing-modules/overview/","title":"Developing Terraform modules in Azure NoOps","text":"<p>This document provides best practices for developing reusable Terraform modules in Azure NoOps.</p>"},{"location":"developing-modules/overview/#repository","title":"Repository","text":"<ul> <li> <p>Use this template when creating your repository.</p> </li> <li> <p>Use the common naming convention <code>terraform-azurerm-overlays-&lt;name&gt;</code> when naming your repository.</p> <p>For example, if you want to create a module named <code>storage</code>, the repository should be named <code>terraform-azurerm-overlays-storage</code>.</p> </li> <li> <p>Configure the following code owners in a file <code>.github/CODEOWNERS</code>:</p> <pre><code>* @azurenoops/code-reviewers\n</code></pre> </li> </ul>"},{"location":"developing-modules/overview/#roles-and-scope","title":"Roles and scope","text":"<ul> <li>Use resources that do not require more than <code>Contributor</code> role at the resource group scope.   If you need to use a higher role, create an example instead.</li> </ul>"},{"location":"developing-modules/overview/#hidden-resources","title":"Hidden resources","text":"<ul> <li>Don't create resources that are automatically created by Azure, e.g. hidden resources such as the <code>master</code> database for an Azure SQL server:</li> </ul>"},{"location":"platform-engineering/overview/","title":"Platform Engineering","text":"<p>THIS LAB IS CURRNTLY UNDER DEVELOPMENT</p> <p>Platform Engineering is a discipline that focuses on designing and building toolchains and workflows that enable self-service capabilities for software engineering teams. The goal is to improve developer productivity and operational efficiency by providing a robust and scalable platform that abstracts the complexities of infrastructure management.</p>"},{"location":"platform-engineering/overview/#key-components","title":"Key Components","text":"<ol> <li>Infrastructure as Code (IaC): Automating the provisioning and management of infrastructure using code, ensuring consistency and repeatability.</li> <li>Continuous Integration/Continuous Deployment (CI/CD): Implementing pipelines that automate the build, test, and deployment processes.</li> <li>Monitoring and Logging: Setting up comprehensive monitoring and logging to ensure visibility into system performance and issues.</li> <li>Security and Compliance: Integrating security practices and compliance checks into the development lifecycle.</li> </ol>"},{"location":"platform-engineering/overview/#benefits","title":"Benefits","text":"<ul> <li>Increased Developer Productivity: Developers can focus on writing code rather than managing infrastructure.</li> <li>Consistency and Reliability: Automated processes reduce the risk of human error and ensure consistent environments.</li> <li>Scalability: Platforms can scale to meet the demands of growing applications and teams.</li> <li>Faster Time to Market: Streamlined processes enable quicker delivery of features and updates.</li> </ul>"},{"location":"platform-engineering/overview/#best-practices","title":"Best Practices","text":"<ul> <li>Adopt a DevOps Culture: Foster collaboration between development and operations teams.</li> <li>Use Modular Design: Build reusable and composable components.</li> <li>Implement Robust Testing: Ensure all changes are thoroughly tested before deployment.</li> <li>Continuously Improve: Regularly review and refine platform capabilities based on feedback and evolving needs.</li> </ul> <p>Platform Engineering is essential for modern software development, providing the foundation for efficient and scalable operations.</p>"},{"location":"platform-engineering/labs/backstage/","title":"Get started","text":"<p>The goal of this lab is for you to learn how to configure and deploy a Backstage instance to Azure. We will start by initializing anc configuring Backstage to work with GitHub or Azure DevOps. In further labs we will then define the infrastructure and deploy it to Azure.</p> <p>This should give you a good understanding of how to use terrform to deploy infrastructure to Azure and how to use Backstage for your Internal Developer Portal.</p>"},{"location":"platform-engineering/labs/backstage/install/","title":"Install Backstage","text":""},{"location":"platform-engineering/labs/backstage/install/#overview","title":"Overview","text":"<p>In this lab we will initialize the standalone app for the moment. In the later labs we will add an external database to it and deploy it to Azure.</p> <p>To get set up quickly with your own Backstage project you can create a Backstage App.</p> <p>A Backstage App is a monorepo setup with lerna that includes everything you need to run Backstage in your own environment. It includes the Backstage frontend, backend, and CLI tooling.</p>"},{"location":"platform-engineering/labs/backstage/install/#instructions","title":"Instructions","text":""},{"location":"platform-engineering/labs/backstage/install/#step-0-prerequisites","title":"Step 0 - Prerequisites","text":"<p>Create a new directory for all the workshop files and navigate into it.</p> <p>mkdir pulumi-backstage-azure-workshop cd pulumi-backstage-azure-workshop This will be the root directory for the workshop. Keep this in mind for all the following steps and chapters.</p>"},{"location":"platform-engineering/labs/backstage/install/#step-1-create-a-backstage-app","title":"Step 1 - Create a Backstage App","text":"<p>Backstage provides a utility for creating new apps. It guides you through the initial setup of selecting the name of the app and a database for the backend. The database options are either SQLite or PostgreSQL, where the latter requires you to set up a separate database instance.</p> <p>To create a new app, run the following command:</p> <pre><code>npx @backstage/create-app@latest\n</code></pre> <p>NOTE: If prompted, enter a name for the app. This will be the name of the directory that is created. I suggest to use backstage</p> <p><pre><code>? Enter a name for the app [required] backstage\n\nCreating the app...\n\n Checking if the directory is available:\n  checking      backstage \u2714 \n\n Creating a temporary app directory:\n\n Preparing files:\n  copying       .dockerignore \u2714 \n  copying       .eslintignore \u2714 \n  templating    .eslintrc.js.hbs \u2714 \n  templating    .gitignore.hbs \u2714 \n  copying       .prettierignore \u2714 \n  copying       README.md \u2714 \n  copying       app-config.local.yaml \u2714 \n  copying       app-config.production.yaml \u2714 \n  templating    app-config.yaml.hbs \u2714 \n  templating    backstage.json.hbs \u2714 \n  templating    catalog-info.yaml.hbs \u2714 \n  copying       lerna.json \u2714 \n  templating    package.json.hbs \u2714 \n  copying       playwright.config.ts \u2714 \n  copying       tsconfig.json \u2714 \n  copying       yarn.lock \u2714 \n  copying       README.md \u2714 \n  copying       entities.yaml \u2714 \n  copying       org.yaml \u2714 \n  copying       template.yaml \u2714 \n  copying       catalog-info.yaml \u2714 \n  copying       index.js \u2714 \n  copying       package.json \u2714 \n  copying       README.md \u2714 \n  templating    .eslintrc.js.hbs \u2714 \n  copying       Dockerfile \u2714 \n  copying       README.md \u2714 \n  templating    package.json.hbs \u2714 \n  copying       index.test.ts \u2714 \n  copying       index.ts \u2714 \n  copying       types.ts \u2714 \n  copying       app.ts \u2714 \n  copying       auth.ts \u2714 \n  copying       catalog.ts \u2714 \n  copying       proxy.ts \u2714 \n  copying       scaffolder.ts \u2714 \n  templating    search.ts.hbs \u2714 \n  copying       techdocs.ts \u2714 \n  copying       .eslintignore \u2714 \n  templating    .eslintrc.js.hbs \u2714 \n  templating    package.json.hbs \u2714 \n  copying       android-chrome-192x192.png \u2714 \n  copying       apple-touch-icon.png \u2714 \n  copying       favicon-16x16.png \u2714 \n  copying       favicon-32x32.png \u2714 \n  copying       favicon.ico \u2714 \n  copying       index.html \u2714 \n  copying       manifest.json \u2714 \n  copying       robots.txt \u2714 \n  copying       safari-pinned-tab.svg \u2714 \n  copying       app.test.ts \u2714 \n  copying       App.test.tsx \u2714 \n  copying       App.tsx \u2714 \n  copying       apis.ts \u2714 \n  copying       index.tsx \u2714 \n  copying       setupTests.ts \u2714 \n  copying       LogoFull.tsx \u2714 \n  copying       LogoIcon.tsx \u2714 \n  copying       Root.tsx \u2714 \n  copying       index.ts \u2714 \n  copying       EntityPage.tsx \u2714 \n  copying       SearchPage.tsx \u2714 \n\n Moving to final location:\n  moving        backstage \u2714 \n\n Installing dependencies:\n  determining   yarn version \u2714 \n  executing     yarn install \u2714 \n  executing     yarn tsc \u2714 \n\n\ud83e\udd47  Successfully created backstage\n\n All set! Now you might want to:\n  Run the app: cd backstage &amp;&amp; yarn dev\n  Set up the software catalog: https://backstage.io/docs/features/software-catalog/configuration\n  Add authentication: https://backstage.io/docs/auth/\n</code></pre> This can take a few minutes to complete. But you should see the current progress in the terminal.</p> <p>You should now have a new directory called backstage in your root directory, which contains following files and folders:</p> <pre><code>backstage/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app-config.local.yaml\n\u251c\u2500\u2500 app-config.production.yaml\n\u251c\u2500\u2500 app-config.yaml\n\u251c\u2500\u2500 backstage.json\n\u251c\u2500\u2500 catalog-info.yaml\n\u251c\u2500\u2500 dist-types\n\u2502   \u251c\u2500\u2500 packages\n\u2502   \u2514\u2500\u2500 tsconfig.tsbuildinfo\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 entities.yaml\n\u2502   \u251c\u2500\u2500 org.yaml\n\u2502   \u2514\u2500\u2500 template\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u2514\u2500\u2500 backend\n\u251c\u2500\u2500 playwright.config.ts\n\u251c\u2500\u2500 plugins\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 yarn.lock\n</code></pre> <ul> <li>README.md: The main README file for the app.</li> <li>app-config.yaml: Main configuration file for the app.</li> <li>catalog-info.yaml: Catalog Entities descriptors.</li> <li>lerna.json: Contains information about workspaces and other lerna configuration needed for the monorepo setup.</li> <li>package.json: Root package.json for the project. Note: Be sure that you don\u2019t add any npm dependencies here as they probably should be installed in the intended workspace rather than in the root.</li> <li>packages/: Lerna leaf packages or \u201cworkspaces\u201d. Everything here is going to be a separate package, managed by lerna.</li> <li>packages/app/: An fully functioning Backstage frontend app, that acts as a good starting point for you to get to know Backstage.</li> <li>packages/backend/: The backend for Backstage.</li> </ul>"},{"location":"platform-engineering/labs/backstage/install/#step-2-run-the-app","title":"Step 2 - Run the App","text":"<p>As soon as the app is created, you can run it by navigating into the backstage directory and running the following command:</p> <pre><code>cd backstage\nyarn dev\n</code></pre> <p>The yarn dev command will run both the frontend and backend as separate processes (named [0] and [1]) in the same window. When the command finishes running, it should open up a browser window displaying your app. If not, you can open a browser and directly navigate to the frontend at http://localhost:3000.</p>"},{"location":"platform-engineering/labs/backstage/prerequisites/","title":"Prerequisites","text":""},{"location":"platform-engineering/labs/backstage/prerequisites/#install-tools","title":"Install tools","text":"<ul> <li>Install Terraform</li> <li>Install Azure CLI</li> <li>If you're using VS Code, install the Terraform Extension for VS Code</li> <li>Backstage</li> </ul> <p>There is also a devcontainer.json file in this repository which you can use to spin up a devcontainer with all the tools installed. Highly recommended if you are using VSCode, GitHub Codespaces or GitHub Copilot.</p> <p>Now we're ready to start learning about Backstage.</p>"},{"location":"platform-engineering/labs/backstage/use-case/","title":"Use Case","text":"<p>This is a use case for creating Backstage as an Internal Developer Portal.</p>"},{"location":"reusable-modules/","title":"Reusable modules","text":""},{"location":"reusable-modules/usage-examples/","title":"Usage examples","text":""},{"location":"reusable-modules/usage-examples/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Must be assigned role <code>Contributor</code> at the subscription scope.</p> </li> <li> <p>Create a file <code>main.tf</code> with the following contents:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n\nresource \"random_id\" \"example\" {\n  byte_length = 8\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"rg-${random_id.example.hex}\"\n  location = \"northeurope\"\n}\n</code></pre> <p>It will:</p> <ul> <li>Configure the Azure provider.</li> <li>Create a random identifier to generate random resource names.</li> <li>Create an Azure resource group to contain resources.</li> </ul> </li> </ul>"},{"location":"reusable-modules/usage-examples/#setup-azure-log-analytics","title":"Setup Azure Log Analytics","text":"<pre><code>module \"log_analytics\" {\n  source = \"github.com/azurenoops/terraform-azurerm-log-analytics?ref=v2.1.1\"\n\n  workspace_name      = \"log-${random_id.example.hex}\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n}\n</code></pre>"},{"location":"reusable-modules/usage-examples/#setup-azure-key-vault","title":"Setup Azure Key Vault","text":"<pre><code>module \"key_vault\" {\n  source = \"github.com/azurenoops/terraform-azurerm-key-vault?ref=v11.2.0\"\n\n  vault_name                 = \"kv-${random_id.example.hex}\"\n  resource_group_name        = azurerm_resource_group.example.name\n  location                   = azurerm_resource_group.example.location\n  log_analytics_workspace_id = module.log_analytics.workspace_id\n\n  # List of IP addresses or IP ranges in CIDR format\n  network_acls_ip_rules = []\n}\n</code></pre>"},{"location":"reusable-modules/usage-examples/#setup-azure-storage","title":"Setup Azure Storage","text":"<pre><code>module \"storage\" {\n  source = \"github.com/azurenoops/terraform-azurerm-storage-account?ref=v12.1.1\"\n\n  account_name               = \"st${random_id.example.hex}\"\n  resource_group_name        = azurerm_resource_group.example.name\n  location                   = azurerm_resource_group.example.location\n  log_analytics_workspace_id = module.log_analytics.workspace_id\n\n  # List of IP addresses or IP ranges in CIDR format\n  network_rules_ip_rules = []\n}\n</code></pre>"}]}